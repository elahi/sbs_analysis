alpha2 ~ dnorm(-2, 2)
sigma ~ dunif(0, 50)
tau <- 1/sigma^2
# likelihood
for(i in 1:length(y)){
y_mu[i] <- exp(alpha1 + alpha2 * era[i])
y[i] ~ dnorm(y_mu[i], tau)
}
# derived quantities
# size <- exp(y)
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/pooledJAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("alpha1", "alpha2", "sigma"),
n.iter = n.iter, n.thin = 1)
head(zm[[1]])
traceplot(zm)
densplot(zm)
dat <- childsDF
names(dat)
datJ <- dat4 %>%
mutate(eraJ = ifelse(era == "past", 0, 1),
thc = scale(tideHTm, scale = F))
summary(datJ)
datJ <- dat4 %>%
mutate(eraJ = ifelse(era == "past", 0, 1),
thc = as.numeric(scale(tideHTm, scale = F)))
summary(datJ)
childsDF <- droplevels(filter(datJ, sp == "LIKE"))
waraDF <- droplevels(filter(datJ, sp == "CHFU"))
hexDF <- droplevels(filter(datJ, sp == "LODI"))
data = list(
y = dat$size1mm,
era = dat$eraJ
thc = dat$thc
)
data = list(
y = dat$size1mm,
era = dat$eraJ,
thc = dat$thc
)
dat <- childsDF
data = list(
y = dat$size1mm,
era = dat$eraJ,
thc = dat$thc
)
inits = list(
list(
alpha1 = 15,
alpha2 = 0,
sigma = 40,
beta1 = -0.2,
beta2 = 0.2
),
list(
alpha1 = 5,
alpha2 = 0.7,
sigma = 20,
beta1 = -0.5,
beta2 = 0.5
)
)
n.adapt = 500
n.update = 500
n.iter = 500
sink("sbs_bayes/models/era_thcJAGS.R")
n.adapt = 500
n.update = 500
n.iter = 500
cat("
model{
# priors
alpha1 ~ dnorm(15, 30)
alpha2 ~ dnorm(-2, 2)
sigma ~ dunif(0, 50)
tau <- 1/sigma^2
beta1 ~ dnorm(0, 1)
beta2 ~ dnorm(0, 1)
# likelihood
for(i in 1:length(y)){
y_mu[i] <- exp(alpha1 + alpha2 * era[i] + beta1 * thc[i] + beta2 * thc[i])
y[i] ~ dnorm(y_mu[i], tau)
}
# derived quantities
# size <- exp(y)
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/era_thcJAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
summary(dat)
View(dat)
dat %>% filter(is.na(thc)) %>% View()
datJ <- dat4 %>%
mutate(eraJ = ifelse(era == "past", 0, 1),
thc = as.numeric(scale(sample_area_tidal_ht, scale = F)))
childsDF <- droplevels(filter(datJ, sp == "LIKE"))
waraDF <- droplevels(filter(datJ, sp == "CHFU"))
hexDF <- droplevels(filter(datJ, sp == "LODI"))
dat <- childsDF
dat %>% filter(is.na(thc)) %>% View()
data = list(
y = dat$size1mm,
era = dat$eraJ,
thc = dat$thc
)
inits = list(
list(
alpha1 = 15,
alpha2 = 0,
sigma = 40,
beta1 = -0.2,
beta2 = 0.2
),
list(
alpha1 = 5,
alpha2 = 0.7,
sigma = 20,
beta1 = -0.5,
beta2 = 0.5
)
)
n.adapt = 500
n.update = 500
n.iter = 500
sink("sbs_bayes/models/era-thc_JAGS.R")
cat("
model{
# priors
alpha1 ~ dnorm(15, 30)
alpha2 ~ dnorm(-2, 2)
sigma ~ dunif(0, 50)
tau <- 1/sigma^2
beta1 ~ dnorm(0, 1)
beta2 ~ dnorm(0, 1)
# likelihood
for(i in 1:length(y)){
y_mu[i] <- exp(alpha1 + alpha2 * era[i] + beta1 * thc[i] + beta2 * thc[i])
y[i] ~ dnorm(y_mu[i], tau)
}
# derived quantities
# size <- exp(y)
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/era-thc_JAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("alpha1", "alpha2", "sigma"),
n.iter = n.iter, n.thin = 1)
head(zm[[1]])
zm = coda.samples(jm, variable.names = c("alpha1", "alpha2", "sigma", "beta1", "beta2"),
n.iter = n.iter, n.thin = 1)
head(zm[[1]])
traceplot(zm)
densplot(zm)
sink("sbs_bayes/models/era-thc_JAGS.R")
cat("
model{
# priors
alpha1 ~ dnorm(15, 30)
alpha2 ~ dnorm(-2, 2)
sigma ~ dunif(0, 50)
tau <- 1/sigma^2
beta1 ~ dnorm(0, 1)
beta2 ~ dnorm(0, 1)
# likelihood
for(i in 1:length(y)){
y_mu[i] <- exp(alpha1 + alpha2*era[i] + beta1*era[i] + beta2*thc[i]*time[i])
y[i] ~ dnorm(y_mu[i], tau)
}
# derived quantities
# size <- exp(y)
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/era-thc_JAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
sink("sbs_bayes/models/era-thc_JAGS.R")
cat("
model{
# priors
alpha1 ~ dnorm(15, 30)
alpha2 ~ dnorm(-2, 2)
sigma ~ dunif(0, 50)
tau <- 1/sigma^2
beta1 ~ dnorm(0, 1)
beta2 ~ dnorm(0, 1)
# likelihood
for(i in 1:length(y)){
y_mu[i] <- exp(alpha1 + alpha2*era[i] + beta1*era[i] + beta2*thc[i]*era[i])
y[i] ~ dnorm(y_mu[i], tau)
}
# derived quantities
# size <- exp(y)
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/era-thc_JAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("alpha1", "alpha2", "sigma", "beta1", "beta2"),
n.iter = n.iter, n.thin = 1)
head(zm[[1]])
traceplot(zm)
densplot(zm)
summary(zm)
sink("sbs_bayes/models/era-thc_JAGS.R")
cat("
model{
# priors
alpha1 ~ dnorm(15, 30)
alpha2 ~ dnorm(-2, 2)
sigma ~ dunif(0, 50)
tau <- 1/sigma^2
beta1 ~ dnorm(0, 1)
beta2 ~ dnorm(0, 1)
# likelihood
for(i in 1:length(y)){
y_mu[i] <- exp(alpha1 + alpha2*era[i] + beta1*thc[i] + beta2*thc[i]*era[i])
y[i] ~ dnorm(y_mu[i], tau)
}
# derived quantities
# size <- exp(y)
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/era-thc_JAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("alpha1", "alpha2", "sigma", "beta1", "beta2"),
n.iter = n.iter, n.thin = 1)
head(zm[[1]])
traceplot(zm)
densplot(zm)
sink("sbs_bayes/models/era-thc_JAGS.R")
cat("
model{
# priors
alpha1 ~ dnorm(15, 30)
alpha2 ~ dnorm(-2, 2)
sigma ~ dunif(0, 50)
tau <- 1/sigma^2
beta1 ~ dnorm(0, 1)
beta2 ~ dnorm(0, 1)
beta3 ~ dnorm(0, 1)
# likelihood
for(i in 1:length(y)){
y_mu[i] <- exp(alpha1 + alpha2*era[i] + beta1*thc[i] + beta2*time[i] + beta3*thc[i]*era[i])
y[i] ~ dnorm(y_mu[i], tau)
}
# derived quantities
# size <- exp(y)
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/era-thc_JAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("alpha1", "alpha2", "sigma", "beta1", "beta2", "beta3"),
n.iter = n.iter, n.thin = 1)
sink("sbs_bayes/models/era-thc_JAGS.R")
cat("
model{
# priors
alpha1 ~ dnorm(15, 30)
alpha2 ~ dnorm(-2, 2)
sigma ~ dunif(0, 50)
tau <- 1/sigma^2
beta1 ~ dnorm(0, 1)
beta2 ~ dnorm(0, 1)
beta3 ~ dnorm(0, 1)
# likelihood
for(i in 1:length(y)){
y_mu[i] <- exp(alpha1 + alpha2*era[i] + beta1*thc[i] + beta2*era[i] + beta3*thc[i]*era[i])
y[i] ~ dnorm(y_mu[i], tau)
}
# derived quantities
# size <- exp(y)
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/era-thc_JAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("alpha1", "alpha2", "sigma", "beta1", "beta2", "beta3"),
n.iter = n.iter, n.thin = 1)
head(zm[[1]])
traceplot(zm)
densplot(zm)
summary(zm)
sink("sbs_bayes/models/era-thc_JAGS.R")
cat("
model{
# priors
alpha1 ~ dnorm(15, 30)
alpha2 ~ dnorm(-2, 2)
sigma ~ dunif(0, 50)
tau <- 1/sigma^2
beta1 ~ dnorm(0, 5)
beta2 ~ dnorm(0, 5)
beta3 ~ dnorm(0, 5)
# likelihood
for(i in 1:length(y)){
y_mu[i] <- exp(alpha1 + alpha2*era[i] + beta1*thc[i] + beta2*era[i] + beta3*thc[i]*era[i])
y[i] ~ dnorm(y_mu[i], tau)
}
# derived quantities
# size <- exp(y)
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/era-thc_JAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("alpha1", "alpha2", "sigma", "beta1", "beta2", "beta3"),
n.iter = n.iter, n.thin = 1)
head(zm[[1]])
traceplot(zm)
densplot(zm)
n.adapt = 1000
n.update = 500
n.iter = 500
sink("sbs_bayes/models/era-thc_JAGS.R")
cat("
model{
# priors
alpha1 ~ dnorm(15, 30)
alpha2 ~ dnorm(-2, 2)
sigma ~ dunif(0, 50)
tau <- 1/sigma^2
beta1 ~ dnorm(0, 5)
beta2 ~ dnorm(0, 5)
#beta3 ~ dnorm(0, 5)
# likelihood
for(i in 1:length(y)){
y_mu[i] <- exp(alpha1 + alpha2*era[i] + beta1*thc[i] + beta2*thc[i]*era[i])
y[i] ~ dnorm(y_mu[i], tau)
}
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/era-thc_JAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("alpha1", "alpha2", "sigma", "beta1", "beta2"),
n.iter = n.iter, n.thin = 1)
head(zm[[1]])
traceplot(zm)
densplot(zm)
summary(zm)
sink("sbs_bayes/models/era-thc_JAGS.R")
cat("
model{
# priors
alpha1 ~ dnorm(15, 30)
alpha2 ~ dnorm(-2, 2)
sigma ~ dunif(0, 50)
tau <- 1/sigma^2
beta1 ~ dnorm(0, 10)
beta2 ~ dnorm(0, 5)
#beta3 ~ dnorm(0, 5)
# likelihood
for(i in 1:length(y)){
y_mu[i] <- exp(alpha1 + alpha2*era[i] + beta1*thc[i] + beta2*thc[i]*era[i])
y[i] ~ dnorm(y_mu[i], tau)
}
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/era-thc_JAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("alpha1", "alpha2", "sigma", "beta1", "beta2"),
n.iter = n.iter, n.thin = 1)
head(zm[[1]])
traceplot(zm)
densplot(zm)
exp(11)
log(11)
summary(zm)
gelman.diag(zm, multivariate = F)
lm1 <- lm(size1mm ~ era, data = dat)
summary(lm1)
lm2 <- lm(size1mm ~ era * thc, data = dat)
summary(lm2)
lm2
lm2
n.adapt = 1000
n.update = 1000
n.iter = 1000
sink("sbs_bayes/models/era-thc_JAGS.R")
cat("
model{
# priors
alpha1 ~ dnorm(15, 30)
alpha2 ~ dnorm(-2, 2)
sigma ~ dunif(0, 50)
tau <- 1/sigma^2
beta1 ~ dnorm(0, 10)
beta2 ~ dnorm(0, 5)
#beta3 ~ dnorm(0, 5)
# likelihood
for(i in 1:length(y)){
y_mu[i] <- exp(alpha1 + alpha2*era[i] + beta1*thc[i] + beta2*thc[i]*era[i])
y[i] ~ dnorm(y_mu[i], tau)
}
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/era-thc_JAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("alpha1", "alpha2", "sigma", "beta1", "beta2"),
n.iter = n.iter, n.thin = 1)
head(zm[[1]])
traceplot(zm)
densplot(zm)
dat <- childsDF
dat %>% filter(is.na(thc)) %>% View()
data = list(
y = dat$size1mm,
era = dat$eraJ,
thc = dat$thc
)
inits = list(
list(
alpha1 = 15,
alpha2 = 0,
sigma = 40,
beta1 = -0.9,
beta2 = -0.2
),
list(
alpha1 = 5,
alpha2 = 0.7,
sigma = 20,
beta1 = 9,
beta2 = 0.5
)
)
n.adapt = 1000
n.update = 1000
n.iter = 1000
sink("sbs_bayes/models/era-thc_JAGS.R")
cat("
model{
# priors
alpha1 ~ dnorm(15, 30)
alpha2 ~ dnorm(-2, 2)
sigma ~ dunif(0, 50)
tau <- 1/sigma^2
beta1 ~ dnorm(0, 10)
beta2 ~ dnorm(0, 5)
#beta3 ~ dnorm(0, 5)
# likelihood
for(i in 1:length(y)){
y_mu[i] <- exp(alpha1 + alpha2*era[i] + beta1*thc[i] + beta2*thc[i]*era[i])
y[i] ~ dnorm(y_mu[i], tau)
}
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/era-thc_JAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("alpha1", "alpha2", "sigma", "beta1", "beta2"),
n.iter = n.iter, n.thin = 1)
head(zm[[1]])
traceplot(zm)
densplot(zm)
head(zm[[1]])
traceplot(zm)
summary(zm)
gelman.diag(zm, multivariate = F)
n.adapt = 2000
n.update = 2000
n.iter = 2000
## JAGS model
sink("sbs_bayes/models/era-thc_JAGS.R")
cat("
model{
# priors
alpha1 ~ dnorm(15, 30)
alpha2 ~ dnorm(-2, 2)
sigma ~ dunif(0, 50)
tau <- 1/sigma^2
beta1 ~ dnorm(0, 10)
beta2 ~ dnorm(0, 5)
#beta3 ~ dnorm(0, 5)
# likelihood
for(i in 1:length(y)){
y_mu[i] <- exp(alpha1 + alpha2*era[i] + beta1*thc[i] + beta2*thc[i]*era[i])
y[i] ~ dnorm(y_mu[i], tau)
}
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/era-thc_JAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("alpha1", "alpha2", "sigma", "beta1", "beta2"),
n.iter = n.iter, n.thin = 1)
head(zm[[1]])
traceplot(zm)
densplot(zm)
summary(zm)
gelman.diag(zm, multivariate = F)
