geom_hline(yintercept = 0, linetype = "dashed", color = "gray", size = my_error_thickness) +
#coord_flip() +
scale_fill_viridis_d(begin = 0.5, end = 1) +
labs(y = "Proportional change in body size",
x = "") +
scale_y_continuous(limits = c(-0.5, 0.5)) +
geom_errorbar(data = res_df, aes(ymin = lower, ymax = upper),
position = position_dodge(my_dodge),
width = my_bar_width, size = my_error_thickness) +
geom_point(data = res_df, position = position_dodge(my_dodge),
size = my_point_size, pch = 23)
## 5. Add meta results
res_df %>%
ggplot(aes(size_cat, yi, fill = size_cat)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray", size = my_error_thickness) +
coord_flip() +
scale_fill_viridis_d(begin = 0.5, end = 1) +
labs(y = "Proportional change in body size",
x = "") +
scale_y_continuous(limits = c(-0.5, 0.5)) +
geom_errorbar(data = res_df, aes(ymin = lower, ymax = upper),
position = position_dodge(my_dodge),
width = my_bar_width, size = my_error_thickness) +
geom_point(data = res_df, position = position_dodge(my_dodge),
size = my_point_size, pch = 23)
# Create results dataframe
res_df_asis <- data.frame(yi = res$b,
upper = res$ci.ub,
lower = res$ci.lb,
size_cat = NA,
n = dim(datM_max)[1])
res_df <- rbind(res_df_asis, res_df_max, res_df_mean)
res_df
## 5. Add meta results
res_df %>%
ggplot(aes(size_cat, yi, fill = size_cat)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray", size = my_error_thickness) +
coord_flip() +
scale_fill_viridis_d(begin = 0.5, end = 1) +
labs(y = "Proportional change in body size",
x = "") +
scale_y_continuous(limits = c(-0.5, 0.5)) +
geom_errorbar(data = res_df, aes(ymin = lower, ymax = upper),
position = position_dodge(my_dodge),
width = my_bar_width, size = my_error_thickness) +
geom_point(data = res_df, position = position_dodge(my_dodge),
size = my_point_size, pch = 23)
## 5. Add meta results
res_df %>%
ggplot(aes(size_cat, yi, fill = size_cat)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray", size = my_error_thickness) +
coord_flip() +
scale_fill_viridis_d(begin = 0.5, end = 1, na.value = "black") +
labs(y = "Proportional change in body size",
x = "") +
scale_y_continuous(limits = c(-0.5, 0.5)) +
geom_errorbar(data = res_df, aes(ymin = lower, ymax = upper),
position = position_dodge(my_dodge),
width = my_bar_width, size = my_error_thickness) +
geom_point(data = res_df, position = position_dodge(my_dodge),
size = my_point_size, pch = 23)
## For mean size
datM_mean <- datM %>%
filter(threshold == "no")
res <- rma(yi, vi, method = "DL", data = datM_mean)
res
# Create results dataframe
res_df_mean <- data.frame(yi = res$b,
upper = res$ci.ub,
lower = res$ci.lb,
size_cat = "Complete size distribution",
n = dim(datM_mean)[1])
## For max size
datM_max <- datM %>%
filter(threshold == "yes")
res <- rma(yi, vi, method = "DL", data = datM_max)
res
# Create results dataframe
res_df_max <- data.frame(yi = res$b,
upper = res$ci.ub,
lower = res$ci.lb,
size_cat = "Upper size distribution",
n = dim(datM_max)[1])
## Results, as is
datM_asis <- datM %>%
filter(study == "Roy_2003" | study == "WilsonBrodie_2017")
datM_asis <- rbind(datM_asis, datM_mean)
res <- rma(yi, vi, method = "DL", data = datM_asis)
res
# Create results dataframe
res_df_asis <- data.frame(yi = res$b,
upper = res$ci.ub,
lower = res$ci.lb,
size_cat = "As is",
n = dim(datM_max)[1])
res_df <- rbind(res_df_asis, res_df_max, res_df_mean)
res_df
res_df %>%
ggplot(aes(size_cat, yi, fill = size_cat)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray", size = my_error_thickness) +
coord_flip() +
scale_fill_viridis_d(begin = 0.5, end = 1, na.value = "black") +
labs(y = "Proportional change in body size",
x = "") +
scale_y_continuous(limits = c(-0.5, 0.5)) +
geom_errorbar(data = res_df, aes(ymin = lower, ymax = upper),
position = position_dodge(my_dodge),
width = my_bar_width, size = my_error_thickness) +
geom_point(data = res_df, position = position_dodge(my_dodge),
size = my_point_size, pch = 23)
# Create results dataframe
res_df_asis <- data.frame(yi = res$b,
upper = res$ci.ub,
lower = res$ci.lb,
size_cat = NA,
n = dim(datM_max)[1])
res_df <- rbind(res_df_asis, res_df_max, res_df_mean)
res_df
## 5. Add meta results
res_df %>%
ggplot(aes(size_cat, yi, fill = size_cat)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray", size = my_error_thickness) +
coord_flip() +
scale_fill_viridis_d(begin = 0.5, end = 1, na.value = "black") +
labs(y = "Proportional change in body size",
x = "") +
scale_y_continuous(limits = c(-0.5, 0.5)) +
geom_errorbar(data = res_df, aes(ymin = lower, ymax = upper),
position = position_dodge(my_dodge),
width = my_bar_width, size = my_error_thickness) +
geom_point(data = res_df, position = position_dodge(my_dodge),
size = my_point_size, pch = 23)
ggsave("sbs_meta/meta_figs/meta_lrr_ppt_05.pdf", height = 4, width = 10)
#### CALCULATE LOG RATIO OF MEANS BY STUDIES #####
## For mean size
datM_mean <- datM %>%
filter(threshold == "no")
res <- rma(yi, vi, method = "DL", data = datM_mean)
res
# Create results dataframe
res_df_mean <- data.frame(yi = res$b,
upper = res$ci.ub,
lower = res$ci.lb,
size_cat = "Sizes - complete (mean)",
n = dim(datM_mean)[1])
## For max size
datM_max <- datM %>%
filter(threshold == "yes")
res <- rma(yi, vi, method = "DL", data = datM_max)
res
# Create results dataframe
res_df_max <- data.frame(yi = res$b,
upper = res$ci.ub,
lower = res$ci.lb,
size_cat = "Sizes - upper (max)",
n = dim(datM_max)[1])
## Results, as is
datM_asis <- datM %>%
filter(study == "Roy_2003" | study == "WilsonBrodie_2017")
datM_asis <- rbind(datM_asis, datM_mean)
res <- rma(yi, vi, method = "DL", data = datM_asis)
res
# Create results dataframe
res_df_asis <- data.frame(yi = res$b,
upper = res$ci.ub,
lower = res$ci.lb,
size_cat = NA,
n = dim(datM_max)[1])
res_df <- rbind(res_df_asis, res_df_max, res_df_mean)
res_df
res_df %>%
ggplot(aes(size_cat, yi, fill = size_cat)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray", size = my_error_thickness) +
coord_flip() +
scale_fill_viridis_d(begin = 0.5, end = 1, na.value = "black") +
labs(y = "Proportional change in body size",
x = "") +
scale_y_continuous(limits = c(-0.5, 0.5)) +
geom_errorbar(data = res_df, aes(ymin = lower, ymax = upper),
position = position_dodge(my_dodge),
width = my_bar_width, size = my_error_thickness) +
geom_point(data = res_df, position = position_dodge(my_dodge),
size = my_point_size, pch = 23)
ggsave("sbs_meta/meta_figs/meta_lrr_ppt_05.pdf", height = 4, width = 10)
#################################################
# Author: Robin Elahi
# Date: 180218
# Assemble data for meta-analysis
# In preparation for use with metafor
#################################################
##### LOAD PACKAGES, DATA #####
library(dplyr)
library(readr)
library(tidyr)
library(metafor)
library(ggplot2)
### Field data
elahi <- read_csv("sbs_meta/output/dfMeta_Elahi2015_species.csv")
elahi <- elahi %>%
mutate(species = gsub(x = species, pattern = "\\.", replacement = " ")) %>%
mutate(species = ifelse(species == "Chlorostoma funebralis", "Tegula funebralis", species)) %>%
mutate(museum = "field")
gall_frank <- read_csv("sbs_meta/output/dfMeta_Galloway-Frank_2017.csv") %>%
mutate(museum = "field")
gall_tren <- read_csv("sbs_meta/output/dfMeta_Galloway-Treneman_2017.csv") %>%
mutate(museum = "field", studySub = "threshold_none")
hay_king <- read_csv("sbs_meta/output/dfMeta_Hayford-King_2017.csv") %>%
mutate(museum = "field")
hay_elahi <- read_csv("sbs_meta/output/dfMeta_Hayford-Elahi_2018.csv") %>%
mutate(museum = "field")
### Museum data
## Fisher summary data is based on raw data extracted from histograms
fisher <- read_csv("sbs_meta/output/dfMeta_Fisher2009_raw.csv") %>%
mutate(museum = "museum")
## Wilson-Brodie 2017
wilson <- read_csv("sbs_meta/output/dfMeta_Wilson-Brodie_2017.csv") %>%
mutate(museum = "museum", studySub = "threshold_half_max")
## Sagarin 2010
sagarin <- read_csv("sbs_meta/output/dfMeta_Sagarin_2010.csv") %>%
mutate(museum = "museum")
## Select first museum sample and field for Roy (using raw data now)
roy <- read_csv("sbs_meta/output/dfMeta_Roy2003_raw.csv") %>%
mutate(museum = "museum", studySub = "threshold_half_max")
## Compile
dat <- rbind(elahi, gall_frank, hay_king, hay_elahi, #gall_tren,
fisher, wilson, roy, sagarin)
### Modify species names
dat <- dat %>%
mutate(species2 = ifelse(study == "WilsonBrodie_2017",
paste(species, "(UK)", sep = " "), species),
species2 = ifelse(study == "Galloway_2017" & species == "Tegula funebralis",
paste(species, "(OR)", sep = " "), species2),
species2 = ifelse(study == "Hayford-Elahi_2018",
paste(species, "(SC)", sep = " "), species2),
species2 = ifelse(study == "Hayford_2017",
paste(species, "(FB)", sep = " "), species2))
dat <- dat %>%
mutate(threshold = ifelse(studySub == "threshold_none", "no", "yes"))
##### PREP FOR METAFOR #####
## For metafor, I want the data in wide format
names(dat)
dat2 <- dat %>%
select(study, studySub, threshold, species, species2, museum, latitude, era,
size_rep, size_error, sample_size) %>%
rename(size_n = sample_size)
dat2
names(dat2)
datM <- dat2 %>%
gather(key = temp, value = value, starts_with("size")) %>%
unite(col = temp1, era, temp, sep = "_") %>%
spread(temp1, value) %>%
arrange(desc(latitude))
datM
### Re-order by latitude
datM <- datM %>%
mutate(species2 = reorder(species2, latitude))
## Column names for metafor
names(datM)
names(datM) <- c("study", "studySub", "threshold", "species", "species2", "museum", "latitude",
"sd2i", "n2i", "m2i", "sd1i", "n1i", "m1i")
datM
### calculate log ratio of means and corresponding sampling variances
datM <- escalc(measure = "ROM", m1i = m1i, sd1i = sd1i, n1i = n1i,
m2i = m2i, sd2i = sd2i, n2i = n2i, data = datM)
datM
### Get standard error and CI (following Vuorre)
datM <- datM %>%
mutate(sei = as.numeric(sqrt(vi)),
upper = yi + 2*sei,
lower = yi - 2*sei)
datM <- datM %>%
mutate(museum01 = ifelse(museum == "museum", 0, 1))
### meta-analysis of log ratio of means using a random-effects model
res <- rma(yi, vi, method = "DL", data = datM)
res
forest(res)
#### CALCULATE LOG RATIO OF MEANS BY STUDIES #####
## For mean size
datM_mean <- datM %>%
filter(threshold == "no")
res <- rma(yi, vi, method = "DL", data = datM_mean)
res
# Create results dataframe
res_df_mean <- data.frame(yi = res$b,
upper = res$ci.ub,
lower = res$ci.lb,
size_cat = "Sizes - complete (mean)",
n = dim(datM_mean)[1])
## For max size
datM_max <- datM %>%
filter(threshold == "yes")
res <- rma(yi, vi, method = "DL", data = datM_max)
res
# Create results dataframe
res_df_max <- data.frame(yi = res$b,
upper = res$ci.ub,
lower = res$ci.lb,
size_cat = "Sizes - upper (max)",
n = dim(datM_max)[1])
## Results, as is
datM_asis <- datM %>%
filter(study == "Roy_2003" | study == "WilsonBrodie_2017")
datM_asis <- rbind(datM_asis, datM_mean)
res <- rma(yi, vi, method = "DL", data = datM_asis)
res
# Create results dataframe
res_df_asis <- data.frame(yi = res$b,
upper = res$ci.ub,
lower = res$ci.lb,
size_cat = NA,
n = dim(datM_max)[1])
datM
## Our results only (field)
datM_field <- datM %>%
filter(museum == "field")
res <- rma(yi, vi, method = "DL", data = datM_field)
res
plot(res)
# Create results dataframe
res_df_field <- data.frame(yi = res$b,
upper = res$ci.ub,
lower = res$ci.lb,
size_cat = NA,
n = dim(datM_max)[1])
res_df <- rbind(res_df_asis, res_df_max, res_df_mean, res_df_field)
res_df
res_df <- rbind(res_df_asis, res_df_max, res_df_mean, res_df_field)
res_df
## For mean size
datM_mean <- datM %>%
filter(threshold == "no")
res <- rma(yi, vi, method = "DL", data = datM_mean)
res
# Create results dataframe
res_df_mean <- data.frame(yi = res$b,
upper = res$ci.ub,
lower = res$ci.lb,
size_cat = "Sizes - complete (mean)",
n = dim(datM_mean)[1])
res_df_mean
## For max size
datM_max <- datM %>%
filter(threshold == "yes")
res <- rma(yi, vi, method = "DL", data = datM_max)
res
# Create results dataframe
res_df_max <- data.frame(yi = res$b,
upper = res$ci.ub,
lower = res$ci.lb,
size_cat = "Sizes - upper (max)",
n = dim(datM_max)[1])
## Results, as is
datM_asis <- datM %>%
filter(study == "Roy_2003" | study == "WilsonBrodie_2017")
datM_asis <- rbind(datM_asis, datM_mean)
res <- rma(yi, vi, method = "DL", data = datM_asis)
res
# Create results dataframe
res_df_asis <- data.frame(yi = res$b,
upper = res$ci.ub,
lower = res$ci.lb,
size_cat = NA,
n = dim(datM_max)[1])
## Our results only (field)
datM_field <- datM %>%
filter(museum == "field")
# Create results dataframe
res_df_field <- data.frame(yi = res$b,
upper = res$ci.ub,
lower = res$ci.lb,
size_cat = NA,
n = dim(res_df_field)[1])
res_df_field
datM_field
## Our results only (field)
datM_field <- datM %>%
filter(museum == "field" & threshold == "no") %>%
res <- rma(yi, vi, method = "DL", data = datM_field)
## Our results only (field)
datM_field <- datM %>%
filter(museum == "field" & threshold == "no")
res <- rma(yi, vi, method = "DL", data = datM_field)
res
plot(res)
plot(res)
datM_field <- datM %>%
filter(museum == "field" & threshold == "yes")
res <- rma(yi, vi, method = "DL", data = datM_field)
res
plot(res)
## Our results only (field)
datM_field <- datM %>%
filter(museum == "field" & threshold == "no")
source("sbs_meta/01_assemble_raw_data.R")
library(nlme)
library(broom)
library(viridis)
###### ALL DATA #####
stat_dat <- df
library(lmer)
library(sjPlot)
library(lme4)
stat_dat <- df
stat_dat <- stat_dat %>%
filter(!is.na(size1mm)) %>%
mutate(size_log = log(size1mm),
species2 = paste(species, fig_legend, sep = "_"))
## Let intercepts vary by species nested within study
fit1 <- lmer(size_log ~ era * museum + (1 \ species / study))
## Let intercepts vary by species nested within study
fit1 <- lmer(size_log ~ era * museum + (1 | species / study),
data = stat_dat)
summary(fit1)
unique(stat_dat$species)
unique(stat_dat$species2)
stat_dat <- df
stat_dat <- stat_dat %>%
filter(!is.na(size1mm)) %>%
mutate(size_log = log(size1mm),
species2 = paste(species, fig_legend, sep = "_"))
## Let intercepts vary by species nested within study
fit1 <- lme(size_log ~ era * museum,
random = ~ 1 | species2 / study,
data = stat_dat)
## Let intercepts vary by species
fit2 <- lme(size_log ~ era * museum,
random = ~ 1 | species2,
data = stat_dat)
## Let intercepts vary by species, and slopes vary by era
fit3 <- lme(size_log ~ era * museum,
random = ~ era | species2,
data = stat_dat)
AIC(fit1, fit2, fit3)
## Let intercepts vary by species nested within study
fit1 <- lmer(size_log ~ era * museum + (1 | species2 / study),
data = stat_dat)
fit2 <- lme(size_log ~ era * museum,
random = ~ 1 | species / study,
data = stat_dat)
fit1
fit2
## Let intercepts vary by species nested within study
fit1 <- lmer(size_log ~ era * museum + (1 | species / study),
data = stat_dat)
fit2 <- lme(size_log ~ era * museum,
random = ~ 1 | species / study,
data = stat_dat)
fit1
fit2
## Let intercepts vary by species
fit2 <- lmer(size_log ~ era * museum + (1 | species2),
data = stat_dat)
## Let intercepts vary by species, and slopes vary by era
fit3 <- lmer(size_log ~ era * museum + (era | species2),
data = stat_dat)
AIC(fit1, fit2, fit3)
fit3 <- lmer(size_log ~ era * museum + (era | species / study),
data = stat_dat)
## Let intercepts vary by species nested within study
fit1 <- lmer(size_log ~ era * museum + (1 | species / study),
data = stat_dat)
## Let intercepts vary by species
fit2 <- lmer(size_log ~ era * museum + (1 | species2),
data = stat_dat)
## Let intercepts vary by species, and slopes vary by era
fit3 <- lmer(size_log ~ era * museum + (era | species2),
data = stat_dat)
fit4 <- lmer(size_log ~ era * museum + (era | species / study),
data = stat_dat)
AIC(fit1, fit2, fit3)
AIC(fit1, fit2, fit3, fit4)
summary(fit3)
summary(fit4)
my_fit <- fit3
my_fit <- fit3
sjp.lmer(my_fit)
sjp.lmer(my_fit, sort.coef = "erapresent")
sjp.lmer(my_fit, sort.coef = "era")
sjp.lmer(my_fit, sort.coef = "species2")
sjp.lmer(my_fit, facet.grid = FALSE, sort.coef = "sort.all")
sjp.lmer(my_fit, facet.grid = FALSE, sort.coef = "sort.all")
sjp.lmer(my_fit, type = "re", facet.grid = FALSE, sort.coef = "sort.all")
sjp.lmer(my_fit, type = "re", facet.grid = TRUE, sort.coef = "sort.all")
sjp.lmer(my_fit, type = "re", facet.grid = TRUE, sort.coef = "era")
sjp.lmer(my_fit, type = "re", facet.grid = TRUE, sort.coef = "erapresent")
sjp.lmer(my_fit, type = "re", facet.grid = TRUE, sort.coef = "Intercept")
sjp.lmer(my_fit, type = "re", facet.grid = TRUE, sort.coef = "museum")
sjp.lmer(my_fit, type = "re", facet.grid = TRUE, sort.coef = "era")
sjp.lmer(my_fit, type = "fe")
sjp.lmer(my_fit, type = "fe", p.kr = FALSE)
stat_dat <- dfsub
## Let intercepts vary by species, and slopes vary by era
fit3 <- lmer(size_log ~ era * museum + (era | species2),
data = stat_dat)
my_fit <- fit3
sjp.lmer(my_fit, type = "re", facet.grid = TRUE, sort.coef = "era")
sjp.lmer(my_fit, type = "fe", p.kr = FALSE)
stat_dat <- dfsub
## Let intercepts vary by species, and slopes vary by era
fit3 <- lmer(size_log ~ era * museum + (era | species2),
data = stat_dat)
stat_dat <- stat_dat %>%
filter(!is.na(size1mm)) %>%
mutate(size_log = log(size1mm),
species2 = paste(species, fig_legend, sep = "_"))
## Let intercepts vary by species, and slopes vary by era
fit3 <- lmer(size_log ~ era * museum + (era | species2),
data = stat_dat)
my_fit <- fit3
sjp.lmer(my_fit, type = "re", facet.grid = TRUE, sort.coef = "era")
sjp.lmer(my_fit, type = "fe", p.kr = FALSE)
summary(my_fit)
