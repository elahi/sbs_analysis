dat$area <- ifelse(dat$sp == "LIKE",
paste(dat$nest1), paste(dat$site))
unique(dat$area)
dat$sampleArea <- dat$site
library(ggplot2)
theme_set(theme_classic(base_size = 8))
library(dplyr)
rm(list=ls(all=TRUE))
# plotting functions
source("./R/multiplotF.R")
# Set WD
setwd("~/github/sbs_analysis")
# load modern data
dat <- read.csv("./output/sbsMaster.csv", na.strings = "NA")
summary(dat)
# change ft to meters
range(dat$tideHTm, na.rm = TRUE)
dat$tideHTm <- dat$tideHTm/3.28084
# create numeric lat-long columns
dat$lat2 <- as.numeric(substr(dat$lat, 1, 8))
dat$long2 <- as.numeric(paste("-", substr(dat$long, 1, 9), sep = ""))
unique(dat$lat2)
unique(dat$long2)
dat$LL <- with(dat, paste(lat2, long2, sep = ","))
unique(dat$LL)
###############################################################
# Mixed-model analysis of overall change in size
# Species is a fixed effect
# Era is a fixed effect
# Sampling area is a random effect
# Need to define 'sampling areas' for each species,
# that were sampled in historic and modern studies
# Littorina keenae = nest1 (zoneA, zoneB, zoneC, zoneD)
dat %>% filter(sp == "LIKE") %>% distinct(nest1)
# Lottia digitalis = site (areaA, areaB, areaC)
dat %>% filter(sp == "LODI") %>% distinct(site)
# Chlorostoma funebralis = site (Wara.B, Wara.D)
dat %>% filter(sp == "CHFU") %>% distinct(site)
head(dat)
dat$sampleArea <- ifelse(dat$sp == "LIKE",
paste(dat$nest1), paste(dat$site))
unique(dat$sampleArea)
head(dat)
dat$sampleArea <- as.factor(ifelse(dat$sp == "LIKE",
paste(dat$nest1), paste(dat$site)))
unique(dat$sampleArea)
head(dat)
glimpse(dat)
library(lme4)
mod1 <- lmer(size1mm ~ era * species + (1 | sampleArea),
data = dat)
summary(mod1)
anova(mod1)
library(nlme)
mod1 <- lme(size1mm ~ era * species,
random = ~1 | sampleArea,
data = dat)
mod1 <- lme(size1mm ~ era * species,
random = ~1 | sampleArea,
na.action = na.omit,
data = dat)
mod1
summary(mod1)$tTable
anova(mod1)
plot(mod1)
mod2 <- lmer(size1mm ~ era * species + (species | sampleArea),
data = dat)
mod2 <- lmer(size1mm ~ era * species + (era | sampleArea),
data = dat)
AIC(mod1, mod2)
mod1 <- lmer(size1mm ~ era * species + (1 | sampleArea),
data = dat)
mod2 <- lmer(size1mm ~ era * species + (era | sampleArea),
data = dat)
summary(mod1)
anova(mod1)
AIC(mod1, mod2)
summary(mod2)
mod1 <- lme(size1mm ~ era * species,
random = ~ era | sampleArea,
na.action = na.omit,
data = dat)
mod3 <- lme(size1mm ~ era * species,
random = ~ era | sampleArea,
na.action = na.omit,
data = dat)
summary(mod3)$tTable
lmeMod1 <- lme(size1mm ~ era * species,
random = ~ era | sampleArea,
na.action = na.omit,
data = dat)
summary(lmeMod1)$tTable
anova(lmeMod1)
round(summary(lmeMod1)$tTable, 3)
plot(lmeMod1)
library(AICcmodavg)
Cand.mod <- list()
Cand.mod <- list()
# final full model
Cand.mod[[1]] <- lmer(size1mm ~ era * species + (era | sampleArea),
data = dat)
Cand.mod[[2]] <- lmer(size1mm ~ era + species + (era | sampleArea),
data = dat)
Cand.mod[[3]] <- lmer(size1mm ~ era + (era | sampleArea),
data = dat)
Cand.mod[[4]] <- lmer(size1mm ~ species + (era | sampleArea),
data = dat)
Cand.mod[[5]] <- lmer(size1mm ~ 1 + (era | sampleArea),
data = dat)
Cand.mod[[1]] <- lmer(size1mm ~ era * species + (era | sampleArea),
data = dat, method = "ML")
Cand.mod[[1]] <- lmer(size1mm ~ era * species + (era | sampleArea),
data = dat, REML = "ML")
Cand.mod[[1]] <- lmer(size1mm ~ era * species + (era | sampleArea),
data = dat, REML = FALSE)
Cand.mod[[2]] <- lmer(size1mm ~ era + species + (era | sampleArea),
data = dat, REML = FALSE)
Cand.mod[[3]] <- lmer(size1mm ~ era + (era | sampleArea),
data = dat, REML = FALSE)
Cand.mod[[4]] <- lmer(size1mm ~ species + (era | sampleArea),
data = dat, REML = FALSE)
Cand.mod[[5]] <- lmer(size1mm ~ 1 + (era | sampleArea),
data = dat, REML = FALSE)
mod_numbers <- paste("Cand.mod", 1:length(Cand.mod), sep=" ")
mod_numbers <- paste("Cand.mod", 1:length(Cand.mod), sep=" ")
mod_text <- c("Era x Species", "Era + Species", "Era",
"Species", "Null model")
#generate AICc table with numbers
mod.aicctab <- aictab(cand.set= Cand.mod, modnames=mod_numbers, sort=TRUE,
second.ord=FALSE) # second.ord =TRUE means AICc is used (not AIC)
print(mod.aicctab, digits=2, LL=TRUE)
mod.aicctab <- aictab(cand.set= Cand.mod, modnames= mod_text, sort=TRUE,
second.ord=FALSE) # second.ord =TRUE means AICc is used (not AIC)
print(mod.aicctab, digits=2, LL=TRUE)
write.csv(aic_table, "./output/size_AIC.csv")
aic_table <- data.frame(cbind(data.frame(mod.aicctab)[1],
round(data.frame(mod.aicctab)[2:8], 3)))
write.csv(aic_table, "./output/size_AIC.csv")
###############################################################
ggplot(data = lmeDat, aes(era, size1mm, color = species)) +
geom_boxplot()
statDat <- dat
ggplot(data = statDat, aes(era, size1mm, color = species)) +
geom_boxplot()
summary(statDat)$size1mm
summary(statDat$size1mm)
ggplot(data = statDat, aes(species, size1mm, fill = era)) +
geom_boxplot()
ggplot(data = statDat, aes(species, size1mm, fill = era)) +
geom_boxplot(notch = TRUE) + geom_violin()
statDat$sp <- factor(statDat$sp, levels = c('LIKE', 'LODI', 'CHFU'),
ordered = TRUE)
ggplot(data = statDat, aes(species, size1mm, fill = era)) +
geom_violin(fill = "gray") +
geom_boxplot(width = 0.3, notch = TRUE, color = "black")
ggplot(data = statDat, aes(species, size1mm, fill = era)) +
geom_violin() +
geom_boxplot(width = 0.3, notch = TRUE, color = "black")
ggplot(data = statDat, aes(species, size1mm, fill = era)) +
geom_violin() +
geom_boxplot(width = 0.3, notch = TRUE, color = "black") +
ylab("Length (mm)") +
xlab("Species") +
# theme(legend.position = "none") +
scale_x_discrete("",
labels = c("CHFU" = expression(italic(Chlorostoma)),
"LODI" = expression(italic(Lottia)),
"LIKE" = expression(italic(Littorina))))
ggplot(data = statDat, aes(species, size1mm, fill = era)) +
geom_violin(position = position_dodge(1)) +
geom_boxplot(width = 0.3, notch = TRUE, color = "black") +
ylab("Length (mm)") +
xlab("Species")
ggplot(data = statDat, aes(species, size1mm, fill = era)) +
geom_violin(position = position_dodge(0)) +
geom_boxplot(width = 0.3, notch = TRUE, color = "black") +
ylab("Length (mm)") +
xlab("Species")
ggplot(data = statDat, aes(species, size1mm, fill = era)) +
geom_violin(position = position_dodge(1)) +
geom_boxplot(width = 0.3, notch = TRUE, color = "black",
position = position_dodge(1))
ggplot(data = statDat, aes(species, size1mm, fill = era)) +
geom_violin(position = position_dodge(0.5)) +
geom_boxplot(width = 0.3, notch = TRUE, color = "black",
position = position_dodge(0.5))
ggplot(data = statDat, aes(species, size1mm, fill = era)) +
geom_violin(position = position_dodge(0.75)) +
geom_boxplot(width = 0.3, notch = TRUE, color = "black",
position = position_dodge(0.75))
statDat$sp <- factor(statDat$sp, levels = c('LIKE', 'LODI', 'CHFU'),
ordered = TRUE)
ggplot(data = statDat, aes(sp, size1mm, fill = era)) +
geom_violin(position = position_dodge(0.75)) +
geom_boxplot(width = 0.3, notch = TRUE, color = "black",
position = position_dodge(0.75)) +
ylab("Length (mm)") +
xlab("Species") +
# theme(legend.position = "none") +
scale_x_discrete("",
labels = c("CHFU" = expression(italic(Chlorostoma)),
"LODI" = expression(italic(Lottia)),
"LIKE" = expression(italic(Littorina))))
ggplot(data = statDat, aes(sp, size1mm, fill = era)) +
geom_violin(position = position_dodge(0.75)) +
geom_boxplot(width = 0.3, notch = TRUE, color = "black",
position = position_dodge(0.75), fill = "white") +
ylab("Length (mm)") +
xlab("Species") +
# theme(legend.position = "none") +
scale_x_discrete("",
labels = c("CHFU" = expression(italic(Chlorostoma)),
"LODI" = expression(italic(Lottia)),
"LIKE" = expression(italic(Littorina))))
ggplot(data = statDat, aes(sp, size1mm, fill = era)) +
geom_violin(position = position_dodge(0.75)) +
geom_boxplot(width = 0.3, notch = TRUE, color = "black",
position = position_dodge(0.75)) +
scale_fill_manual(values = c("darkgray", "white"))
ggplot(data = statDat, aes(sp, size1mm, fill = era)) +
geom_violin(position = position_dodge(0.75)) +
geom_boxplot(width = 0.3, notch = TRUE, color = "black",
position = position_dodge(0.75)) +
scale_fill_manual(values = c("darkgray", "white"))
ylab("Length (mm)") +
xlab("Species") +
# theme(legend.position = "none") +
scale_x_discrete("",
labels = c("CHFU" = expression(italic(Chlorostoma)),
"LODI" = expression(italic(Lottia)),
"LIKE" = expression(italic(Littorina))))
ggplot(data = statDat, aes(sp, size1mm, fill = era)) +
geom_violin(position = position_dodge(0.75)) +
geom_boxplot(width = 0.3, notch = TRUE, color = "black",
position = position_dodge(0.75)) +
scale_fill_manual(values = c("darkgray", "white")) +
ylab("Length (mm)") +
xlab("Species") +
# theme(legend.position = "none") +
scale_x_discrete("",
labels = c("CHFU" = expression(italic(Chlorostoma)),
"LODI" = expression(italic(Lottia)),
"LIKE" = expression(italic(Littorina))))
ggplot(data = statDat, aes(sp, size1mm, fill = era)) +
geom_violin(position = position_dodge(0.75)) +
geom_boxplot(width = 0.3, notch = TRUE, color = "black",
position = position_dodge(0.75)) +
scale_fill_manual(values = c("darkgray", "white"),
breaks = c("historic", "modern")) +
ylab("Length (mm)") +
xlab("Species") +
# theme(legend.position = "none") +
scale_x_discrete("",
labels = c("CHFU" = expression(italic(Chlorostoma)),
"LODI" = expression(italic(Lottia)),
"LIKE" = expression(italic(Littorina))))
ggplot(data = statDat, aes(sp, size1mm, fill = era)) +
geom_violin(position = position_dodge(0.75)) +
geom_boxplot(width = 0.2, notch = TRUE, color = "black",
position = position_dodge(0.75)) +
scale_fill_manual(values = c("darkgray", "white")) +
ylab("Length (mm)") +
xlab("Species") +
# theme(legend.position = "none") +
scale_x_discrete("",
labels = c("CHFU" = expression(italic(Chlorostoma)),
"LODI" = expression(italic(Lottia)),
"LIKE" = expression(italic(Littorina))))
bestMod <- update(Cand.mod[[2]], REML = TRUE)
summary(bestMod)
print(mod.aicctab, digits=2, LL=TRUE)
lmeDat %>% group_by(species, era) %>%
summarise(meanSize = mean(size1mm, na.rm = TRUE),
sdSize = sd(size1mm, na.rm = TRUE),
medianSize = median(size1mm,  na.rm = TRUE))
statDat %>% group_by(species, era) %>%
summarise(meanSize = mean(size1mm, na.rm = TRUE),
sdSize = sd(size1mm, na.rm = TRUE),
medianSize = median(size1mm,  na.rm = TRUE))
summaryStats <- statDat %>% group_by(species, era) %>%
summarise(meanSize = mean(size1mm, na.rm = TRUE),
sdSize = sd(size1mm, na.rm = TRUE),
medianSize = median(size1mm,  na.rm = TRUE))
write.csv(summaryStats, "./output/size_summaryStats.csv")
summaryStats %>% group_by(species) %>%
mutate(perChange = meanSize[, 1])
summaryStats %>% group_by(species) %>%
mutate(perChange = meanSize[1,1])
summaryStats
summaryStats <- statDat %>% group_by(species, sp, era) %>%
summarise(meanSize = mean(size1mm, na.rm = TRUE),
sdSize = sd(size1mm, na.rm = TRUE),
medianSize = median(size1mm,  na.rm = TRUE))
write.csv(summaryStats, "./output/size_summaryStats.csv")
# Calculate percent change for each species
summaryStats
chfuPerChange <- summaryStats %>%
filter(sp == CHFU)
chfuPerChange <- summaryStats %>%
filter(sp == "CHFU")
library(tidyr)
summaryStats
?spread
spread(summaryStats, era, c(meanSize, sdSize, medianSize) )
spread(summaryStats, era, meanSize)
spread(summaryStats, era, meanSize, drop = TRUE)
spread(summaryStats, era, meanSize)
chfuPerChange <- summaryStats %>% select(species, sp, meanSize) %>%
filter(sp == "CHFU") %>%
summaryStats %>% select(species, sp, meanSize) %>%
filter(sp == "CHFU")
summaryStats %>%
select(species, sp, era, meanSize) %>%
filter(sp == "CHFU")
chfuPerChange <- summaryStats %>%
select(species, sp, era, meanSize) %>%
filter(sp == "CHFU") %>% spread(key = era, value = meanSize)
summaryStats %>%
select(species, sp, era, meanSize) %>%
filter(sp == "CHFU") %>% spread(key = era, value = meanSize)
summaryStats %>%
select(species, sp, era, meanSize) %>%
#filter(sp == "CHFU") %>%
spread(key = era, value = meanSize)
perChange_mean <- summaryStats %>%
select(species, sp, era, meanSize) %>%
#filter(sp == "CHFU") %>%
spread(key = era, value = meanSize) %>%
mutate(perChange = (past - present)/present)
perChange_mean
perChange_mean <- summaryStats %>%
select(species, sp, era, meanSize) %>%
#filter(sp == "CHFU") %>%
spread(key = era, value = meanSize) %>%
mutate(perChange = (present - past)/past)
perChange_mean
perChange_mean <- summaryStats %>%
select(species, sp, era, meanSize) %>%
#filter(sp == "CHFU") %>%
spread(key = era, value = meanSize) %>%
mutate(perChange = (present - past)/past *100)
perChange_mean
round(perChange_mean)
perChange_median <- summaryStats %>%
select(species, sp, era, medianSize) %>%
spread(key = era, value = medianSize) %>%
mutate(perChange = (present - past)/past *100)
perChange_median
#################################################
# Author: Robin Elahi
# Date: 151102
# Temporal shifts in gastropod size-frequency distributions are
# consistent with climate warming
# Plotting summarized temperature data
#################################################
# Set working directory to main project folder
setwd("~/github/sbs_analysis")
getwd()
# Load packages
library(ggplot2)
theme_set(theme_classic(base_size = 8))
library(plyr)
library(dplyr)
source("./R/multiplotF.R")
###########################
# Load daily iButton data from output folder
dat <- read.csv("./output/temp_daily_iButton.csv", header = TRUE)
head(dat)
dat$day <- as.Date(dat$day)
# Mean temperatures
ggplot(dat, aes(day, mean_tempC, color = iButtonID)) +
geom_line(size = 1, alpha = 0.8) +
ylab("Temperature (C)") + xlab("Date") +
facet_wrap(~ position) + theme(legend.position = "none")
# Max temperatures
ggplot(dat, aes(day, max_tempC, color = iButtonID)) +
geom_line(size = 1, alpha = 0.8) +
ylab("Temperature (C)") + xlab("Date") +
facet_wrap(~ position) + theme(legend.position = "none")
# Min temperatures
ggplot(dat, aes(day, min_tempC, color = iButtonID)) +
geom_line(size = 1, alpha = 0.8) +
ylab("Temperature (C)") + xlab("Date") +
facet_wrap(~ position) + theme(legend.position = "none")
###########################
# Now plot summarized data for each logger position
# (summarizes across two iButtons per position)
# Except for: WaraD_mid2; WaraD_hi; WaraD_low
# (these only had one logger per position)
dat <- read.csv("./output/temp_daily_position.csv", header = TRUE)
head(dat)
dat$day <- as.Date(dat$day)
# Mean temperatures
ggplot(dat, aes(day, mean_tempC, color = position)) +
geom_line(size = 1, alpha = 0.8) +
ylab("Temperature (C)") + xlab("Date") +
facet_wrap(~ position) + theme(legend.position = "none")
# Max temperatures
ggplot(dat, aes(day, max_tempC, color = position)) +
geom_line(size = 1, alpha = 0.8) +
ylab("Temperature (C)") + xlab("Date") +
facet_wrap(~ position) + theme(legend.position = "none")
# Min temperatures
ggplot(dat, aes(day, min_tempC, color = position)) +
geom_line(size = 1, alpha = 0.8) +
ylab("Temperature (C)") + xlab("Date") +
facet_wrap(~ position) + theme(legend.position = "none")
# Mean temperatures
names(dat)
ggplot(dat, aes(day, mean_tempC, color = position)) +
geom_line(size = 1, alpha = 0.8) +
ylab("Temperature (C)") + xlab("Date") +
facet_wrap(~ code) + theme(legend.position = "none")
###########################
# Now plot summarized data for each species
dat <- read.csv("./output/temp_daily_species.csv", header = TRUE)
head(dat)
dat$day <- as.Date(dat$day)
# Mean temperatures
ggplot(dat, aes(day, mean_tempC)) +
geom_line() +
ylab("Temperature (C)") + xlab("Date") +
facet_wrap(~ code) + theme(legend.position = "none")
# Max temperatures
ggplot(dat, aes(day, max_tempC)) +
geom_line() +
ylab("Temperature (C)") + xlab("Date") +
facet_wrap(~ code) + theme(legend.position = "none")
# Min temperatures
ggplot(dat, aes(day, min_tempC)) +
geom_line() +
ylab("Temperature (C)") + xlab("Date") +
facet_wrap(~ code) + theme(legend.position = "none")
# Relevel the species codes
dat$code <- factor(dat$code, levels = rev(c('LIKE', 'LODI', 'CHFU')),
ordered = TRUE)
# Figure out how many daily records per species,
# and mean tidal height
dat %>% group_by(code) %>% summarise(totalN = n(),
meanHT = mean(tidalHT, na.rm = TRUE),
sdHT = sd(tidalHT, na.rm = TRUE))
# Get mean tidal heights for each of nested samples
dat %>% group_by(code, nest2) %>%
summarise(totalN = n(),
meanHT = mean(tidalHT, na.rm = TRUE),
sdHT = sd(tidalHT, na.rm = TRUE))
### Violin plot
ggplot(dat, aes(code, mean_tempC)) +
geom_violin(fill = "gray") +
geom_boxplot(width = 0.3, notch = TRUE, color = "black") +
ylab("Temperature (C)") + xlab("Species") +
theme(legend.position = "none") +
scale_x_discrete("", labels = c("CHFU" = "Chlorostoma funebralis\nn=344",
"LODI" = "Lottia digitalis\nn=258",
"LIKE" = "Littorina keenae\nn=344")) +
coord_flip()
ggsave("./figs/temp_violin_spp.pdf", width = 3.5, height = 3.5)
### 3 panel plot
# Relevel the species codes
dat$code <- factor(dat$code, levels = c('LIKE', 'LODI', 'CHFU'),
ordered = TRUE)
ULClabel <- theme(plot.title = element_text(hjust = -0.05, vjust = 1,
size = rel(1.2)))
p1 <- ggplot(dat, aes(code, mean_tempC)) +
geom_violin(fill = "gray") +
geom_boxplot(width = 0.3, notch = TRUE, color = "black") +
ylab(expression(paste("Daily mean temperature (", degree, "C)"))) +
xlab("Species") +
theme(legend.position = "none") +
scale_x_discrete("",
labels = c("CHFU" = expression(italic(Chlorostoma)),
"LODI" = expression(italic(Lottia)),
"LIKE" = expression(italic(Littorina)))) +
ULClabel + labs(title = "A")
p2 <- ggplot(dat, aes(code, max_tempC)) +
geom_violin(fill = "gray") +
geom_boxplot(width = 0.3, notch = TRUE, color = "black") +
ylab(expression(paste("Daily maximum temperature (", degree, "C)"))) +
xlab("Species") +
theme(legend.position = "none") +
scale_x_discrete("",
labels = c("CHFU" = expression(italic(Chlorostoma)),
"LODI" = expression(italic(Lottia)),
"LIKE" = expression(italic(Littorina)))) +
ULClabel + labs(title = "B")
p3 <- ggplot(dat, aes(code, min_tempC)) +
geom_violin(fill = "gray") +
geom_boxplot(width = 0.3, notch = TRUE, color = "black") +
ylab(expression(paste("Daily minimum temperature (", degree, "C)"))) +
xlab("Species") +
theme(legend.position = "none") +
scale_x_discrete("",
labels = c("CHFU" = expression(italic(Chlorostoma)),
"LODI" = expression(italic(Lottia)),
"LIKE" = expression(italic(Littorina)))) +
ULClabel + labs(title = "C")
# save as pdf
pdf("./figs/temp_spp_3panel.pdf", width = 3.5, height = 7)
multiplot(p1, p2, p3, cols = 1)
dev.off()
summary(bestMod)
perChange_mean <- summaryStats %>%
select(species, sp, era, meanSize) %>%
spread(key = era, value = meanSize) %>%
mutate(perChange = (present - past)/past *100)
perChange_median <- summaryStats %>%
select(species, sp, era, medianSize) %>%
spread(key = era, value = medianSize) %>%
mutate(perChange = (present - past)/past *100)
perChange_median
perChange_mean
summaryStats
