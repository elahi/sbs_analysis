# Check Bayesian pvals
pvals <- c(p.mean = mean(zj$p.mean), p.sd = mean(zj$p.sd))
# Save coda summary
coda_summary <- summary(zm)
summary_name <- paste("quantile", my_p, sep = "_")
coda_quantile <- data.frame(coda_summary$quantile) %>%
mutate(coda_quantile = summary_name,
param = rownames(coda_summary$quantile))
# Create list of all desired objects
coda_list.i <- list(coda_quantile, gd, pvals)
coda_list[[i]] <- coda_list.i
coda_list
hist(log(dat$size1mm), breaks = 20, freq=FALSE)
lines(density(zj$y.new), col="red")
lines(density(zj$y.new), col="red")
hist(log(dat$size1mm), breaks = 20, freq=FALSE, ylim = c(0,2))
lines(density(zj$y.new), col="red")
jm
zm
zm = coda.samples(jm, variable.names = c("alpha", "beta", "sigma", "p.mean"),
n.iter = n.iter, n.thin = 1)
summary(zm)
pvals
summary(zm)
zm[[1]]
zm[[1]]
zm[1]
head(zm[1])
head(zm[2])
unlist(zm)
zm[[1, 4]]
zm[1][[1]]
zm[1][[,1]]
zm[[, 1]]
zm[1][[, 1]]
?coda.samples
?jags.samples
zj
zj$alpha
summary(zj$alpha)
summary(zj$alpha)$stat
summary(zj$alpha, FUN = quantile())$stat
summary(zj$alpha, FUN = quantile(c(0.05, 0.5, 0.975)))$stat
psi <- summary(zj$alpha, quantile, c(0.025, 0.5, 0.975))$stat
psi
zm
summary(zm)
psi
alpha_quantiles <- summary(zj$alpha, quantile, c(0.025, 0.5, 0.975))$stat
alpha_quantiles <- summary(zj$alpha, quantile, c(0.025, 0.5, 0.975))$stat
beta_quantiles <- summary(zj$beta, quantile, c(0.025, 0.5, 0.975))$stat
sigma_quantiles <- summary(zj$sigma, quantile, c(0.025, 0.5, 0.975))$stat
alpha_quantiles
beta_quantiles
zj_quantiles <- data.frame(alpha = alpha_quantiles)
zj_quantiles
zj_quantiles <- data.frame(alpha = alpha_quantiles,
beta = beta_quantiles,
sigma = sigma_quantiles)
zj_quantiles
zj_quantiles <- data.frame(alpha = alpha_quantiles,
beta = beta_quantiles,
sigma = sigma_quantiles) %>%
mutate(q = rownames())
zj_quantiles <- data.frame(alpha = alpha_quantiles,
beta = beta_quantiles,
sigma = sigma_quantiles) %>%
mutate(q = rownames(alpha))
zj_quantiles$quant <- rownames(zj_quantiles)
zj_quantiles
coda_list
hist(log(dat$size1mm), breaks = 20, freq=FALSE, ylim = c(0,2))
lines(density(zj$y.new), col="red")
rnorm(100, 0, 1)
rnorm(100, 0, 0.75)
rnorm(100, 0, 0.5)
rnorm(0, 0.25)
rnorm(100, 0, 0.25)
crap <- rnorm(1000, 0, 0.25)
summary(crap)
crap <- rnorm(1000, 0, 0.5)
summary(crap)
crap <- rnorm(1000, 0, 0.75)
summary(crap)
crap <- rnorm(1000, 0, 1)
summary(crap)
quantile(crap)
quantile(crap, probs = seq(0,1,0.1))
crap <- rnorm(1000, 0, 0.9)
quantile(crap, probs = seq(0,1,0.1))
crap <- rnorm(1000, 0, 0.75)
quantile(crap, probs = seq(0,1,0.1))
coda_list
coda_list[[1]]
coda_list[[1, 1]]
coda_list[1]
coda_list[1][1]
coda_list[[1]][[1]]
coda_list[[1:3]][[1]]
coda_df <- coda_list[[1]][[1]]
for(i in 2:length(p_vector)){
coda_df <- rbind(coda_df, coda_list[[i]][[1]])
}
coda_df
coda_df %>%
filter(param == "beta") %>%
ggplot(aes(coda_quantile, X50.)) +
geom_point() +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5))
coda_df %>%
filter(param == "beta") %>%
ggplot(aes(coda_quantile, X50.)) +
geom_point() +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.))
coda_df %>%
filter(param == "beta") %>%
ggplot(aes(coda_quantile, X50.)) +
geom_point() +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
coda_df %>%
filter(param == "beta") %>%
ggplot(aes(coda_quantile, X50.)) +
geom_point() +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)")
coda_df %>%
filter(param == "beta") %>%
ggplot(aes(coda_quantile, X50.)) +
geom_point() +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("")
ggsave("sbs_bayes/bayes_figs/coda_df_quantiles.png", height = 3.5, width = 3.5)
coda_list
coda_df
crap <- coda_df$coda_quantile
strsplit(crap, split = "_")
strsplit(crap, split = "_")[1]
strsplit(crap, split = "_")[[2]]
crap <- coda_df$coda_quantile
cc       <- strsplit(crap, split = "_")
part1    <- unlist(cc)[2*(1:length(names.reads))-1]
part2    <- unlist(cc)[2*(1:length(names.reads))  ]
part1    <- unlist(cc)[2*(1:length(crap))-1]
part2    <- unlist(cc)[2*(1:length(crap))  ]
part2
coda_df <- coda_df %>% mutate(quant = part2)
coda_df %>%
filter(param == "beta") %>%
ggplot(aes(quant, X50.)) +
geom_point() +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Quantile")
ggsave("sbs_bayes/bayes_figs/coda_df_quantiles.png", height = 3.5, width = 3.5)
write.csv(coda_df, "sbs_bayes/bayes_output/coda_quantile_df.csv")
spin()
library(knitr)
spin()
?spin
spin(hair = "sbs_bayes/size_simulations_p.R")
model_string <- cat("
model{
# priors
alpha ~ dnorm(0, 1/5^2)
beta ~ dnorm(0, 1/10^2)
sigma ~ dunif(0, 100)
tau <- 1/sigma^2
# likelihood
for (i in 1:k){
mu[i] <- alpha + beta * era[i]
w[i]  ~ dexp(tau) # exponential distribution
me[i] <- (1 - 2 * p) / (p * (1 - p)) * w[i] + mu[i] # if p = 0.5, then this just leaves mu[i]
pe[i] <- (p * (1 - p) * tau) / (2 * w[i]) #
#y[i]  ~ dnorm(me[i], pe[i])
y[i] ~ dnorm(me[i], pe[i])
y.new[i] ~ dnorm(me[i], pe[i])
sq.error.data[i] <- (y[i] - mu[i])^2
sq.error.new[i] <- (y.new[i] - mu[i])^2
}
# bayesian p-values
sd.data <- sd(y)
sd.new <- sd(y.new)
p.sd <- step(sd.new - sd.data)
mean.data <- mean(y)
mean.new  <- mean(y.new)
p.mean <- step(mean.new - mean.data)
}
", fill = TRUE)
model_string <- cat("
model{
# priors
alpha ~ dnorm(0, 1/5^2)
beta ~ dnorm(0, 1/10^2)
sigma ~ dunif(0, 100)
tau <- 1/sigma^2
# likelihood
for (i in 1:k){
mu[i] <- alpha + beta * era[i]
w[i]  ~ dexp(tau) # exponential distribution
me[i] <- (1 - 2 * p) / (p * (1 - p)) * w[i] + mu[i] # if p = 0.5, then this just leaves mu[i]
pe[i] <- (p * (1 - p) * tau) / (2 * w[i]) #
#y[i]  ~ dnorm(me[i], pe[i])
y[i] ~ dnorm(me[i], pe[i])
y.new[i] ~ dnorm(me[i], pe[i])
sq.error.data[i] <- (y[i] - mu[i])^2
sq.error.new[i] <- (y.new[i] - mu[i])^2
}
# bayesian p-values
sd.data <- sd(y)
sd.new <- sd(y.new)
p.sd <- step(sd.new - sd.data)
mean.data <- mean(y)
mean.new  <- mean(y.new)
p.mean <- step(mean.new - mean.data)
}
", fill = TRUE)
model_jags <-textConnection(model_string)
model_string <- cat("
model{
# priors
alpha ~ dnorm(0, 1/5^2)
beta ~ dnorm(0, 1/10^2)
sigma ~ dunif(0, 100)
tau <- 1/sigma^2
# likelihood
for (i in 1:k){
mu[i] <- alpha + beta * era[i]
w[i]  ~ dexp(tau) # exponential distribution
me[i] <- (1 - 2 * p) / (p * (1 - p)) * w[i] + mu[i] # if p = 0.5, then this just leaves mu[i]
pe[i] <- (p * (1 - p) * tau) / (2 * w[i]) #
#y[i]  ~ dnorm(me[i], pe[i])
y[i] ~ dnorm(me[i], pe[i])
y.new[i] ~ dnorm(me[i], pe[i])
sq.error.data[i] <- (y[i] - mu[i])^2
sq.error.new[i] <- (y.new[i] - mu[i])^2
}
# bayesian p-values
sd.data <- sd(y)
sd.new <- sd(y.new)
p.sd <- step(sd.new - sd.data)
mean.data <- mean(y)
mean.new  <- mean(y.new)
p.mean <- step(mean.new - mean.data)
}
")
model_jags <-textConnection(model_string)
model_string <- "
model{
# priors
alpha ~ dnorm(0, 1/5^2)
model_string <- "
model{
# priors
alpha ~ dnorm(0, 1/5^2)
beta ~ dnorm(0, 1/10^2)
sigma ~ dunif(0, 100)
tau <- 1/sigma^2
# likelihood
for (i in 1:k){
mu[i] <- alpha + beta * era[i]
w[i]  ~ dexp(tau) # exponential distribution
me[i] <- (1 - 2 * p) / (p * (1 - p)) * w[i] + mu[i] # if p = 0.5, then this just leaves mu[i]
pe[i] <- (p * (1 - p) * tau) / (2 * w[i]) #
#y[i]  ~ dnorm(me[i], pe[i])
y[i] ~ dnorm(me[i], pe[i])
y.new[i] ~ dnorm(me[i], pe[i])
sq.error.data[i] <- (y[i] - mu[i])^2
sq.error.new[i] <- (y.new[i] - mu[i])^2
}
# bayesian p-values
sd.data <- sd(y)
sd.new <- sd(y.new)
p.sd <- step(sd.new - sd.data)
mean.data <- mean(y)
mean.new  <- mean(y.new)
p.mean <- step(mean.new - mean.data)
}
"
model_jags <-textConnection(model_string)
n.adapt = 1000
n.update = 1000
n.iter = 1000
my_p = 0.5
p_vector = c(0.1, 0.25, 0.5, 0.75, 0.9)
coda_list <- list()
coda_df
coda_list
model_jags <- textConnection(model_string)
model_jags
model_string <- "
model{
# priors
alpha ~ dnorm(0, 1/5^2)
beta ~ dnorm(0, 1/10^2)
sigma ~ dunif(0, 100)
tau <- 1/sigma^2
# likelihood
for (i in 1:k){
mu[i] <- alpha + beta * era[i]
w[i]  ~ dexp(tau) # exponential distribution
me[i] <- (1 - 2 * p) / (p * (1 - p)) * w[i] + mu[i] # if p = 0.5, then this just leaves mu[i]
pe[i] <- (p * (1 - p) * tau) / (2 * w[i]) #
#y[i]  ~ dnorm(me[i], pe[i])
y[i] ~ dnorm(me[i], pe[i])
y.new[i] ~ dnorm(me[i], pe[i])
sq.error.data[i] <- (y[i] - mu[i])^2
sq.error.new[i] <- (y.new[i] - mu[i])^2
}
# bayesian p-values
sd.data <- sd(y)
sd.new <- sd(y.new)
p.sd <- step(sd.new - sd.data)
mean.data <- mean(y)
mean.new  <- mean(y.new)
p.mean <- step(mean.new - mean.data)
}
"
model_jags <- textConnection(model_string)
my_p = 0.5
p_vector = c(0.1, 0.25, 0.5, 0.75, 0.9)
my_p = p_vector[i]
data = list(
y = as.double(log(dat$size1mm)),
era = as.double(dat$eraJ),
k = as.double(length(dat$size1mm)),
p = as.double(my_p)
)
jm = jags.model(model_jags, data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("alpha", "beta", "sigma", "p.mean"),
n.iter = n.iter, n.thin = 1)
zj = jags.samples(jm, variable.names = c("alpha", "beta", "sigma", "y.new", "p.mean", "p.sd"),
n.iter = n.iter, n.thin = 1)
gd <- gelman.diag(zm, multivariate = F)[[1]]
pvals <- c(p.mean = mean(zj$p.mean), p.sd = mean(zj$p.sd))
pvals
i
hist(log(dat$size1mm), breaks = 20, freq=FALSE, ylim = c(0,2))
lines(density(zj$y.new), col="red")
model_string <- "
model{
# priors
alpha ~ dnorm(0, 1/5^2)
beta ~ dnorm(0, 1/10^2)
sigma ~ dunif(0, 100)
tau <- 1/sigma^2
# likelihood
for (i in 1:k){
mu[i] <- alpha + beta * era[i]
w[i]  ~ dexp(tau) # exponential distribution
me[i] <- (1 - 2 * p) / (p * (1 - p)) * w[i] + mu[i] # if p = 0.5, then this just leaves mu[i]
pe[i] <- (p * (1 - p) * tau) / (2 * w[i]) #
#y[i]  ~ dnorm(me[i], pe[i])
y[i] ~ dnorm(me[i], pe[i])
y.new[i] ~ dnorm(me[i], pe[i])
sq.error.data[i] <- (y[i] - mu[i])^2
sq.error.new[i] <- (y.new[i] - mu[i])^2
}
# bayesian p-values
sd.data <- sd(y)
sd.new <- sd(y.new)
p.sd <- step(sd.new - sd.data)
mean.data <- mean(y)
mean.new  <- mean(y.new)
p.mean <- step(mean.new - mean.data)
}
"
model_jags <- textConnection(model_string)
jm = jags.model(model_jags, data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("alpha", "beta", "sigma", "p.mean"),
n.iter = n.iter, n.thin = 1)
zj = jags.samples(jm, variable.names = c("alpha", "beta", "sigma", "y.new", "p.mean", "p.sd"),
n.iter = n.iter, n.thin = 1)
model_jags
## JAGS model
model_string <- "
model{
# priors
alpha ~ dnorm(0, 1/5^2)
beta ~ dnorm(0, 1/10^2)
sigma ~ dunif(0, 100)
tau <- 1/sigma^2
# likelihood
for (i in 1:k){
mu[i] <- alpha + beta * era[i]
w[i]  ~ dexp(tau) # exponential distribution
me[i] <- (1 - 2 * p) / (p * (1 - p)) * w[i] + mu[i] # if p = 0.5, then this just leaves mu[i]
pe[i] <- (p * (1 - p) * tau) / (2 * w[i]) #
#y[i]  ~ dnorm(me[i], pe[i])
y[i] ~ dnorm(me[i], pe[i])
y.new[i] ~ dnorm(me[i], pe[i])
sq.error.data[i] <- (y[i] - mu[i])^2
sq.error.new[i] <- (y.new[i] - mu[i])^2
}
# bayesian p-values
sd.data <- sd(y)
sd.new <- sd(y.new)
p.sd <- step(sd.new - sd.data)
mean.data <- mean(y)
mean.new  <- mean(y.new)
p.mean <- step(mean.new - mean.data)
}
"
model_jags <- textConnection(model_string)
?textConnection
close(model_jags)
model_jags
set.seed(666)
N     <- 500
x     <- runif(N, max=10)
alpha <- 1
beta  <- 2
y     <- alpha + beta * x + rnorm(N, sd = .6 * x)
p     <- 0.95
data_set   <- list(y = y, x = x, p = p)
data_frame <- as.data.frame(data_set)[-3]
jags_code <- "
model{
for(i in 1:length(y)){
mu[i] <- alpha + beta * x[i]
w[i]  ~ dexp(tau)
me[i] <- (1 - 2 * p) / (p * (1 - p)) * w[i] + mu[i]
pe[i] <- (p * (1 - p) * tau) / (2 * w[i])
y[i]  ~ dnorm(me[i], pe[i])
}
# Regression Priors
alpha ~ dnorm(0, 1E-6)
beta  ~ dnorm(0, 1E-6)
lsigma ~ dunif(-5, 15)
sigma  <- exp(lsigma / 2)
tau    <- pow(sigma, -2)
}
"
n_iter <- 1000
jags_model <- jags.model(file = textConnection(jags_code), data = data_set,
n.chains = 4, n.adapt = n_iter / 2)
params <- c("alpha", "beta", "sigma")
jags_samples <- coda.samples(jags_model, params, n.iter = n_iter)
t(apply(
data.frame(do.call(rbind, jags_samples)), 2, function(x)
c(mean = mean(x), quantile(x, c(0.005, 0.25, 0.5, 0.75, 0.95)))
))
x
jags_code <- "
model{
for(i in 1:length(y)){
mu[i] <- alpha + beta * x[i]
w[i]  ~ dexp(tau)
me[i] <- (1 - 2 * p) / (p * (1 - p)) * w[i] + mu[i]
pe[i] <- (p * (1 - p) * tau) / (2 * w[i])
y[i]  ~ dnorm(me[i], pe[i])
y.new[i] ~ dnorm(me[i], pe[i])
}
# Regression Priors
alpha ~ dnorm(0, 1E-6)
beta  ~ dnorm(0, 1E-6)
lsigma ~ dunif(-5, 15)
sigma  <- exp(lsigma / 2)
tau    <- pow(sigma, -2)
# bayesian p-values
sd.data <- sd(y)
sd.new <- sd(y.new)
p.sd <- step(sd.new - sd.data)
mean.data <- mean(y)
mean.new  <- mean(y.new)
p.mean <- step(mean.new - mean.data)
}
"
n_iter <- 1000
jags_model <- jags.model(file = textConnection(jags_code), data = data_set,
n.chains = 4, n.adapt = n_iter / 2)
params <- c("alpha", "beta", "sigma", "y.new", "p.sd", "p.mean")
jags_samples <- coda.samples(jags_model, params, n.iter = n_iter)
t(apply(
data.frame(do.call(rbind, jags_samples)), 2, function(x)
c(mean = mean(x), quantile(x, c(0.005, 0.25, 0.5, 0.75, 0.95)))
))
hist(y, breaks = 20, freq=FALSE)
zj <- coda.samples(jags_model, params, n.iter = n_iter)
hist(y, breaks = 20, freq=FALSE)
lines(density(zj$y.new), col="red")
t(apply(
data.frame(do.call(rbind, zj)), 2, function(x)
c(mean = mean(x), quantile(x, c(0.005, 0.25, 0.5, 0.75, 0.95)))
))
lines(density(zj$y.new), col="red")
summary(y)
c(p.mean = mean(zj$p.mean), p.sd = mean(zj$p.sd))
plot(x, y)
hist(y, breaks = 20, freq=FALSE)
lines(density(zj$y.new), col="red")
plot(x, zj$y.new)
zj$y.new
zj$y.new
zj
zj$y.new
zj[1]
zj[1]
zj[2]
zj[5]
zj[4]
zj[4]$y.new
c(p.mean = mean(zj$p.mean), p.sd = mean(zj$p.sd))
zj$p.mean
