list(
beta = as.vector(runif(n_betas, -1, 1)),
sigma = 1
)
)
sink("sbs_bayes/models/pooledJAGS.R")
cat("
model{
# priors
for (i in 1:n_betas){
beta[i] ~ dnorm(0, .00001)
}
sigma ~ dunif(0, 50)
tau <- 1/sigma^2
# likelihood
mu_mat <- X %*% beta
for (i in 1:k){
mu[i] <- exp(mu_mat[i])
y[i] ~ dlnorm(log(mu[i]), tau)
}
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/pooledJAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("beta", "sigma"),
n.iter = n.iter, n.thin = 1)
summary(zm)
traceplot(zm)
densplot(zm)
plot(zm)
par(mfrow = c(1,1))
plot(zm)
summary(zm)
gelman.diag(zm, multivariate = F)
hist(data$y, breaks = 30, freq=FALSE) #note that this is the log transformed data
lines(density(zj$y.sim), col="red")
inits = list(
list(
beta1 = as.vector(runif(1, -1, 1)),
beta2 = as.vector(runif(1, -1, 1)),
sigma = 1
),
list(
beta1 = as.vector(runif(1, -1, 1)),
beta2 = as.vector(runif(1, -1, 1)),     sigma = 1
)
)
data = list(
y = as.double(dat$size1mm),
X = X,
k = as.double(length(dat$size1mm)),
group = as.double(dat$group_j),
n_betas = as.double(n_betas),
thc = as.double(dat$thc),
era = as.double(dat$eraJ)
)
n_betas = ncol(X)
beta = as.vector(runif(n_betas, -1, 1))
beta
n.adapt = 1000
n.update = 1000
n.iter = 1000
inits = list(
list(
beta1 = as.vector(runif(1, -1, 1)),
beta2 = as.vector(runif(1, -1, 1)),
sigma = 1
),
list(
beta1 = as.vector(runif(1, -1, 1)),
beta2 = as.vector(runif(1, -1, 1)),     sigma = 1
)
)
sink("sbs_bayes/models/pooledJAGS.R")
cat("
model{
# priors
beta1 ~ dnorm(0, .00001),
beta2 ~ dnorm(0, .00001),
sigma ~ dunif(0, 10)
tau <- 1/sigma^2
# likelihood
for (i in 1:k){
mu[i] <- exp(beta1 + beta2 * era[i])
y[i] ~ dlnorm(log(mu[i]), tau)
}
}
", fill = TRUE)
sink()
summary(zm)
jm = jags.model("sbs_bayes/models/pooledJAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
sink("sbs_bayes/models/pooledJAGS.R")
cat("
model{
# priors
beta1 ~ dnorm(0, .00001)
beta2 ~ dnorm(0, .00001)
sigma ~ dunif(0, 10)
tau <- 1/sigma^2
# likelihood
for (i in 1:k){
mu[i] <- exp(beta1 + beta2 * era[i])
y[i] ~ dlnorm(log(mu[i]), tau)
}
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/pooledJAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("beta", "sigma"),
n.iter = n.iter, n.thin = 1)
zm = coda.samples(jm, variable.names = c("beta1", "beta2", "sigma"),
n.iter = n.iter, n.thin = 1)
plot(zm)
summary(zm)
gelman.diag(zm, multivariate = F)
hist(data$y, breaks = 30, freq=FALSE) #note that this is the log transformed data
lines(density(zj$y.sim), col="red")
X <- model.matrix(~ eraJ, dat)
n_betas = ncol(X)
beta = as.vector(runif(n_betas, -1, 1))
beta
data = list(
y = as.double(dat$size1mm),
X = X,
k = as.double(length(dat$size1mm)),
group = as.double(dat$group_j),
n_betas = as.double(n_betas),
thc = as.double(dat$thc),
era = as.double(dat$eraJ)
)
n_betas = ncol(X)
beta = as.vector(runif(n_betas, -1, 1))
beta
n.adapt = 1000
n.update = 1000
n.iter = 1000
inits = list(
list(
beta1 = as.vector(runif(1, -1, 1)),
beta2 = as.vector(runif(1, -1, 1)),
sigma = 1
),
list(
beta1 = as.vector(runif(1, -1, 1)),
beta2 = as.vector(runif(1, -1, 1)),     sigma = 1
)
)
inits = list(
list(
beta = as.vector(runif(n_betas, -1, 1)),
sigma = 1
)
)
sink("sbs_bayes/models/pooledJAGS.R")
cat("
model{
# priors
beta1 ~ dnorm(0, .00001)
beta2 ~ dnorm(0, .00001)
sigma ~ dunif(0, 10)
tau <- 1/sigma^2
# likelihood
mu_mat <- X %*% beta
for (i in 1:k){
mu[i] <- exp(mu_mat[i]),
y[i] ~ dlnorm(log(mu[i]), tau)
}
}
", fill = TRUE)
sink()
head(dat)
X <- model.matrix(~ eraJ, dat)
n_betas = ncol(X)
beta = as.vector(runif(n_betas, -1, 1))
beta
data = list(
y = as.double(dat$size1mm),
X = X,
k = as.double(length(dat$size1mm)),
group = as.double(dat$group_j),
n_betas = as.double(n_betas),
thc = as.double(dat$thc),
era = as.double(dat$eraJ)
)
n_betas = ncol(X)
beta = as.vector(runif(n_betas, -1, 1))
beta
n.adapt = 1000
n.update = 1000
n.iter = 1000
inits = list(
list(
beta = as.vector(runif(n_betas, -1, 1)),
sigma = 1
)
)
sink("sbs_bayes/models/pooledJAGS.R")
cat("
model{
# priors
for (i in 1:n_betas){
beta[i] ~ dnorm(0, .00001)
}
sigma ~ dunif(0, 10)
tau <- 1/sigma^2
# likelihood
mu_mat <- X %*% beta # can't exponentiate a vector
for (i in 1:k){
mu[i] <- exp(mu_mat[i]),
y[i] ~ dlnorm(log(mu[i]), tau)
}
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/pooledJAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
sink("sbs_bayes/models/pooledJAGS.R")
cat("
model{
# priors
for (i in 1:n_betas){
beta[i] ~ dnorm(0, .00001)
}
sigma ~ dunif(0, 10)
tau <- 1/sigma^2
# likelihood
mu_mat <- X %*% beta # can't exponentiate a vector
for (i in 1:k){
mu[i] <- exp(mu_mat[i])
y[i] ~ dlnorm(log(mu[i]), tau)
}
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/pooledJAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("beta", "sigma"),
n.iter = n.iter, n.thin = 1)
plot(zm)
summary(zm)
gelman.diag(zm, multivariate = F)
n_betas
inits = list(
list(
beta = as.vector(runif(n_betas, -1, 1)),
sigma = 1
),
list(
beta = as.vector(runif(n_betas, -1, 1)),
sigma = 1
)
)
sink("sbs_bayes/models/pooledJAGS.R")
cat("
model{
# priors
for (i in 1:n_betas){
beta[i] ~ dnorm(0, .00001)
}
sigma ~ dunif(0, 10)
tau <- 1/sigma^2
# likelihood
mu_mat <- X %*% beta # can't exponentiate a vector
for (i in 1:k){
mu[i] <- exp(mu_mat[i])
y[i] ~ dlnorm(log(mu[i]), tau)
}
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/pooledJAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("beta", "sigma"),
n.iter = n.iter, n.thin = 1)
plot(zm)
summary(zm)
gelman.diag(zm, multivariate = F)
hist(data$y, breaks = 30, freq=FALSE) #note that this is the log transformed data
lines(density(zj$y.sim), col="red")
summary(zm)
exp(2.37)
exp(2.368)
dat %>% group_by(era) %>% summarise(mean = mean(size1mm))
exp(2.368 * -0.348)
(2.368 * -0.348)
exp(-.35)
exp(2.368)
exp(0.35)
exp(-.35)
dat %>% group_by(era) %>% summarise(mean = mean(size1mm))
11/8.6
8.6/11
summary(zm)
2.5/11
-2.5/11
exp(-.35)
exp(2.368)
2.368 * -0.35
exp(-0.8)
exp(2.37 - 0.35)
exp(2.37) - exp(0.35)
summary(zm)
dat %>% group_by(era) %>% summarise(mean = mean(size1mm))
exp(2.37) - exp(0.35)
exp(2.37)
exp(0.35)
exp(2.37 - 0.35)
exp(2.37) - exp(0.35)
exp(2.37 - 0.35)
exp(2.37)
exp(2.37 - 0.35)
dat %>% group_by(era) %>% summarise(mean = mean(size1mm))
summary(zm)
exp(2.3681 - 0.3477)
exp(2.3681)
exp(2.3681 - 0.3477)
summary(zm)
exp(2.3681)
exp(2.3681 - 0.3477)
dat %>% group_by(era) %>% summarise(mean = mean(size1mm))
inits = list(
list(
beta1 = as.vector(runif(1, -1, 1)),
beta2 = as.vector(runif(1, -1, 1)),
sigma = 1
),
list(
beta1 = as.vector(runif(1, -1, 1)),
beta2 = as.vector(runif(1, -1, 1)),
sigma = 1
)
)
sink("sbs_bayes/models/pooledJAGS.R")
cat("
model{
# priors
beta1 ~ dnorm(0, .00001)
beta2 ~ dnorm(0, .00001)
sigma ~ dunif(0, 10)
tau <- 1/sigma^2
# likelihood
for (i in 1:k){
mu[i] <- exp(beta1 + beta2 * era[i])
y[i] ~ dlnorm(log(mu[i]), tau)
}
}
", fill = TRUE)
sink()
jm2 = jags.model("sbs_bayes/models/pooledJAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm2, n.iter = n.update)
zm2 = coda.samples(jm, variable.names = c("beta1", "beta2", "sigma"),
n.iter = n.iter, n.thin = 1)
zm2 = coda.samples(jm2, variable.names = c("beta1", "beta2", "sigma"),
n.iter = n.iter, n.thin = 1)
summary(zm2)
summary(zm2)
exp(2.3694)
exp(2.3694 - 0.3480)
dat %>% group_by(era) %>% summarise(mean = mean(size1mm))
summary(zm2)
summary(zm)
exp(2.3694 - 0.3480)
dat %>% group_by(era) %>% summarise(mean = mean(size1mm))
start_time <- proc.time()
sink("sbs_bayes/models/pooledJAGS.R")
cat("
model{
# priors
for (i in 1:n_betas){
beta[i] ~ dnorm(0, .00001)
}
sigma ~ dunif(0, 10)
tau <- 1/sigma^2
# likelihood
mu_mat <- X %*% beta # can't exponentiate a vector
for (i in 1:k){
mu[i] <- exp(mu_mat[i])
y[i] ~ dlnorm(log(mu[i]), tau)
}
}
", fill = TRUE)
sink()
start_time <- proc.time()
jm = jags.model("sbs_bayes/models/pooledJAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
## Create model matrix
X <- model.matrix(~ eraJ, dat)
n_betas = ncol(X)
beta = as.vector(runif(n_betas, -1, 1))
beta
data = list(
y = as.double(dat$size1mm),
X = X,
k = as.double(length(dat$size1mm)),
group = as.double(dat$group_j),
n_betas = as.double(n_betas),
thc = as.double(dat$thc),
era = as.double(dat$eraJ)
)
n_betas = ncol(X)
beta = as.vector(runif(n_betas, -1, 1))
beta
n.adapt = 1000
n.update = 1000
n.iter = 1000
inits = list(
list(
beta = as.vector(runif(n_betas, -1, 1)),
sigma = 1
),
list(
beta = as.vector(runif(n_betas, -1, 1)),
sigma = 1
)
)
## JAGS model
sink("sbs_bayes/models/pooledJAGS.R")
cat("
model{
# priors
for (i in 1:n_betas){
beta[i] ~ dnorm(0, .00001)
}
sigma ~ dunif(0, 10)
tau <- 1/sigma^2
# likelihood
mu_mat <- X %*% beta # can't exponentiate a vector
for (i in 1:k){
mu[i] <- exp(mu_mat[i])
y[i] ~ dlnorm(log(mu[i]), tau)
}
}
", fill = TRUE)
sink()
start_time <- proc.time()
jm = jags.model("sbs_bayes/models/pooledJAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("beta", "sigma"),
n.iter = n.iter, n.thin = 1)
end_time <- proc.time()
end_time - start_time
## Create model matrix
X <- model.matrix(~ eraJ, dat)
n_betas = ncol(X)
beta = as.vector(runif(n_betas, -1, 1))
beta
data = list(
y = as.double(dat$size1mm),
X = X,
k = as.double(length(dat$size1mm)),
group = as.double(dat$group_j),
n_betas = as.double(n_betas),
thc = as.double(dat$thc),
era = as.double(dat$eraJ)
)
n_betas = ncol(X)
beta = as.vector(runif(n_betas, -1, 1))
beta
n.adapt = 1000
n.update = 1000
n.iter = 1000
inits = list(
list(
beta1 = as.vector(runif(1, -1, 1)),
beta2 = as.vector(runif(1, -1, 1)),
sigma = 1
),
list(
beta1 = as.vector(runif(1, -1, 1)),
beta2 = as.vector(runif(1, -1, 1)),
sigma = 1
)
)
## JAGS model
sink("sbs_bayes/models/pooledJAGS.R")
cat("
model{
# priors
beta1 ~ dnorm(0, .00001)
beta2 ~ dnorm(0, .00001)
sigma ~ dunif(0, 10)
tau <- 1/sigma^2
# likelihood
for (i in 1:k){
mu[i] <- exp(beta1 + beta2 * era[i])
y[i] ~ dlnorm(log(mu[i]), tau)
}
}
", fill = TRUE)
sink()
start_time <- proc.time()
jm2 = jags.model("sbs_bayes/models/pooledJAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm2, n.iter = n.update)
zm2 = coda.samples(jm2, variable.names = c("beta1", "beta2", "sigma"),
n.iter = n.iter, n.thin = 1)
end_time <- proc.time()
end_time - start_time
summary(zm)
summary(zm2)
summary(zm)
summary(zm2)
