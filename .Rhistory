plot(fullMod)
ggplot(data = statDat, aes(tidalHT, mean_tempC, color = sp, shape = sp)) +
geom_point(alpha = 0.5)
Cand.mod[[1]] <- lme(fixed = mean_tempC ~ sp,
random = list(~ 1 | sampleArea, ~ 1 | position),
na.action = na.omit, method = "ML",
correlation = corCAR1(),
data = dat)
Cand.mod[[2]] <- update(Cand.mod[[1]], ~. - sp)
#create a vector of names to trace back models in set
mod_numbers <- paste("Cand.mod", 1:length(Cand.mod), sep=" ")
mod_text <- c("Species + Tidal Height", "Tidal height", "Species",
"Null model")
mod_text <- c("Species", "Null model")
#generate AICc table with numbers
mod.aicctab <- aictab(cand.set= Cand.mod, modnames=mod_numbers, sort=TRUE,
second.ord=FALSE) # second.ord =TRUE means AICc is used (not AIC)
print(mod.aicctab, digits=2, LL=TRUE)
Cand.mod <- list()
# final full model
Cand.mod[[1]] <- lme(fixed = mean_tempC ~ sp,
random = list(~ 1 | sampleArea, ~ 1 | position),
na.action = na.omit, method = "ML",
correlation = corCAR1(),
data = dat)
Cand.mod[[2]] <- update(Cand.mod[[1]], ~. - sp)
#create a vector of names to trace back models in set
mod_numbers <- paste("Cand.mod", 1:length(Cand.mod), sep=" ")
mod_text <- c("Species", "Null model")
mod.aicctab <- aictab(cand.set= Cand.mod, modnames=mod_numbers, sort=TRUE,
second.ord=FALSE) # second.ord =TRUE means AICc is used (not AIC)
print(mod.aicctab, digits=2, LL=TRUE)
#generate AICc table with names
mod.aicctab <- aictab(cand.set= Cand.mod, modnames= mod_text, sort=TRUE,
second.ord=FALSE) # second.ord =TRUE means AICc is used (not AIC)
print(mod.aicctab, digits=2, LL=TRUE)
# Format the data frame for nicer printing
aic_table <- data.frame(cbind(data.frame(mod.aicctab)[1],
round(data.frame(mod.aicctab)[2:8], 3)))
write.csv(aic_table, "./output/temp_mean_AIC.csv")
fullMod <- update(Cand.mod[[1]], method = "REML")
summary(fullMod)
plot(fullMod)
anova(Cand.mod[[1]], Cand.mod[[2]])
Cand.mod[[1]] <- lme(fixed = max_tempC ~ sp,
random = list(~ 1 | sampleArea, ~ 1 | position),
na.action = na.omit, method = "ML",
correlation = corCAR1(),
data = dat)
Cand.mod[[2]] <- update(Cand.mod[[1]], ~. - sp)
anova(Cand.mod[[1]], Cand.mod[[2]])
mod_numbers <- paste("Cand.mod", 1:length(Cand.mod), sep=" ")
mod_text <- c("Species", "Null model")
#generate AICc table with numbers
mod.aicctab <- aictab(cand.set= Cand.mod, modnames=mod_numbers, sort=TRUE,
second.ord=FALSE) # second.ord =TRUE means AICc is used (not AIC)
print(mod.aicctab, digits=2, LL=TRUE)
#generate AICc table with names
mod.aicctab <- aictab(cand.set= Cand.mod, modnames= mod_text, sort=TRUE,
second.ord=FALSE) # second.ord =TRUE means AICc is used (not AIC)
print(mod.aicctab, digits=2, LL=TRUE)
# Format the data frame for nicer printing
aic_table <- data.frame(cbind(data.frame(mod.aicctab)[1],
round(data.frame(mod.aicctab)[2:8], 3)))
write.csv(aic_table, "./output/temp_max_AIC.csv")
plot(Cand.mod[[1]])
Cand.mod <- list()
# final full model
Cand.mod[[1]] <- lme(fixed = min_tempC ~ sp,
random = list(~ 1 | sampleArea, ~ 1 | position),
na.action = na.omit, method = "ML",
correlation = corCAR1(),
data = dat)
Cand.mod[[2]] <- update(Cand.mod[[1]], ~. - sp)
anova(Cand.mod[[1]], Cand.mod[[2]])
#create a vector of names to trace back models in set
mod_numbers <- paste("Cand.mod", 1:length(Cand.mod), sep=" ")
mod_text <- c("Species", "Null model")
#generate AICc table with numbers
mod.aicctab <- aictab(cand.set= Cand.mod, modnames=mod_numbers, sort=TRUE,
second.ord=FALSE) # second.ord =TRUE means AICc is used (not AIC)
print(mod.aicctab, digits=2, LL=TRUE)
#generate AICc table with names
mod.aicctab <- aictab(cand.set= Cand.mod, modnames= mod_text, sort=TRUE,
second.ord=FALSE) # second.ord =TRUE means AICc is used (not AIC)
print(mod.aicctab, digits=2, LL=TRUE)
# Format the data frame for nicer printing
aic_table <- data.frame(cbind(data.frame(mod.aicctab)[1],
round(data.frame(mod.aicctab)[2:8], 3)))
write.csv(aic_table, "./output/temp_min_AIC.csv")
plot(Cand.mod[[1]])
Cand.mod[[1]]
?citation
x <- citation()
toBibtex(x)
install.packages("metafor")
install.packages("metagear")
library(metafor)
library(metagear)
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
dat <- get(data("dat.curtis1998"))
head(dat, 5)
data(example_references_metagear)
library(metagear)
data(example_references_metagear)
head(example_references_metagear)
names(example_references_metagear)
dat <- read.txt("sbs_meta/lit_search_results/recs_160607.txt")
dat <- read.table("sbs_meta/lit_search_results/recs_160607.txt")
head(dat)
dat <- read.table("sbs_meta/lit_search_results/savedrecs.txt")
?read.table
dat <- read.delim("sbs_meta/lit_search_results/savedrecs.txt")
dat <- read.delim("sbs_meta/lit_search_results/savedrecs.txt",
header = TRUE)
library(readr)
?read.table
datDel <- read.delim("sbs_meta/lit_search_results/savedrecs_delim.txt",
header = TRUE)
datDel <- read.delim("sbs_meta/lit_search_results/savedrecs_delim.txt",
header = TRUE, quote = """)
datDel <- read.delim("sbs_meta/lit_search_results/savedrecs_delim.txt",
header = TRUE, quote = "")
datDel <- read.delim("sbs_meta/lit_search_results/savedrecs_delim.txt",
header = TRUE, quote = "")
datDel <- read.delim("sbs_meta/lit_search_results/savedrecs_delim.txt",
header = TRUE, quote = "'")
datDel <- read.delim("sbs_meta/lit_search_results/savedrecs_delim.txt",
header = TRUE, quote = """)
datDel <- read.delim("sbs_meta/lit_search_results/savedrecs_delim.txt",
header = TRUE, quote = """)
datDel <- read.delim("sbs_meta/lit_search_results/savedrecs_delim.txt",
header = TRUE, quote = '"')
datDel <- read.delim("sbs_meta/lit_search_results/savedrecs_delim.txt",
header = TRUE, quote = '"')
unique(dat$method)
levels(dat$method)
str(dat)
?escalc
dat <- escalc(m1i=m1i, sd1i=sd1i, n1i=n1i, m2i=m2i, sd2i=sd2i, n2i=n2i, measure="ROM", data=dat,append=T)
head(dat)
rm(yi, vi, method = "DL", data = dat)
rma(yi, vi, method = "DL", data = dat)
dat <- get(data("dat.curtis1998"))
head(dat, 5)
unique(dat$method)
?escalc
dat <- escalc(m1i=m1i, sd1i=sd1i, n1i=n1i, m2i=m2i, sd2i=sd2i, n2i=n2i, measure="ROM", data=dat, append=T)
head(dat)
rma(yi, vi, method = "DL", data = dat)
res1 <- rma(yi, vi, method = "DL", data = dat)
funnel(res1)
forest(res1)
res2 <- rma(yi, vi, data = dat, mods = ~ as.factor(method))
res3 <- rma(yi, vi, data = dat, mods = ~ as.factor(method) - 1)
res2
testosterone <- data.frame(r = c(0.02,0.24,0.26,0.06) ,
n = c(1678,57,94,113))
ttone <- escalc(ri=r, ni=n, data=testosterone, measure="ZCOR", append=T)
head(ttone)
res_ttone <- rma(yi, vi, data=ttone, method="REML”)
res_ttone <- rma(yi, vi, data=ttone, method="REML”)
res_ttone <- rma(yi, vi, data = ttone, method = "REML”)
res_ttone <- rma(yi, vi, data = ttone, method = "REML”)
library(readr)
library(metafor)
# http://lajeunesse.myweb.usf.edu/metagear/metagear_basic_vignette.html
# first load Bioconductor resources needed to install the EBImage package
# and accept/download all of its dependencies
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
library(EBImage)
wd()
pwd()
getwd
getwd()
rawData <- figure_scatterPlot("sbs_meta/extract_data/Roy2003_fig2.png")
library(metagear)
rawData <- figure_scatterPlot("sbs_meta/extract_data/Roy2003_fig2.png")
figure_display(rawData)
aFig <- figure_read("sbs_meta/extract_data/Roy2003_fig2.png", display = TRUE)
figure_scatterPlot("aFig")
rawData <- figure_barPlot("sbs_meta/extract_data/Roy2003_fig2.jpg")
rawData <- figure_barPlot("sbs_meta/extract_data/Roy2003_fig2_Aspirata.jpg")
figure_detectAllPoints(aFig, sensitivity = 0.2,
point_shape = "circle", point_size = 5)
?figure_det
?figure_detectAllPoints
library(readr)
library(metagear)
library(EBImage)
data("Kam_et_al_2003_Fig2")
figure_display(Kam_et_al_2003_Fig2)
figure_write(Kam_et_al_2003_Fig2, file = "extract_data/Kam_et_al_2003_Fig2.jpg")
figure_write(Kam_et_al_2003_Fig2, file = "Kam_et_al_2003_Fig2.jpg")
?figure_write
figure_write(Kam_et_al_2003_Fig2,
file = "sbs_meta/extract_data/Kam_et_al_2003_Fig2.jpg")
?raw_data
?figure_scatterPlot
rawData <- figure_scatterPlot("sbs_meta/extract_data/Kam_et_al_2003_Fig2.jpg")
head(rawData)
View(rawData)
figureSource <- "http://lajeunesse.myweb.usf.edu/metagear/example_2_scatterPlot.jpg"
download.file(figureSource, "example_2_scatterPlot.jpg", quiet = TRUE, mode = "wb")
?download.file
aFig <- figure_read("example_2_scatterPlot.jpg", display = TRUE)
rawData2 <- figure_scatterPlot("example_2_scatterPlot.jpg",
axis_thickness = 3, # adjusted from 5 to 3 to help detect the thin axis
X_min = 0, # minimum X-value reported in the plot
X_max = 50, # maximum X-value reported in the plot
Y_min = 0,
Y_max = 70)
View(rawData2)
figureSource <- "http://lajeunesse.myweb.usf.edu/metagear/example_3_scatterPlot.jpg"
download.file(figureSource, "example_3_scatterPlot.jpg", quiet = TRUE, mode = "wb")
aFig <- figure_read("example_3_scatterPlot.jpg", display = TRUE)
download.file(figureSource, "sbs_meta/extract_data/example_3_scatterPlot.jpg", quiet = TRUE, mode = "wb")
aFig <- figure_read("sbs_meta/extract_data/example_3_scatterPlot.jpg",
display = TRUE)
rawData3 <- figure_scatterPlot("sbs_meta/extract_data/example_3_scatterPlot.jpg",
binary_point_fill = TRUE, # set to TRUE to fill empty points
point_size = 9, # increase from 5 to 9 since points are large
binary_threshold = 0.8, # increase from 0.6 to 0.8 to include the grey objects
axis_thickness = 3, # decrease from 5 to 3 since axes are thin
X_min = 0,
X_max = 850,
Y_min = 0,
Y_max = 35)
cleaned_rawData3 <- rawData3[ which(!(rawData3$X < 350 & rawData3$Y > 25)), ]
# estimate the regression coefficients
lm(Y ~ X, data = cleaned_rawData3)
data(Kortum_and_Acymyan_2013_Fig4)
# display the image
figure_display(Kortum_and_Acymyan_2013_Fig4)
figure_write(Kortum_and_Acymyan_2013_Fig4,
file = "sbs_meta/extract_data/Kortum_and_Acymyan_2013_Fig4.jpg")
rawData <- figure_barPlot("sbs_meta/extract_data/Kortum_and_Acymyan_2013_Fig4.jpg")
View(rawData)
as.vector(round(rawData, 2))
organizedData <- t(apply(matrix(rawData, ncol = 3, byrow = TRUE), 1, sort))
theExtraction_names <- c("lower 95%CI", "mean SUS score", "upper 95%CI")
theBar_names <- toupper(letters[1:14])
dimnames(organizedData) <- list(theBar_names, theExtraction_names)
organizedData
figureSource <- "http://lajeunesse.myweb.usf.edu/metagear/example_2_barPlot.jpg"
download.file(figureSource, "sbs_meta/extract_data/example_2_barPlot.jpg",
quiet = TRUE, mode = "wb")
aFig <- figure_read("sbs_meta/extract_data/example_2_barPlot.jpg", display = TRUE)
rawData2 <- figure_barPlot("example_2_barPlot.jpg",
horizontal = TRUE, # changed from FALSE since bars are horizontal
bar_width = 11, # raised from 9 since bars are wide relative to the figure
Y_min = 0,
Y_max = 10)
rawData2 <- figure_barPlot("sbs_meta/extract_data/example_2_barPlot.jpg",
horizontal = TRUE, # changed from FALSE since bars are horizontal
bar_width = 11, # raised from 9 since bars are wide relative to the figure
Y_min = 0,
Y_max = 10)
rawData2 <- rawData2[rawData2 < max(rawData2)]
# data are in triplicates with an upper, mean, and lower values, so let's
# stack by three and sort within triplicates from lowest to highest
organizedData <- t(apply(matrix(rawData2, ncol = 3, byrow = TRUE), 1, sort))
# rename rows and columns of these triplicates as presented in the figure
theExtraction_names <- c("lower error", "bar", "upper error")
theBar_names <- c("exclosure", "water", "fertilizer", "control")
dimnames(organizedData) <- list(theBar_names, theExtraction_names)
organizedData
aFig <- figure_read("sbs_meta/extract_data/Roy2003_fig2_Aspirata.png",
display = TRUE)
aFig
rawData <- figure_scatterPlot("sbs_meta/extract_data/Roy2003_fig2_Aspirata.jpg")
rawData <- figure_barPlot("sbs_meta/extract_data/Roy2003_fig2_Aspirata.jpg")
rawData <- figure_barPlot("sbs_meta/extract_data/Roy2003_fig2_Aspirata.jpg",
axis_thickness = 3)
figure_detectAxis("sbs_meta/extract_data/Roy2003_fig2_Aspirata.jpg",
axis_type = "X", axis_thickness = 5,
sensitivity = 0.2)
figure_detectAxis(aFig,
axis_type = "X", axis_thickness = 5,
sensitivity = 0.2)
figure_detectAxis(aFig,
axis_type = "Y", axis_thickness = 5,
sensitivity = 0.2)
figure_detectAllPoints(aFig, sensitivity = 0.2,
point_shape = "circle", point_size = 5)
figure_add(aFig)
figure_display(aFig)
figure_add(aFig)
figure_detectAxis(aFig,
axis_type = "Y", axis_thickness = 5,
sensitivity = 0.2)
figure_detectAxis()
figure_detectAxis
.extractAxis_helper
?.extractAxis_helper
?extractAxis_helper
aFig <- figure_read("sbs_meta/extract_data/Roy2003_fig2_Aspirata_b.png",
display = TRUE)
aFig <- figure_read("sbs_meta/extract_data/Roy2003_fig2_Aspirata_b.jpg",
display = TRUE)
aFig <- figure_read("sbs_meta/extract_data/Roy2003_fig2_Aspirata.jpg",
display = TRUE)
figure_detectAxis(aFig,
axis_type = "Y", axis_thickness = 5,
sensitivity = 0.2)
?figure_read
aFig <- figure_read("sbs_meta/extract_data/Roy2003_fig2_Aspirata_b.jpg",
display = TRUE)
rawData <- figure_scatterPlot(aFig)
rawData <- figure_scatterPlot(file = aFig)
rawData <- figure_scatterPlot("sbs_meta/extract_data/Roy2003_fig2_Aspirata_b.jpg")
rawData <- figure_scatterPlot("sbs_meta/extract_data/Roy2003_fig2_Aspirata_b.jpg",
binary_point_fill = TRUE,
point_size = 9,
binary_threshold = 0.8,
axis_thickness = 3,
X_min = 0,
X_max = 3,
Y_min = 3.05,
Y_max = 3.45)
rawData <- figure_scatterPlot("sbs_meta/extract_data/Roy2003_fig2_Aspirata_b.jpg",
binary_point_fill = TRUE,
point_size = 5,
binary_threshold = 0.6,
axis_thickness = 5,
X_min = 0,
X_max = 3,
Y_min = 3.05,
Y_max = 3.45)
fisher1 <- figure_read("sbs_meta/extract_data/Fisher_2009_fig1.png",
display = TRUE)
rawData <- figure_scatterPlot("sbs_meta/extract_data/Fisher_2009_fig1.png")
View(rawData)
figure_detectAxis(fisher1)
figure_detectAxis("sbs_meta/extract_data/Fisher_2009_fig1.png")
rawData <- figure_scatterPlot("sbs_meta/extract_data/Fisher_2009_fig1_edit.png")
View(rawData)
rawData <- figure_scatterPlot("sbs_meta/extract_data/Fisher_2009_fig1_edit.png",
# binary_point_fill = TRUE,
point_size = 5,
binary_threshold = 0.6,
axis_thickness = 5,
X_min = 18,
X_max = 28,
Y_min = 18,
Y_max = 36)
rawData <- figure_scatterPlot("sbs_meta/extract_data/Fisher_2009_fig1_edit.png",
binary_point_fill = TRUE,
point_size = 5,
binary_threshold = 0.6,
axis_thickness = 5,
X_min = 18,
X_max = 28,
Y_min = 18,
Y_max = 36)
rawData <- figure_scatterPlot("sbs_meta/extract_data/Fisher_2009_fig1_edit.png",
binary_threshold = 0.6,
X_min = 18,
X_max = 28,
Y_min = 18,
Y_max = 36)
rawData <- figure_scatterPlot("sbs_meta/extract_data/Fisher_2009_fig1_edit.png",
binary_threshold = 0.8,
X_min = 18,
X_max = 28,
Y_min = 18,
Y_max = 36)
rawData <- figure_barPlot("sbs_meta/scraped/Roy2003/Roy2003_fig3.png.jpg")
rawData <- figure_barPlot("sbs_meta/scraped/Roy2003/Roy2003_fig3.png")
library(dplyr)
path <- "sbs_meta/scraped/Roy2003/"
fileNames <- dir(path = path, recursive = TRUE,
pattern = ".csv")
fileSnapshot()
fileNames()
fileNames
df <- read.csv(file = paste(path, fileNames[1]))
fileNames
paste(path, fileNames[1])
df <- read.csv(file = paste(path, fileNames[1]), sep = "")
paste(path, fileNames[1]), sep = "")
fileNames
paste(path, fileNames[1]), sep = "")
paste(path, fileNames[1], sep = "")
df <- read.csv(file = paste(path, fileNames[1], sep = "")
df <- read.csv(file = paste(path, fileNames[1], sep = ""))
system.time(
df <- read.csv(file = paste(path, fileNames[1], sep = ""))
df <- read.csv(file = paste(path, fileNames[1], sep = ""))
View(df)
df <- read.csv(file = paste(path, fileNames[1], sep = ""), header = TRUE)
View(df)
df <- read.csv(file = paste(path, fileNames[1], sep = ""),
header = TRUE)
View(df)
paste(path, fileNames[1], sep = "")
df <- read.csv(file = paste(path, fileNames[1], sep = ""),
header = TRUE)
head(csv)
head(df)
df <- read.csv(file = paste(path, fileNames[1], sep = ""),
header = FALSE)
head(df)
paste(path, fileNames[1], sep = "")
fileNames
df <- df %>% rename(length_ln = V2) %>%
mutate(temporalBin = c(rep("Pre-1960", 3), rep("1961-1980", 3),
rep("Field", 3), rep("CNM", 3)),
csvFile = filenames[i])
df <- df %>% rename(length_ln = V2) %>%
mutate(temporalBin = c(rep("Pre-1960", 3), rep("1961-1980", 3),
rep("Field", 3), rep("CNM", 3)),
csvFile = fileNames[i])
df <- read.csv(file = paste(path, fileNames[i], sep = ""),
header = FALSE)
df <- df %>% rename(length_ln = V2) %>%
mutate(temporalBin = c(rep("Pre-1960", 3), rep("1961-1980", 3),
rep("Field", 3), rep("CNM", 3)),
csvFile = fileNames[i])
i = 1
df <- read.csv(file = paste(path, fileNames[i], sep = ""),
header = FALSE)
df <- df %>% rename(length_ln = V2) %>%
mutate(temporalBin = c(rep("Pre-1960", 3), rep("1961-1980", 3),
rep("Field", 3), rep("CNM", 3)),
csvFile = fileNames[i])
df
for(i in 2:length(fileNames)) {
df.i <- read.csv(file = paste(path, fileNames[i], sep = ""),
header = FALSE)
df.i <- df.i %>% rename(length_ln = V2) %>%
mutate(temporalBin = c(rep("Pre-1960", 3), rep("1961-1980", 3),
rep("Field", 3), rep("CNM", 3)),
csvFile = fileNames[i])
# Add to existing dataframe
df <- rbind(df, df.i)
}
df
?strsplit
crap <- df$csvFile[1]
crap
strsplit(crap, split = "_")
strsplit(crap, split = "_")[3]
strsplit(crap, split = "_") %>% unlist()
strsplit(crap, split = "_") %>% unlist()[3]
strsplit(crap, split = "_") %>% unlist()
strsplit(crap, split = "_") %>% unlist() %>% .[3]
strsplit(crap, split = "_") %>% unlist() %>% .[3] %>%
strsplit(., split = ".")
sppFile <- strsplit(crap, split = "_") %>% unlist() %>% .[3]
sppFile
strplit(sppFile, split = ".")
strsplit(sppFile, split = ".")
str(sppFile)
strsplit(sppFile, split = "[.]")
strsplit(sppFile, split = "[.]") %>% .[1]
strsplit(sppFile, split = "[.]") %>% unlist() %>%  .[1]
fig2_df <- df %>% select(-V1) %>%
mutate(species = strsplit(csvFile, split = "_") %>% unlist() %>% .[3] %>%
strsplit(., split = "[.]") %>% unlist() %>% .[1])
View(fig2_df)
crap <- df$csvFile
sppFile <- strsplit(crap, split = "_") %>% unlist() %>% .[3]
str(sppFile)
crap
sppFile <- strsplit(crap, split = "_") # %>% unlist() %>% .[3]
str(sppFile)
sppFile <- strsplit(crap, split = "_") %>% unlist() #%>% .[3]
strsplit(crap, split = "_") %>% unlist() #%>% .[3]
strsplit(crap, split = "_")
as.data.frame(strsplit(crap, split = "_"))
strsplit(crap, split = "_")
listCrap <- strsplit(crap, split = "_")
matrix(unlist(listCrap), nrow = 48, byrow = TRUE)
data.frame(matrix(unlist(listCrap), nrow = 48, byrow = TRUE), stringsAsFactors = FALSE)
data.frame(matrix(unlist(listCrap), nrow = 48, byrow = TRUE), stringsAsFactors = FALSE) %>% select(X3)
%>% unlist() #%>% .[3]
df
csv_df <- data.frame(matrix(unlist(listCrap), nrow = 48, byrow = TRUE),
stringsAsFactors = FALSE)
csv_df
strsplit(csv_df$X3, split = "[.]") %>% unlist() %>%  .[1]
spp_df <- data.frame(matrix(unlist(csv_df$X3), nrow = 48, byrow = TRUE),
stringsAsFactors = FALSE)
spp_df
csvList <- strsplit(df$csvFile, split = "_")
csvList <- strsplit(df$csvFile, split = "_")
csv_df <- data.frame(matrix(unlist(csvList), nrow = 48, byrow = TRUE),
stringsAsFactors = FALSE)
csv_df
sppList <- strsplit(csv_df$X3, split = "_")
sppList <- strsplit(csv_df$X3, split = "_")
spp_df <- data.frame(matrix(unlist(sppList), nrow = 48, byrow = TRUE),
stringsAsFactors = FALSE)
spp_df
sppList
sppList <- strsplit(csv_df$X3, split = "[.]")
spp_df <- data.frame(matrix(unlist(sppList), nrow = 48, byrow = TRUE),
stringsAsFactors = FALSE)
spp_df
df$species <- spp_df$X2
head(df)
df$species <- spp_df$X1
head(df)
fig2_df <- df %>% select(temporalBin, length_ln, species)
head(fig2_df)
fig2_df <- df %>% select(species, temporalBin, length_ln, csvFile )
head(fig2_df)
write.csv(file = paste(path, "Roy2003_fig2_scraped.csv"))
write.csv(fig2_df, file = paste(path, "Roy2003_fig2_scraped.csv"))
