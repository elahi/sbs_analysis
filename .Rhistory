factorList2
chil$tideHT <- mapvalues(chil$nest1, from = factorList, to = factorList2)
library(dplyr)
mapvalues
chil$tideHT <- plyr::mapvalues(chil$nest1, from = factorList, to = factorList2)
levels(chil$tideHT)
chil2 <- chil %>% mutate(tideHT = factor(nest1, levels = c("2.4", "4.3", "5.8", "7.3")))
head(chil2)
chil2 <- chil %>% mutate(tideHT = factor(tideHTm, levels = c("2.4", "4.3", "5.8", "7.3")))
head(chil2)
levels(chil$tideHT)
levels(chil$tideHT)
rev(levels(chil$tideHT))
qplot(size1mm, data = chil, color = era, facets = ~ tideHT, geom = "density")
qplot(size1mm, data = chil, color = era, facets = ~ rev(tideHT), geom = "density")
?factor
$tideHT <- plyr::mapvalues(chil$nest1, from = factorList, to = factorList2)
tideHT <- plyr::mapvalues(chil$nest1, from = factorList, to = factorList2)
factor(tideHT)
factor(tideHT, levels = c("7.3", "5.8", "4.3", "2.4"))
tideHT2 <- factor(tideHT, levels = c("7.3", "5.8", "4.3", "2.4"))
summary(tideHT2)
chil$tideHT <- tideHT2
qplot(size1mm, data = chil, color = era, facets = ~ tideHT, geom = "density")
ggplot(data = chil, aes(size1mm, color = era)) +
facet_wrap(~ tideHT, nrow = 4)
ggplot(data = chil, aes(size1mm, color = era)) +
facet_wrap(~ tideHT, nrow = 4) + geom_density()
p + geom_histogram()
p <- ggplot(data = chil, aes(size1mm, color = era)) +
facet_wrap(~ tideHT, nrow = 4)
p + geom_histogram()
p + boxplot()
p + box_plot()
p
p + geom_boxplot()
p <- ggplot(data = chil, aes(era, size1mm)) +
facet_wrap(~ tideHT, nrow = 4)
p + geom_boxplot()
ggsave("sbs_fig2.pdf", 3, 6)
p + geom_boxplot()
ggsave("sbs_fig2.pdf", 3, 6)
?ggsave
ggsave("sbs_fig2.pdf", width = 3, height = 6)
ggsave("./figs/sbs_fig2.pdf", width = 3, height = 6)
qplot(size1mm, data = chil, facets = era ~ tideHT, geom = "histogram")
qplot(size1mm, data = chil, facets = tideHT ~ era, geom = "histogram")
ggplot(chil,  aes(x = size1mm)) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1,
color = "black", fill = "gray") +
facet_grid(tideHT ~ era)
ggplot(chil,  aes(x = size1mm)) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1,
color = "black", fill = "gray") +
facet_grid(tideHT ~ era, scales = "free_y")
ggplot(chil,  aes(x = size1mm)) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1,
color = "black", fill = "gray") +
facet_grid(tideHT ~ era, scales = "free_y") +
xlab("Size (mm)") + ylab("Frequency (%)")
factorList2 <- c("2.4m", "4.3m", "5.8m", "7.3m")
factorList2
tideHT <- plyr::mapvalues(chil$nest1, from = factorList, to = factorList2)
# reorder the levels
tideHT2 <- factor(tideHT, levels = c("7.3m", "5.8m", "4.3m", "2.4m"))
chil$tideHT <- tideHT2
############################################
### plot
qplot(era, size1mm, data = chil, facets = ~ nest1, geom = "boxplot")
qplot(size1mm, data = chil, color = era, facets = ~ tideHT, geom = "density")
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_grid(tideHT ~ era, scales = "free_y") +
xlab("Size (mm)") + ylab("Frequency (%)")
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era))
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "free_y") +
xlab("Size (mm)") + ylab("Probability density")
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "free_y", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density")
qplot(era, size1mm, data = chil, facets = ~ nest1, geom = "boxplot")
qplot(size1mm, data = chil, color = era, facets = ~ tideHT, geom = "density")
p <- ggplot(data = chil, aes(era, size1mm)) +
facet_wrap(~ tideHT, nrow = 4)
qplot(size1mm, data = chil, facets = tideHT ~ era, geom = "histogram")
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "free_y", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density")
# histogram
ggplot(chil,  aes(x = size1mm)) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1,
color = "black", fill = "gray") +
facet_grid(tideHT ~ era, scales = "free_y") +
xlab("Size (mm)") + ylab("Frequency (%)")
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "free_y", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density")
# histogram
ggplot(chil,  aes(x = size1mm)) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1,
color = "black", fill = "gray") +
facet_grid(tideHT ~ era, scales = "free_y") +
xlab("Size (mm)") + ylab("Frequency (%)")
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "free_y", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density")
ggsave("./figs/sbs_fig2.pdf", width = 3, height = 6)
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "fixed", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density")
ggsave("./figs/sbs_fig2.pdf", width = 3, height = 6)
library(ggplot2)
theme_set(theme_classic(base_size = 8))
library(dplyr)
library(lme4)
library(lmerTest)
rm(list=ls(all=TRUE))
# plotting functions
source("./R/multiplotF.R")
# load prepped data
dat <- read.csv("./output/sbsMaster.csv", na.strings = c("NA"))
# change ft to meters
range(dat$tideHTm, na.rm = TRUE)
dat$tideHTm <- dat$tideHTm/3.28084
chil <- droplevels(filter(dat, sp == "LIKE"))
summary(chil)
unique(chil$nest2)
############################################
# create new factor with tidal heights
factorList <- unique(chil$nest1)
factorList
unique(chil$tideHTm)
factorList2 <- c("2.4m", "4.3m", "5.8m", "7.3m")
factorList2
tideHT <- plyr::mapvalues(chil$nest1, from = factorList, to = factorList2)
# reorder the levels
tideHT2 <- factor(tideHT, levels = c("7.3m", "5.8m", "4.3m", "2.4m"))
chil$tideHT <- tideHT2
############################################
### plot
# histogram
ggplot(chil,  aes(x = size1mm)) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1,
color = "black", fill = "gray") +
facet_grid(tideHT ~ era, scales = "free_y") +
xlab("Size (mm)") + ylab("Frequency (%)")
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "fixed", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density")
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "fixed", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density") +
theme(legend.justification = c(1, 1), legend.position = c(0.52, 0.45),
legend.text = element_text(size = 10), legend.title = element_text(size = 10))
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "fixed", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density") +
theme(legend.justification = c(1, 1), legend.position = c(0.25, 0.75),
legend.text = element_text(size = 10), legend.title = element_text(size = 10))
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "fixed", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density") +
theme(legend.justification = c(1, 1), legend.position = c(0.75, 0.25),
legend.text = element_text(size = 10), legend.title = element_text(size = 10))
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "fixed", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density") +
theme(legend.justification = c(1, 1), legend.position = c(0.95, 0.15),
legend.text = element_text(size = 10), legend.title = element_text(size = 10))
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "fixed", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density") +
theme(legend.justification = c(1, 1), legend.position = c(0.95, 0.2),
legend.text = element_text(size = 10), legend.title = element_text(size = 10))
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "fixed", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density") +
theme(legend.justification = c(1, 1), legend.position = c(0.97, 0.25),
legend.text = element_text(size = 10), legend.title = element_text(size = 10))
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "fixed", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density") +
theme(legend.justification = c(1, 1), legend.position = c(0.97, 0.23),
legend.text = element_text(size = 10), legend.title = element_text(size = 10))
ggsave("./figs/sbs_fig2.pdf", width = 3, height = 6)
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "fixed", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density") +
theme(legend.justification = c(1, 1), legend.position = c(0.97, 0.23),
legend.text = element_text(size = 6), legend.title = element_text(size = 6))
ggsave("./figs/sbs_fig2.pdf", width = 3, height = 6)
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "fixed", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density") +
theme(legend.justification = c(1, 1), legend.position = c(0.97, 0.23),
legend.text = element_text(size = 6), legend.title = element_text(size = 6)) +
ggtitle("Littorina keenae")
ggsave("./figs/sbs_fig2.pdf", width = 3, height = 6)
ggsave("./figs/sbs_fig2.pdf", width = 3.5, height = 7)
dat <- read.csv("./output/sbsMaster.csv", na.strings = "NA")
summary(dat)
# change ft to meters
range(dat$tideHTm, na.rm = TRUE)
dat$tideHTm <- dat$tideHTm/3.28084
###############################################################
# Littorina keenae
childsDF <- droplevels(filter(dat, sp == "LIKE"))
summary(childsDF)
childsPast <- childsDF %>% filter(era == "past")
childsPres <- childsDF %>% filter(era == "present")
# exclude zoneD
childsSub <- childsDF[childsDF$nest1 != "zoneD", ]
childsSubPres <- childsSub %>% filter(era == "present")
childsSubPast <- childsSub %>% filter(era == "past")
###############################################################
# Chlorostoma funebralis
waraDF <- droplevels(filter(dat, sp == "CHFU"))
summary(waraDF)
waraDF <- droplevels(waraDF[complete.cases(waraDF$size1mm), ])
waraPast <- waraDF %>% filter(era == "past")
waraPres <- waraDF %>% filter(era == "present")
###############################################################
# Lottia digitalis
hexDF <- droplevels(filter(dat, sp == "LODI"))
summary(hexDF)
# truncate to > 5.95mm
hexSub <- hexDF %>% filter(size1mm > 5.95)
with(hexSub, table(era, nest1, site))
with(hexSub, table(era, site))
# use subsetted data (with truncation)
hexPast <- hexSub %>% filter(era == "past")
hexPres <- hexSub %>% filter(era == "present")
####################################################
####################################################
####################################################
# Figure 1
range(childsPres$tideHTm, na.rm = TRUE)
range(waraPres$tideHTm, na.rm = TRUE)
range(hexPres$tideHTm, na.rm = TRUE)
names(chil)
randF <- function(x) return(as.factor(paste(x$nest1, x$nest2, sep="_")))
chil$rand1 <- randF(chil)
unique(chil$rand1)
names(chil)
head(chil)
mod1 <- lmer(size1mm ~ era*nest1 + (era|rand1),
data = chil)
randF <- function(x) return(as.factor(paste(x$nest1, x$nest2, sep="_")))
chil$rand1 <- randF(chil)
unique(chil$rand1)
### quick model
mod1 <- lmer(size1mm ~ era*nest1 + (era|rand1),
data = chil)
randF <- function(x) return(as.factor(paste(x$era, x$nest1, x$nest2 sep="_")))
chil$rand1 <- randF(chil)
unique(chil$rand1)
randF <- function(x) return(as.factor(paste(x$era, x$nest1, x$nest2 sep="_")))
chil$rand1 <- randF(chil)
randF <- function(x) return(as.factor(paste(x$era, x$nest1, x$nest2, sep="_")))
chil$rand1 <- randF(chil)
library(ggplot2)
theme_set(theme_classic(base_size = 8))
library(dplyr)
rm(list=ls(all=TRUE))
# plotting functions
source("./R/multiplotF.R")
# load modern data
dat <- read.csv("./output/sbsMaster.csv", na.strings = "NA")
summary(dat)
# change ft to meters
range(dat$tideHTm, na.rm = TRUE)
dat$tideHTm <- dat$tideHTm/3.28084
###############################################################
# Littorina keenae
childsDF <- droplevels(filter(dat, sp == "LIKE"))
summary(childsDF)
childsPast <- childsDF %>% filter(era == "past")
childsPres <- childsDF %>% filter(era == "present")
# exclude zoneD
childsSub <- childsDF[childsDF$nest1 != "zoneD", ]
childsSubPres <- childsSub %>% filter(era == "present")
childsSubPast <- childsSub %>% filter(era == "past")
unique(childsDF$lat)
unique(childsDF$long)
waraDF <- droplevels(filter(dat, sp == "CHFU"))
summary(waraDF)
waraDF <- droplevels(waraDF[complete.cases(waraDF$size1mm), ])
waraPast <- waraDF %>% filter(era == "past")
waraPres <- waraDF %>% filter(era == "present")
unique(waraDF$lat); unique(waraDF$long)
hexDF <- droplevels(filter(dat, sp == "LODI"))
summary(hexDF)
unique(hexDF$lat); unique(hexDF$long)
dat$LL <- paste(dat$lat, dat$long, sep = "_")
childsDF <- droplevels(filter(dat, sp == "LIKE"))
summary(childsDF)
unique(childsDF$lat); unique(childsDF$long)
unique(childsDF$LL)
unique(waraDF$LL)
waraDF <- droplevels(filter(dat, sp == "CHFU"))
summary(waraDF)
waraDF <- droplevels(waraDF[complete.cases(waraDF$size1mm), ])
unique(waraDF$LL)
hexDF <- droplevels(filter(dat, sp == "LODI"))
summary(hexDF)
unique(hexDF$LL)
unique(childsDF$LL)
waraDF <- droplevels(filter(dat, sp == "CHFU"))
summary(waraDF)
waraDF <- droplevels(waraDF[complete.cases(waraDF$size1mm), ])
unique(waraDF$LL)
?substr
unique(dat$lat)
unique(dat$long)
dat$LL <- paste(substr(dat$lat, 1, 8), substr(dat$long, 1, 9), sep = ",")
unique(dat$LL)
dat$LL <- paste(substr(dat$lat, 1, 8), paste("-", substr(dat$long, 1, 9)), sep = ",")
unique(dat$LL)
dat$LL <- paste(substr(dat$lat, 1, 8), paste("-", substr(dat$long, 1, 9), sep = ""), sep = ",")
unique(dat$LL)
###############################################################
# Littorina keenae
childsDF <- droplevels(filter(dat, sp == "LIKE"))
summary(childsDF)
unique(childsDF$LL)
childsPast <- childsDF %>% filter(era == "past")
childsPres <- childsDF %>% filter(era == "present")
# exclude zoneD
childsSub <- childsDF[childsDF$nest1 != "zoneD", ]
childsSubPres <- childsSub %>% filter(era == "present")
childsSubPast <- childsSub %>% filter(era == "past")
###############################################################
# Chlorostoma funebralis
waraDF <- droplevels(filter(dat, sp == "CHFU"))
summary(waraDF)
waraDF <- droplevels(waraDF[complete.cases(waraDF$size1mm), ])
unique(waraDF$LL)
waraPast <- waraDF %>% filter(era == "past")
waraPres <- waraDF %>% filter(era == "present")
###############################################################
# Lottia digitalis
hexDF <- droplevels(filter(dat, sp == "LODI"))
summary(hexDF)
unique(hexDF$LL)
# truncate to > 5.95mm
hexSub <- hexDF %>% filter(size1mm > 5.95)
with(hexSub, table(era, nest1, site))
with(hexSub, table(era, site))
# use subsetted data (with truncation)
hexPast <- hexSub %>% filter(era == "past")
hexPres <- hexSub %>% filter(era == "present")
unique(waraDF$LL)
write.csv(waraDF$LL, 'waraLL.csv')
unique(waraDF$nest1)
unique(waraPres$LL)
unique(waraPres$nest1)
waraPres %>% group_by(nest1) %>% first()
waraPres %>% group_by(nest1) %>% first(LL)
waraPres %>% group_by(nest1) %>%
summarise(meanLat = mean(lat), meanLong = mean(long))
dat$lat2 <- substr(dat$lat, 1, 8)
dat$long2 <- paste("-", substr(dat$long, 1, 9), sep = "")
unique(dat$lat2)
unique(dat$long2)
dat$lat2 <- as.numeric(substr(dat$lat, 1, 8))
unique(dat$lat2)
dat$long2 <- as.numeric(paste("-", substr(dat$long, 1, 9), sep = ""))
unique(dat$lat2)
unique(dat$long2)
dat$LL <- with(dat, paste(lat2, long2, sep = ","))
unique(dat$LL)
rm(list=ls(all=TRUE))
# plotting functions
source("./R/multiplotF.R")
# load modern data
dat <- read.csv("./output/sbsMaster.csv", na.strings = "NA")
summary(dat)
# change ft to meters
range(dat$tideHTm, na.rm = TRUE)
dat$tideHTm <- dat$tideHTm/3.28084
# create numeric lat-long columns
dat$lat2 <- as.numeric(substr(dat$lat, 1, 8))
dat$long2 <- as.numeric(paste("-", substr(dat$long, 1, 9), sep = ""))
unique(dat$lat2)
unique(dat$long2)
dat$LL <- with(dat, paste(lat2, long2, sep = ","))
unique(dat$LL)
# Littorina keenae
childsDF <- droplevels(filter(dat, sp == "LIKE"))
summary(childsDF)
unique(childsDF$LL)
childsPast <- childsDF %>% filter(era == "past")
childsPres <- childsDF %>% filter(era == "present")
# exclude zoneD
childsSub <- childsDF[childsDF$nest1 != "zoneD", ]
childsSubPres <- childsSub %>% filter(era == "present")
childsSubPast <- childsSub %>% filter(era == "past")
summary(childsDF)
childsPres %>% group_by(site) %>%
summarise(meanLat = mean(lat2), meanLong = mean(long2))
childsPres %>% group_by(site) %>%
summarise(meanLat = mean(lat2), meanLong = mean(long2),
LL = first(LL))
summarise(meanLat = first(lat2), meanLong = first(long2),
LL = first(LL))
childsPres %>% group_by(site) %>%
summarise(meanLat = first(lat2), meanLong = first(long2),
LL = first(LL))
childsPres %>% group_by(site) %>%
summarise(species = first(sp), nest1 = first(nest1),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL))
childsPres %>% group_by(site) %>%
summarise(species = first(species), nest1 = first(nest1),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL))
childsLL <- childsPres %>% group_by(site) %>%
summarise(species = first(species), nest1 = first(nest1),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL))
waraDF <- droplevels(filter(dat, sp == "CHFU"))
summary(waraDF)
waraDF <- droplevels(waraDF[complete.cases(waraDF$size1mm), ])
waraPast <- waraDF %>% filter(era == "past")
waraPres <- waraDF %>% filter(era == "present")
unique(waraPres$LL)
unique(waraPres$nest1)
waraLL <- waraPres %>% group_by(nest1) %>%
summarise(species = first(species), nest1 = first(nest1),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL))
waraLL <- waraPres %>% group_by(nest1) %>%
summarise(species = first(species),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL))
waraLL
childsLL
summarise(site = first(site), species = first(species),
meanLat = first(lat2), meanLong = first(long2),
# lat longs
waraLL <- waraPres %>% group_by(nest1) %>%
summarise(site = first(site), species = first(species),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL))
waraLL
waraLL <- waraPres %>% group_by(nest1) %>%
summarise(site = first(site), species = first(species),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL))
waraLL
waraLL <- waraPres %>% group_by(nest1) %>%
summarise(site = first(site), species = first(species),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL)) %>%
arrange(meanLat, meanLong)
waraLL
waraPres$transect <- with(waraPres, paste(site, nest1, sep = "_"))
waraLL <- waraPres %>% group_by(transect) %>%
summarise(site = first(site), species = first(species),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL)) %>%
arrange(meanLat, meanLong)
waraLL
waraDF <- droplevels(filter(dat, sp == "CHFU"))
summary(waraDF)
# waraDF <- droplevels(waraDF[complete.cases(waraDF$size1mm), ])
waraPast <- waraDF %>% filter(era == "past")
waraPres <- waraDF %>% filter(era == "present")
unique(waraPres$LL)
unique(waraPres$nest1)
waraPres$transect <- with(waraPres, paste(site, nest1, sep = "_"))
# lat longs
waraLL <- waraPres %>% group_by(transect) %>%
summarise(site = first(site), species = first(species),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL)) %>%
arrange(meanLat, meanLong)
waraLL
write.csv(waraLL, 'waraLL.csv')
# lat longs
waraLL <- waraPres %>% group_by(transect) %>%
summarise(site = first(site), species = first(species),
lat = first(lat2), long = first(long2),
LL = first(LL)) %>%
arrange(meanLat, meanLong)
waraLL
write.csv(waraLL, 'waraLL.csv')
waraLL <- waraPres %>% group_by(transect) %>%
summarise(site = first(site), species = first(species),
lat = first(lat2), long = first(long2),
LL = first(LL)) %>%
arrange(lat, long)
waraLL
write.csv(waraLL, 'waraLL.csv')
