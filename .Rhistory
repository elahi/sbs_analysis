# Get density limits for plotting the bayesian predictions
era_density_limits <- my_data %>% group_by(era) %>%
summarise_at(.vars = c("density_m2"),
.funs = funs(min_density = min, max_density = max))
# Filter prediction df
my_pred <- inner_join(my_pred, era_density_limits, by = "era") %>%
filter(x_predict >= min_density & x_predict <= max_density)
# Plot data
my_data %>%
ggplot(aes(density_m2, size_log, shape = era, color = era)) +
geom_point(alpha = 0.75, size = 1) +
# theme(legend.position = c(0.99, 0.99), legend.justification = c(0.99, 0.99)) +
# theme(legend.title = element_blank()) +
# theme(legend.key = element_rect(fill = "white")) +
theme(legend.position = "none") +
xlab(expression(paste("Density (no. ", m^-2, ")"))) +
ylab("Log size (mm)") +
guides(shape = FALSE) +
# geom_smooth(method = "lm") +
geom_line(data = my_pred, aes(x_predict, y_median, color = era)) +
geom_ribbon(data = my_pred, aes(x_predict, y = NULL, ymin = y_lower, ymax = y_upper, fill = era, color = NULL),
alpha = 0.5) +
# geom_ribbon(data = my_pred, aes(x_predict, y = NULL, ymin = y_lower_pred, ymax = y_upper_pred, fill = era, color = NULL),
#             alpha = 0.25) +
scale_color_manual(values = c(past_color, present_color)) +
scale_fill_manual(values = c(past_color, present_color)) +
scale_shape_manual(values = c(16, 1)) +
facet_wrap(~ species, scales = "free_x") +
geom_point(data = subset(my_data, era == "past"), alpha = 0.75, size = 1) +
scale_y_continuous(limits = c(0, 1.5))
}
add_my_legend <-  theme(legend.position = c(0.99, 0.99), legend.justification = c(0.99, 0.99)) +
theme(legend.title = element_blank()) +
theme(legend.key = element_rect(fill = "white"))
p1 <- plot_logsize_density(my_data = wara_means, my_pred = pred_chfu_means, past_color = "red")
p1
p2 <- plot_logsize_density(my_data = waraDF, my_pred = pred_chfu, past_color = "red")
p3 <- plot_logsize_density(my_data = hexDF, my_pred = pred_lodi, past_color = "red")
p4 <- plot_logsize_density(my_data = childsDF, my_pred = pred_like, past_color = "red")
plot_logsize_density_4panel <- plot_grid(p1 + add_my_legend,
p2, p3, p4,
labels = c("A", "B", "C", "D", ncol = 2))
save_plot("3_analyse_data/bayes_figs/plot_logsize_density_4panel.png", plot_logsize_density_4panel,
ncol = 2, nrow = 2, base_height = 3.5, base_width = 3.5)
add_my_legend <-  theme(legend.position = c(0.01, 0.01), legend.justification = c(0.01, 0.01)) +
theme(legend.title = element_blank()) +
theme(legend.key = element_rect(fill = "white"))
p1 <- plot_logsize_density(my_data = wara_means, my_pred = pred_chfu_means, past_color = "red")
p1
p2 <- plot_logsize_density(my_data = waraDF, my_pred = pred_chfu, past_color = "red")
p3 <- plot_logsize_density(my_data = hexDF, my_pred = pred_lodi, past_color = "red")
p4 <- plot_logsize_density(my_data = childsDF, my_pred = pred_like, past_color = "red")
plot_logsize_density_4panel <- plot_grid(p1 + add_my_legend,
p2, p3, p4,
labels = c("A", "B", "C", "D", ncol = 2))
save_plot("3_analyse_data/bayes_figs/plot_logsize_density_4panel.png", plot_logsize_density_4panel,
ncol = 2, nrow = 2, base_height = 3.5, base_width = 3.5)
plot_logsize_density <- function(my_data, my_pred, past_color = "darkgray", present_color = "black"){
# Get density limits for plotting the bayesian predictions
era_density_limits <- my_data %>% group_by(era) %>%
summarise_at(.vars = c("density_m2"),
.funs = funs(min_density = min, max_density = max))
# Filter prediction df
my_pred <- inner_join(my_pred, era_density_limits, by = "era") %>%
filter(x_predict >= min_density & x_predict <= max_density)
# Plot data
my_data %>%
ggplot(aes(density_m2, size_log, shape = era, color = era)) +
geom_point(alpha = 0.75, size = 1) +
# theme(legend.position = c(0.99, 0.99), legend.justification = c(0.99, 0.99)) +
# theme(legend.title = element_blank()) +
# theme(legend.key = element_rect(fill = "white")) +
theme(legend.position = "none") +
xlab(expression(paste("Density (no. ", m^-2, ")"))) +
ylab("Log size (mm)") +
guides(shape = FALSE) +
# geom_smooth(method = "lm") +
geom_line(data = my_pred, aes(x_predict, y_median, color = era)) +
geom_ribbon(data = my_pred, aes(x_predict, y = NULL, ymin = y_lower, ymax = y_upper, fill = era, color = NULL),
alpha = 0.5) +
# geom_ribbon(data = my_pred, aes(x_predict, y = NULL, ymin = y_lower_pred, ymax = y_upper_pred, fill = era, color = NULL),
#             alpha = 0.25) +
scale_color_manual(values = c(past_color, present_color)) +
scale_fill_manual(values = c(past_color, present_color)) +
scale_shape_manual(values = c(16, 1)) +
facet_wrap(~ species, scales = "free_x") +
geom_point(data = subset(my_data, era == "past"), alpha = 0.75, size = 1) +
scale_y_continuous(limits = c(0, 1.6))
}
add_my_legend <-  theme(legend.position = c(0.01, 0.01), legend.justification = c(0.01, 0.01)) +
theme(legend.title = element_blank()) +
theme(legend.key = element_rect(fill = "white"))
p1 <- plot_logsize_density(my_data = wara_means, my_pred = pred_chfu_means, past_color = "red")
p1
p2 <- plot_logsize_density(my_data = waraDF, my_pred = pred_chfu, past_color = "red")
p3 <- plot_logsize_density(my_data = hexDF, my_pred = pred_lodi, past_color = "red")
p4 <- plot_logsize_density(my_data = childsDF, my_pred = pred_like, past_color = "red")
plot_logsize_density_4panel <- plot_grid(p1 + add_my_legend,
p2, p3, p4,
labels = c("A", "B", "C", "D", ncol = 2))
save_plot("3_analyse_data/bayes_figs/plot_logsize_density_4panel.png", plot_logsize_density_4panel,
ncol = 2, nrow = 2, base_height = 3.5, base_width = 3.5)
plot_logsize_density <- function(my_data, my_pred, past_color = "darkgray", present_color = "black"){
# Get density limits for plotting the bayesian predictions
era_density_limits <- my_data %>% group_by(era) %>%
summarise_at(.vars = c("density_m2"),
.funs = funs(min_density = min, max_density = max))
# Filter prediction df
my_pred <- inner_join(my_pred, era_density_limits, by = "era") %>%
filter(x_predict >= min_density & x_predict <= max_density)
# Plot data
my_data %>%
ggplot(aes(density_m2, size_log, shape = era, color = era)) +
geom_point(alpha = 0.75, size = 1) +
# theme(legend.position = c(0.99, 0.99), legend.justification = c(0.99, 0.99)) +
# theme(legend.title = element_blank()) +
# theme(legend.key = element_rect(fill = "white")) +
theme(legend.position = "none") +
xlab(expression(paste("Density (no. ", m^-2, ")"))) +
ylab("Log size (mm)") +
guides(shape = FALSE) +
# geom_smooth(method = "lm") +
geom_line(data = my_pred, aes(x_predict, y_median, color = era)) +
geom_ribbon(data = my_pred, aes(x_predict, y = NULL, ymin = y_lower, ymax = y_upper, fill = era, color = NULL),
alpha = 0.5) +
# geom_ribbon(data = my_pred, aes(x_predict, y = NULL, ymin = y_lower_pred, ymax = y_upper_pred, fill = era, color = NULL),
#             alpha = 0.25) +
scale_color_manual(values = c(past_color, present_color)) +
scale_fill_manual(values = c(past_color, present_color)) +
scale_shape_manual(values = c(16, 16)) +
facet_wrap(~ species, scales = "free_x") +
geom_point(data = subset(my_data, era == "past"), alpha = 0.75, size = 1) +
scale_y_continuous(limits = c(0, 1.6))
}
add_my_legend <-  theme(legend.position = c(0.01, 0.01), legend.justification = c(0.01, 0.01)) +
theme(legend.title = element_blank()) +
theme(legend.key = element_rect(fill = "white"))
p1 <- plot_logsize_density(my_data = wara_means, my_pred = pred_chfu_means, past_color = "red")
p1
p2 <- plot_logsize_density(my_data = waraDF, my_pred = pred_chfu, past_color = "red")
p3 <- plot_logsize_density(my_data = hexDF, my_pred = pred_lodi, past_color = "red")
p4 <- plot_logsize_density(my_data = childsDF, my_pred = pred_like, past_color = "red")
plot_logsize_density_4panel <- plot_grid(p1 + add_my_legend,
p2, p3, p4,
labels = c("A", "B", "C", "D", ncol = 2))
save_plot("3_analyse_data/bayes_figs/plot_logsize_density_4panel.png", plot_logsize_density_4panel,
ncol = 2, nrow = 2, base_height = 3.5, base_width = 3.5)
# LODI
my_data <- hexDF
my_pred <- pred_lodi
summary(my_data)
plot_logsize_density <- function(my_data, my_pred, past_color = "darkgray", present_color = "black"){
# Get density limits for plotting the bayesian predictions
era_density_limits <- my_data %>% group_by(era) %>%
summarise_at(.vars = c("density_m2"),
.funs = funs(min_density = min, max_density = max))
# Filter prediction df
my_pred <- inner_join(my_pred, era_density_limits, by = "era") %>%
filter(x_predict >= min_density & x_predict <= max_density)
# Plot data
my_data %>%
ggplot(aes(density_m2, size_log, shape = era, color = era)) +
geom_point(alpha = 0.75, size = 1) +
# theme(legend.position = c(0.99, 0.99), legend.justification = c(0.99, 0.99)) +
# theme(legend.title = element_blank()) +
# theme(legend.key = element_rect(fill = "white")) +
theme(legend.position = "none") +
xlab(expression(paste("Density (no. ", m^-2, ")"))) +
ylab("Log size (mm)") +
guides(shape = FALSE) +
# geom_smooth(method = "lm") +
geom_line(data = my_pred, aes(x_predict, y_median, color = era)) +
geom_ribbon(data = my_pred, aes(x_predict, y = NULL, ymin = y_lower, ymax = y_upper, fill = era, color = NULL),
alpha = 0.5) +
# geom_ribbon(data = my_pred, aes(x_predict, y = NULL, ymin = y_lower_pred, ymax = y_upper_pred, fill = era, color = NULL),
#             alpha = 0.25) +
scale_color_manual(values = c(past_color, present_color)) +
scale_fill_manual(values = c(past_color, present_color)) +
scale_shape_manual(values = c(1, 1)) +
facet_wrap(~ species, scales = "free_x") +
geom_point(data = subset(my_data, era == "past"), alpha = 0.75, size = 1) +
scale_y_continuous(limits = c(0, 1.6))
}
add_my_legend <-  theme(legend.position = c(0.01, 0.01), legend.justification = c(0.01, 0.01)) +
theme(legend.title = element_blank()) +
theme(legend.key = element_rect(fill = "white"))
p1 <- plot_logsize_density(my_data = wara_means, my_pred = pred_chfu_means, past_color = "red")
p1
p2 <- plot_logsize_density(my_data = waraDF, my_pred = pred_chfu, past_color = "red")
p3 <- plot_logsize_density(my_data = hexDF, my_pred = pred_lodi, past_color = "red")
p4 <- plot_logsize_density(my_data = childsDF, my_pred = pred_like, past_color = "red")
plot_logsize_density_4panel <- plot_grid(p1 + add_my_legend,
p2, p3, p4,
labels = c("A", "B", "C", "D", ncol = 2))
save_plot("3_analyse_data/bayes_figs/plot_logsize_density_4panel.png", plot_logsize_density_4panel,
ncol = 2, nrow = 2, base_height = 3.5, base_width = 3.5)
plot_logsize_density <- function(my_data, my_pred, past_color = "darkgray", present_color = "black"){
# Get density limits for plotting the bayesian predictions
era_density_limits <- my_data %>% group_by(era) %>%
summarise_at(.vars = c("density_m2"),
.funs = funs(min_density = min, max_density = max))
# Filter prediction df
my_pred <- inner_join(my_pred, era_density_limits, by = "era") %>%
filter(x_predict >= min_density & x_predict <= max_density)
# Plot data
my_data %>%
ggplot(aes(density_m2, size_log, shape = era, color = era)) +
geom_point(alpha = 0.75, size = 1) +
# theme(legend.position = c(0.99, 0.99), legend.justification = c(0.99, 0.99)) +
# theme(legend.title = element_blank()) +
# theme(legend.key = element_rect(fill = "white")) +
theme(legend.position = "none") +
xlab(expression(paste("Density (no. ", m^-2, ")"))) +
ylab("Log size (mm)") +
guides(shape = FALSE) +
# geom_smooth(method = "lm") +
geom_line(data = my_pred, aes(x_predict, y_median, color = era)) +
geom_ribbon(data = my_pred, aes(x_predict, y = NULL, ymin = y_lower, ymax = y_upper, fill = era, color = NULL),
alpha = 0.5) +
geom_ribbon(data = my_pred, aes(x_predict, y = NULL, ymin = y_lower_pred, ymax = y_upper_pred, fill = era, color = NULL),
alpha = 0.25) +
scale_color_manual(values = c(past_color, present_color)) +
scale_fill_manual(values = c(past_color, present_color)) +
scale_shape_manual(values = c(1, 1)) +
facet_wrap(~ species, scales = "free_x") +
geom_point(data = subset(my_data, era == "past"), alpha = 0.75, size = 1) +
scale_y_continuous(limits = c(0, 1.6))
}
add_my_legend <-  theme(legend.position = c(0.01, 0.01), legend.justification = c(0.01, 0.01)) +
theme(legend.title = element_blank()) +
theme(legend.key = element_rect(fill = "white"))
p1 <- plot_logsize_density(my_data = wara_means, my_pred = pred_chfu_means, past_color = "red")
p1
p2 <- plot_logsize_density(my_data = waraDF, my_pred = pred_chfu, past_color = "red")
p3 <- plot_logsize_density(my_data = hexDF, my_pred = pred_lodi, past_color = "red")
p4 <- plot_logsize_density(my_data = childsDF, my_pred = pred_like, past_color = "red")
plot_logsize_density_4panel <- plot_grid(p1 + add_my_legend,
p2, p3, p4,
labels = c("A", "B", "C", "D", ncol = 2))
save_plot("3_analyse_data/bayes_figs/plot_logsize_density_4panel.png", plot_logsize_density_4panel,
ncol = 2, nrow = 2, base_height = 3.5, base_width = 3.5)
plot_logsize_density <- function(my_data, my_pred, past_color = "darkgray", present_color = "black"){
# Get density limits for plotting the bayesian predictions
era_density_limits <- my_data %>% group_by(era) %>%
summarise_at(.vars = c("density_m2"),
.funs = funs(min_density = min, max_density = max))
# Filter prediction df
my_pred <- inner_join(my_pred, era_density_limits, by = "era") %>%
filter(x_predict >= min_density & x_predict <= max_density)
# Plot data
my_data %>%
ggplot(aes(density_m2, size_log, shape = era, color = era)) +
geom_point(alpha = 0.75, size = 1) +
# theme(legend.position = c(0.99, 0.99), legend.justification = c(0.99, 0.99)) +
# theme(legend.title = element_blank()) +
# theme(legend.key = element_rect(fill = "white")) +
theme(legend.position = "none") +
xlab(expression(paste("Density (no. ", m^-2, ")"))) +
ylab("Log size (mm)") +
guides(shape = FALSE) +
# geom_smooth(method = "lm") +
geom_line(data = my_pred, aes(x_predict, y_median, color = era)) +
geom_ribbon(data = my_pred, aes(x_predict, y = NULL, ymin = y_lower, ymax = y_upper, fill = era, color = NULL),
alpha = 0.5) +
# geom_ribbon(data = my_pred, aes(x_predict, y = NULL, ymin = y_lower_pred, ymax = y_upper_pred, fill = era, color = NULL),
#             alpha = 0.25) +
scale_color_manual(values = c(past_color, present_color)) +
scale_fill_manual(values = c(past_color, present_color)) +
scale_shape_manual(values = c(1, 1)) +
facet_wrap(~ species, scales = "free_x") +
geom_point(data = subset(my_data, era == "past"), alpha = 0.75, size = 1) +
scale_y_continuous(limits = c(0, 1.6))
}
add_my_legend <-  theme(legend.position = c(0.01, 0.01), legend.justification = c(0.01, 0.01)) +
theme(legend.title = element_blank()) +
theme(legend.key = element_rect(fill = "white"))
p1 <- plot_logsize_density(my_data = wara_means, my_pred = pred_chfu_means, past_color = "red")
p1
p2 <- plot_logsize_density(my_data = waraDF, my_pred = pred_chfu, past_color = "red")
p3 <- plot_logsize_density(my_data = hexDF, my_pred = pred_lodi, past_color = "red")
p4 <- plot_logsize_density(my_data = childsDF, my_pred = pred_like, past_color = "red")
plot_logsize_density_4panel <- plot_grid(p1 + add_my_legend,
p2, p3, p4,
labels = c("A", "B", "C", "D", ncol = 2))
save_plot("3_analyse_data/bayes_figs/plot_logsize_density_4panel.png", plot_logsize_density_4panel,
ncol = 2, nrow = 2, base_height = 3.5, base_width = 3.5)
rm(list=ls(all=TRUE))
library(cowplot)
options(tibble.print_max = 50, tibble.print_min = 10)
theme_set(theme_bw(base_size = 12) +
theme(strip.background = element_blank(),
strip.text = element_text(face = "italic"),
panel.grid = element_blank()))
## Load bayesian analysis results
pred_df <- read.csv("3_analyse_data/bayes_output/logsize_density/coda_df_all.csv")
head(pred_df)
## Load bayesian analysis results
coda_df <- read.csv("3_analyse_data/bayes_output/logsize_density/coda_df_all.csv")
## Load bayesian analysis results
coda_df_logsize_density <- read.csv("3_analyse_data/bayes_output/logsize_density/coda_df_all.csv")
coda_df_logsize <- read.csv("3_analyse_data/bayes_output/logsize/coda_df_all.csv")
coda_df_logsize <- read.csv("3_analyse_data/bayes_output/logsize/coda_df_all.csv") %>%
mutate(model = "Without density")
coda_df_all <- rbind(coda_df_logsize, coda_df_logsize_density)
coda_df_logsize_density
## Load bayesian analysis results
coda_df_logsize_density <- read.csv("3_analyse_data/bayes_output/logsize_density/coda_df_all.csv") %>%
mutate(model = "With density")
coda_df_logsize_density
names(coda_df_logsize)
names(coda_df_logsize_density)
coda_df_all <- rbind(coda_df_logsize, coda_df_logsize_density)
# jitter points a bit
jitter_value = 0.01
coda_df_all <- coda_df_all %>%
mutate(quant = as.numeric(quant),
quant2 = ifelse(sp == "CHFU", quant - jitter_value,
ifelse(sp == "LIKE", quant + jitter_value, quant)))
coda_df_all %>%
filter(param == "prop_change") %>%
filter(sp != "CHFU_means") %>%
ggplot(aes(quant2, X50., shape = sp)) +
geom_point() +
geom_line(aes(linetype = sp)) +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Size threshold (quantile of past size)") +
theme(legend.position = "top") +
coord_cartesian(ylim = c(-0.4, 0.4))
coda_df_all %>%
filter(param == "prop_change") %>%
filter(sp != "CHFU_means") %>%
ggplot(aes(quant2, X50., shape = sp)) +
geom_point() +
geom_line(aes(linetype = sp)) +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Size threshold (quantile of past size)") +
theme(legend.position = "top") +
coord_cartesian(ylim = c(-0.4, 0.4)) +
facet_wrap(~ model)
?element_text
theme_set(theme_bw(base_size = 12) +
theme(strip.background = element_blank(),
strip.text = element_text(face = "plain"),
panel.grid = element_blank()))
coda_df_all %>%
filter(param == "prop_change") %>%
filter(sp != "CHFU_means") %>%
ggplot(aes(quant2, X50., shape = sp)) +
geom_point() +
geom_line(aes(linetype = sp)) +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Size threshold (quantile of past size)") +
theme(legend.position = "top") +
coord_cartesian(ylim = c(-0.4, 0.4)) +
facet_wrap(~ model)
coda_df_all %>%
filter(param == "prop_change") %>%
filter(sp != "CHFU_means") %>%
ggplot(aes(quant2, X50., shape = sp, color = model)) +
geom_point() +
geom_line(aes(linetype = sp)) +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Size threshold (quantile of past size)") +
theme(legend.position = "top") +
coord_cartesian(ylim = c(-0.4, 0.4))
theme_set(theme_bw(base_size = 12) +
theme(strip.background = element_blank(),
strip.text = element_text(face = "italic"),
panel.grid = element_blank()))
coda_df_all %>%
filter(param == "prop_change") %>%
filter(sp != "CHFU_means") %>%
ggplot(aes(quant2, X50., color = model)) +
geom_point() +
geom_line(aes(linetype = sp)) +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Size threshold (quantile of past size)") +
theme(legend.position = "top") +
coord_cartesian(ylim = c(-0.4, 0.4)) +
facet_wrap(~ species)
coda_df_all
species_df <- data.frame(sp = c("CHFU", "LODI", "LIKE"),
species = c("Chlorostoma funebralis", "Lottia digitalis", "Littorina keenae"))
coda_df_all <- left_join(coda_df_all, species_df, by = "sp")
coda_df_all %>%
filter(param == "prop_change") %>%
filter(sp != "CHFU_means") %>%
ggplot(aes(quant2, X50., color = model)) +
geom_point() +
geom_line(aes(linetype = sp)) +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Size threshold (quantile of past size)") +
theme(legend.position = "top") +
coord_cartesian(ylim = c(-0.4, 0.4)) +
facet_wrap(~ species)
coda_df_all %>%
filter(param == "prop_change") %>%
filter(sp != "CHFU_means") %>%
ggplot(aes(quant2, X50., color = model)) +
geom_point() +
geom_line(aes(linetype = model)) +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Size threshold (quantile of past size)") +
theme(legend.position = "top") +
coord_cartesian(ylim = c(-0.4, 0.4)) +
facet_wrap(~ species)
coda_df_all %>%
filter(param == "prop_change") %>%
filter(sp != "CHFU_means") %>%
ggplot(aes(quant2, X50., color = model)) +
geom_point() +
geom_line(aes(linetype = model)) +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Size threshold (quantile of past size)") +
theme(legend.position = "top") +
theme(legend.title = element_blank()) +
theme(legend.position = c(0.99, 0.99), legend.justification = c(0.99, 0.99)) +
coord_cartesian(ylim = c(-0.4, 0.4)) +
facet_wrap(~ species)
coda_df_all %>%
filter(param == "prop_change") %>%
filter(sp != "CHFU_means") %>%
ggplot(aes(quant, X50., color = model)) +
geom_point() +
geom_line(aes(linetype = model)) +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Size threshold (quantile of past size)") +
theme(legend.position = "top") +
theme(legend.title = element_blank()) +
theme(legend.position = c(0.99, 0.99), legend.justification = c(0.99, 0.99)) +
coord_cartesian(ylim = c(-0.4, 0.4)) +
facet_wrap(~ species)
coda_df_all %>%
filter(param == "prop_change") %>%
filter(sp != "CHFU_means") %>%
ggplot(aes(quant2, X50., color = model)) +
geom_point() +
geom_line(aes(linetype = model)) +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Size threshold (quantile of past size)") +
theme(legend.position = "top") +
theme(legend.title = element_blank()) +
theme(legend.position = c(0.99, 0.99), legend.justification = c(0.99, 0.99)) +
coord_cartesian(ylim = c(-0.4, 0.4)) +
facet_wrap(~ species)
coda_df_all %>%
filter(param == "prop_change") %>%
filter(sp != "CHFU_means") %>%
ggplot(aes(quant, X50., color = model)) +
geom_point() +
geom_line(aes(linetype = model)) +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Size threshold (quantile of past size)") +
theme(legend.position = "top") +
theme(legend.title = element_blank()) +
theme(legend.position = c(0.99, 0.99), legend.justification = c(0.99, 0.99)) +
coord_cartesian(ylim = c(-0.4, 0.4)) +
facet_wrap(~ species)
coda_df_all %>%
filter(param == "prop_change") %>%
filter(sp != "CHFU_means") %>%
ggplot(aes(quant, X50., color = model)) +
geom_point() +
geom_line(aes(linetype = model)) +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Size threshold (quantile of past size)") +
theme(legend.position = "top") +
theme(legend.title = element_blank()) +
theme(legend.position = c(0.99, 0.99), legend.justification = c(0.99, 0.99)) +
coord_cartesian(ylim = c(-0.4, 0.2)) +
facet_wrap(~ species)
ggsave("3_analyse_data/bayes_figs/logsize_prop_change_2panel.png", height = 3.5, width = 7)
coda_df_all %>%
filter(param == "prop_change") %>%
filter(sp != "CHFU_means") %>%
ggplot(aes(quant, X50., color = model)) +
geom_point() +
geom_line(aes(linetype = model)) +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Size threshold (quantile of past size)") +
theme(legend.position = "top") +
theme(legend.title = element_blank()) +
theme(legend.position = c(0.99, 0.99), legend.justification = c(0.99, 0.99)) +
coord_cartesian(ylim = c(-0.4, 0.4)) +
facet_wrap(~ species)
ggsave("3_analyse_data/bayes_figs/logsize_prop_change_2panel.png", height = 3.5, width = 7)
