inits = list(
list(
alpha = runif(1, 0, 30),
beta = runif(1, -10, 10),
sigma = 1),
list(
alpha = runif(1, 0, 30),
beta = runif(1, -10, 10),
sigma = 1)
)
}
## JAGS model
sink("sbs_bayes/models/pooled_lognormal_JAGS.R")
cat("
model{
# priors
alpha ~ dnorm(0, 1/100^2)
beta ~ dnorm(0, 1/10^2)
sigma ~ dunif(0, 100)
tau <- 1/sigma^2
# likelihood
for (i in 1:k){
mu[i] <- alpha + beta * era[i]
w[i]  ~ dexp(tau) # exponential distribution
me[i] <- (1 - 2 * p) / (p * (1 - p)) * w[i] + mu[i] # if p = 0.5, then this just leaves mu[i]
pe[i] <- (p * (1 - p) * tau) / (2 * w[i]) #
#y[i]  ~ dnorm(me[i], pe[i])
y[i] ~ dnorm(me[i], pe[i])
y.new[i] ~ dnorm(mu[i], tau)
sq.error.data[i] <- (y[i] - mu[i])^2
sq.error.new[i] <- (y.new[i] - mu[i])^2
}
# bayesian p-values
sd.data <- sd(y)
sd.new <- sd(y.new)
p.sd <- step(sd.new - sd.data)
mean.data <- mean(y)
mean.new  <- mean(y.new)
p.mean <- step(mean.new - mean.data)
discrep.data <- sum(sq.error.data)
discrep.new <- sum(sq.error.new)
p.discrep <- step(discrep.new - discrep.data)
# Check sink
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/pooled_lognormal_JAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
return(jm)
}
jm = pooled_model(dat = dat, iter_adapt = n.adapt, iter_update = n.update, n_chains = n_chains)
zm = coda.samples(jm, variable.names = c("alpha", "beta", "sigma"),
n.iter = n.iter, n.thin = 1)
summary(zm)
exp(2.7)
summary(zm)$stat[2]
exp(-3)
## With quantile - p formula
pooled_model <- function(dat, iter_adapt, iter_update, n_chains){
# load jags
library(rjags)
## Get data
data = list(
y = as.double(log(dat$size1mm)),
k = as.double(length(dat$size1mm)),
thc = as.double(dat$thc),
era = as.double(dat$eraJ),
p = 0.75
)
## Iterations
n.adapt = iter_adapt
n.update = iter_update
## Inits
if(n_chains == 1){
inits = list(
alpha = runif(1, 0, 5),
beta = runif(1, -10, 10),
sigma = 1)
}
if(n_chains == 2){
inits = list(
list(
alpha = runif(1, 0, 5),
beta = runif(1, -10, 10),
sigma = 1),
list(
alpha = runif(1, 0, 5),
beta = runif(1, -10, 10),
sigma = 1)
)
}
## JAGS model
sink("sbs_bayes/models/pooled_lognormal_JAGS.R")
cat("
model{
# priors
alpha ~ dnorm(0, 1/5^2)
beta ~ dnorm(0, 1/10^2)
sigma ~ dunif(0, 100)
tau <- 1/sigma^2
# likelihood
for (i in 1:k){
mu[i] <- alpha + beta * era[i]
w[i]  ~ dexp(tau) # exponential distribution
me[i] <- (1 - 2 * p) / (p * (1 - p)) * w[i] + mu[i] # if p = 0.5, then this just leaves mu[i]
pe[i] <- (p * (1 - p) * tau) / (2 * w[i]) #
#y[i]  ~ dnorm(me[i], pe[i])
y[i] ~ dnorm(me[i], pe[i])
y.new[i] ~ dnorm(mu[i], tau)
sq.error.data[i] <- (y[i] - mu[i])^2
sq.error.new[i] <- (y.new[i] - mu[i])^2
}
# bayesian p-values
sd.data <- sd(y)
sd.new <- sd(y.new)
p.sd <- step(sd.new - sd.data)
mean.data <- mean(y)
mean.new  <- mean(y.new)
p.mean <- step(mean.new - mean.data)
discrep.data <- sum(sq.error.data)
discrep.new <- sum(sq.error.new)
p.discrep <- step(discrep.new - discrep.data)
# Check sink
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/pooled_lognormal_JAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
return(jm)
}
jm = pooled_model(dat = dat, iter_adapt = n.adapt, iter_update = n.update, n_chains = n_chains)
zm = coda.samples(jm, variable.names = c("alpha", "beta", "sigma"),
n.iter = n.iter, n.thin = 1)
summary(zm)
exp(2.7)
exp(summary(zm)$stat[1]) # size intercept (past)
summary(zm)$stat[2]
dat %>% group_by(era) %>% summarise(median(size1mm))
median_change(dat)
plot(zm)
gelman.diag(zm, multivariate = F)
mean(zj$p.mean)
zj = jags.samples(jm, variable.names = c("alpha", "beta", "sigma", "y.new", "p.mean", "p.sd", "p.discrep"),
n.iter = n.iter, n.thin = 1)
mean(zj$p.mean)
mean(zj$p.sd)
mean(zj$p.discrep)
hist(dat$size1mm, breaks = 20, freq=FALSE)
lines(density(zj$y.new), col="red")
hist(log(dat$size1mm), breaks = 20, freq=FALSE)
lines(density(zj$y.new), col="red")
pooled_model <- function(dat, iter_adapt, iter_update, n_chains){
# load jags
library(rjags)
## Get data
data = list(
y = as.double(dat$size1mm),
k = as.double(length(dat$size1mm)),
thc = as.double(dat$thc),
era = as.double(dat$eraJ)
)
## Iterations
n.adapt = iter_adapt
n.update = iter_update
## Inits
if(n_chains == 1){
inits = list(
alpha = runif(1, 0, 30),
beta = runif(1, -10, 10),
sigma = 1)
}
if(n_chains == 2){
inits = list(
list(
alpha = runif(1, 0, 30),
beta = runif(1, -10, 10),
sigma = 1),
list(
alpha = runif(1, 0, 30),
beta = runif(1, -10, 10),
sigma = 1)
)
}
## JAGS model
sink("sbs_bayes/models/pooled_lognormal_JAGS.R")
cat("
model{
# priors
alpha ~ dnorm(0, 1/100^2)
beta ~ dnorm(0, 1/10^2)
sigma ~ dunif(0, 100)
tau <- 1/sigma^2
# likelihood
for (i in 1:k){
mu[i] <- exp(alpha + beta * era[i])
y[i] ~ dlnorm(log(mu[i]) - 0.67*sigma, tau)
y.new[i] ~ dlnorm(log(mu[i]) - 0.67*sigma, tau)
sq.error.data[i] <- (y[i] - mu[i])^2
sq.error.new[i] <- (y.new[i] - mu[i])^2
}
# bayesian p-values
sd.data <- sd(y)
sd.new <- sd(y.new)
p.sd <- step(sd.new - sd.data)
mean.data <- mean(y)
mean.new  <- mean(y.new)
p.mean <- step(mean.new - mean.data)
discrep.data <- sum(sq.error.data)
discrep.new <- sum(sq.error.new)
p.discrep <- step(discrep.new - discrep.data)
# Check sink
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/pooled_lognormal_JAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
return(jm)
}
jm = pooled_model(dat = dat, iter_adapt = n.adapt, iter_update = n.update, n_chains = n_chains)
zm = coda.samples(jm, variable.names = c("alpha", "beta", "sigma"),
n.iter = n.iter, n.thin = 1)
zj = jags.samples(jm, variable.names = c("alpha", "beta", "sigma", "y.new", "p.mean", "p.sd", "p.discrep"),
n.iter = n.iter, n.thin = 1)
summary(zm)
exp(summary(zm)$stat[1]) # size intercept (past)
summary(zm)$stat[2]
dat %>% group_by(era) %>% summarise(median(size1mm))
median_change(dat)
plot(zm)
gelman.diag(zm, multivariate = F)
mean(zj$p.mean)
mean(zj$p.sd)
mean(zj$p.discrep)
hist(log(dat$size1mm), breaks = 20, freq=FALSE)
lines(density(zj$y.new), col="red")
hist(dat$size1mm, breaks = 20, freq=FALSE)
lines(density(zj$y.new), col="red")
################################################################################
##' @title Pooled model - tidal height - lognormal distribution
##'
##' @author Robin Elahi
##' @contact elahi.robin@gmail.com
##'
##' @date 2017-09-04
##'
##' @log
################################################################################
# rm(list=ls(all=TRUE))
pooled_model_thc <- function(dat, iter_adapt, iter_update, n_chains){
# load jags
library(rjags)
## Get data
data = list(
y = as.double(dat$size1mm),
k = as.double(length(dat$size1mm)),
thc = as.double(dat$thc),
era = as.double(dat$eraJ),
thc_predict = as.double(thc_predict),
era_predict = as.double(era_predict)
)
## Iterations
n.adapt = iter_adapt
n.update = iter_update
## Inits
if(n_chains == 1){
inits = list(
alpha = runif(1, 0, 30),
beta = runif(1, -10, 10),
sigma = 1,
eta = 2,
kappa = 1)
}
if(n_chains == 2){
inits = list(
list(
alpha = runif(1, 0, 30),
beta = runif(1, -10, 10),
sigma = 1,
eta = 2,
kappa = 1),
list(
alpha = runif(1, 0, 30),
beta = runif(1, -10, 10),
sigma = 1,
eta = -1,
kappa = -3)
)
}
## JAGS model
sink("sbs_bayes/models/pooled_lognormal_thc_JAGS.R")
cat("
model{
# priors
alpha ~ dnorm(0, 1/100^2)
beta ~ dnorm(0, 1/10^2)
sigma ~ dunif(0, 100)
tau <- 1/sigma^2
eta ~ dnorm(0, 1/10^2)
kappa ~ dnorm(0, 1/10^2)
# likelihood
for (i in 1:k){
mu[i] <- exp(alpha + beta*era[i] + eta*thc[i] + kappa*thc[i]*era[i])
y[i] ~ dlnorm(log(mu[i]) - 0.67*sigma, tau)
y.new[i] ~ dlnorm(log(mu[i]) - 0.67*sigma, tau)
sq.error.data[i] <- (y[i] - mu[i])^2
sq.error.new[i] <- (y.new[i] - mu[i])^2
}
# bayesian p-values
sd.data <- sd(y)
sd.new <- sd(y.new)
p.sd <- step(sd.new - sd.data)
mean.data <- mean(y)
mean.new  <- mean(y.new)
p.mean <- step(mean.new - mean.data)
discrep.data <- sum(sq.error.data)
discrep.new <- sum(sq.error.new)
p.discrep <- step(discrep.new - discrep.data)
# Derived quantities
for(j in 1:length(thc_predict)){
y_pred[j] <- exp(alpha + beta*era_predict[j] + eta*thc_predict[j] + kappa*thc_predict[j]*era_predict[j])
beta_pred[j] <- log(y_pred[j]) - alpha - eta*thc_predict[j]
}
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/pooled_lognormal_thc_JAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
return(jm)
}
era_predict <- c(rep(0, length(thc_predict)), rep(1, length(thc_predict)))
thc_predict <- rep(thc_predict, 2)
dat <- hexDF
dat <- childsDF
start_time <- proc.time()
jm = pooled_model_thc(dat = dat, iter_adapt = n.adapt, iter_update = n.update, n_chains = n_chains)
zm = coda.samples(jm, variable.names = c("alpha", "beta", "sigma", "eta", "kappa"),
n.iter = n.iter, n.thin = 1)
zj = jags.samples(jm, variable.names = c("alpha", "beta", "sigma", "eta", "kappa",
"y.new", "p.mean", "p.sd", "p.discrep",
"y_pred", "beta_pred"), n.iter = n.iter, n.thin = 1)
end_time <- proc.time()
end_time - start_time
#Produce a summary table for the parameters.
summary(zm)
dat %>% group_by(era) %>% summarise(median(size1mm))
exp(2.44)
plot(zm)
gelman.diag(zm, multivariate = F)
mean(zj$p.mean)
mean(zj$p.sd)
mean(zj$p.discrep)
hist(dat$size1mm, breaks = 20, freq=FALSE)
lines(density(zj$y.new), col="red")
coda_summary <- summary(zm)
childs_coda_quantile <- data.frame(coda_summary$quantile) %>%
mutate(sp = "LIKE",
param = rownames(coda_summary$quantile))
y <- summary(zj$y_pred, quantile, c(.025, .5, .975))$stat
y <- data.frame(t(y))
x <- data.frame(thc_predict, era_predict)
xy <- cbind(x, y) %>%
mutate(era = ifelse(era_predict == 0, "past", "present"),
th = thc_predict + mu_th,
size_median = exp(X50.),
size_lower = exp(X2.5.),
size_upper = exp(X97.5.))
xy %>%
filter(th > 2 & th < 8) %>%
ggplot(aes(x = th, y = X50., color = era)) +
geom_line() +
geom_ribbon(aes(ymin = X2.5., ymax = X97.5., color = NULL, group = era),
fill = "gray", alpha = 0.5) +
geom_jitter(data = dat, aes(sample_area_tidal_ht, size1mm, color = era), alpha = 0.5)
y <- summary(zj$beta_pred, quantile, c(.025, .5, .975))$stat
y <- data.frame(t(y))
x <- data.frame(thc_predict, era_predict)
xy <- cbind(x, y) %>%
mutate(era = ifelse(era_predict == 0, "past", "present"),
th = thc_predict + mu_th,
size_median = exp(X50.),
size_lower = exp(X2.5.),
size_upper = exp(X97.5.))
xy %>%
filter(era == "present") %>%
filter(th > 2 & th < 8) %>%
ggplot(aes(x = th, y = X50., color = era)) +
geom_line() +
geom_ribbon(aes(ymin = X2.5., ymax = X97.5., color = NULL, group = era),
fill = "gray", alpha = 0.5) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
dat <- waraDF
dat <- childsDF
################################################################################
##' @title Pooled model - tidal height - lognormal distribution
##'
##' @author Robin Elahi
##' @contact elahi.robin@gmail.com
##'
##' @date 2017-09-04
##'
##' @log
################################################################################
# rm(list=ls(all=TRUE))
pooled_model_thc <- function(dat, iter_adapt, iter_update, n_chains){
# load jags
library(rjags)
## Get data
data = list(
y = as.double(dat$size1mm),
k = as.double(length(dat$size1mm)),
thc = as.double(dat$thc),
era = as.double(dat$eraJ),
thc_predict = as.double(thc_predict),
era_predict = as.double(era_predict)
)
## Iterations
n.adapt = iter_adapt
n.update = iter_update
## Inits
if(n_chains == 1){
inits = list(
alpha = runif(1, 0, 30),
beta = runif(1, -10, 10),
sigma = 1,
eta = 2,
kappa = 1)
}
if(n_chains == 2){
inits = list(
list(
alpha = runif(1, 0, 30),
beta = runif(1, -10, 10),
sigma = 1,
eta = 2,
kappa = 1),
list(
alpha = runif(1, 0, 30),
beta = runif(1, -10, 10),
sigma = 1,
eta = -1,
kappa = -3)
)
}
## JAGS model
sink("sbs_bayes/models/pooled_lognormal_thc_JAGS.R")
cat("
model{
# priors
alpha ~ dnorm(0, 1/100^2)
beta ~ dnorm(0, 1/10^2)
sigma ~ dunif(0, 100)
tau <- 1/sigma^2
eta ~ dnorm(0, 1/10^2)
kappa ~ dnorm(0, 1/10^2)
# likelihood
for (i in 1:k){
mu[i] <- exp(alpha + beta*era[i] + eta*thc[i] + kappa*thc[i]*era[i])
y[i] ~ dlnorm(log(mu[i]), tau)
y.new[i] ~ dlnorm(log(mu[i]), tau)
#y[i] ~ dlnorm(log(mu[i]) - 0.67*sigma, tau)
#y.new[i] ~ dlnorm(log(mu[i]) - 0.67*sigma, tau)
sq.error.data[i] <- (y[i] - mu[i])^2
sq.error.new[i] <- (y.new[i] - mu[i])^2
}
# bayesian p-values
sd.data <- sd(y)
sd.new <- sd(y.new)
p.sd <- step(sd.new - sd.data)
mean.data <- mean(y)
mean.new  <- mean(y.new)
p.mean <- step(mean.new - mean.data)
discrep.data <- sum(sq.error.data)
discrep.new <- sum(sq.error.new)
p.discrep <- step(discrep.new - discrep.data)
# Derived quantities
for(j in 1:length(thc_predict)){
y_pred[j] <- exp(alpha + beta*era_predict[j] + eta*thc_predict[j] + kappa*thc_predict[j]*era_predict[j])
beta_pred[j] <- log(y_pred[j]) - alpha - eta*thc_predict[j]
}
}
", fill = TRUE)
sink()
jm = jags.model("sbs_bayes/models/pooled_lognormal_thc_JAGS.R", data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
return(jm)
}
start_time <- proc.time()
jm = pooled_model_thc(dat = dat, iter_adapt = n.adapt, iter_update = n.update, n_chains = n_chains)
zm = coda.samples(jm, variable.names = c("alpha", "beta", "sigma", "eta", "kappa"),
n.iter = n.iter, n.thin = 1)
zj = jags.samples(jm, variable.names = c("alpha", "beta", "sigma", "eta", "kappa",
"y.new", "p.mean", "p.sd", "p.discrep",
"y_pred", "beta_pred"), n.iter = n.iter, n.thin = 1)
end_time <- proc.time()
end_time - start_time
#Produce a summary table for the parameters.
summary(zm)
exp(2.19)
dat %>% group_by(era) %>% summarise(median(size1mm))
median_change(dat)
quantile(childsPast)
quantile(childsPast, na.rm = TRUE
)
quantile(childsPast$size1mm, na.rm = TRUE)
quantile(childsPres$size1mm, na.rm = TRUE)
exp(2.44)
exp(2.19)
