theme(legend.justification = c(1, 1), legend.position = c(0.75, 0.25),
legend.text = element_text(size = 10), legend.title = element_text(size = 10))
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "fixed", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density") +
theme(legend.justification = c(1, 1), legend.position = c(0.95, 0.15),
legend.text = element_text(size = 10), legend.title = element_text(size = 10))
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "fixed", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density") +
theme(legend.justification = c(1, 1), legend.position = c(0.95, 0.2),
legend.text = element_text(size = 10), legend.title = element_text(size = 10))
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "fixed", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density") +
theme(legend.justification = c(1, 1), legend.position = c(0.97, 0.25),
legend.text = element_text(size = 10), legend.title = element_text(size = 10))
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "fixed", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density") +
theme(legend.justification = c(1, 1), legend.position = c(0.97, 0.23),
legend.text = element_text(size = 10), legend.title = element_text(size = 10))
ggsave("./figs/sbs_fig2.pdf", width = 3, height = 6)
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "fixed", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density") +
theme(legend.justification = c(1, 1), legend.position = c(0.97, 0.23),
legend.text = element_text(size = 6), legend.title = element_text(size = 6))
ggsave("./figs/sbs_fig2.pdf", width = 3, height = 6)
ggplot(chil,  aes(x = size1mm)) +
geom_density(aes(color = era)) +
facet_wrap(~ tideHT, scales = "fixed", nrow = 4) +
xlab("Size (mm)") + ylab("Probability density") +
theme(legend.justification = c(1, 1), legend.position = c(0.97, 0.23),
legend.text = element_text(size = 6), legend.title = element_text(size = 6)) +
ggtitle("Littorina keenae")
ggsave("./figs/sbs_fig2.pdf", width = 3, height = 6)
ggsave("./figs/sbs_fig2.pdf", width = 3.5, height = 7)
dat <- read.csv("./output/sbsMaster.csv", na.strings = "NA")
summary(dat)
# change ft to meters
range(dat$tideHTm, na.rm = TRUE)
dat$tideHTm <- dat$tideHTm/3.28084
###############################################################
# Littorina keenae
childsDF <- droplevels(filter(dat, sp == "LIKE"))
summary(childsDF)
childsPast <- childsDF %>% filter(era == "past")
childsPres <- childsDF %>% filter(era == "present")
# exclude zoneD
childsSub <- childsDF[childsDF$nest1 != "zoneD", ]
childsSubPres <- childsSub %>% filter(era == "present")
childsSubPast <- childsSub %>% filter(era == "past")
###############################################################
# Chlorostoma funebralis
waraDF <- droplevels(filter(dat, sp == "CHFU"))
summary(waraDF)
waraDF <- droplevels(waraDF[complete.cases(waraDF$size1mm), ])
waraPast <- waraDF %>% filter(era == "past")
waraPres <- waraDF %>% filter(era == "present")
###############################################################
# Lottia digitalis
hexDF <- droplevels(filter(dat, sp == "LODI"))
summary(hexDF)
# truncate to > 5.95mm
hexSub <- hexDF %>% filter(size1mm > 5.95)
with(hexSub, table(era, nest1, site))
with(hexSub, table(era, site))
# use subsetted data (with truncation)
hexPast <- hexSub %>% filter(era == "past")
hexPres <- hexSub %>% filter(era == "present")
####################################################
####################################################
####################################################
# Figure 1
range(childsPres$tideHTm, na.rm = TRUE)
range(waraPres$tideHTm, na.rm = TRUE)
range(hexPres$tideHTm, na.rm = TRUE)
names(chil)
randF <- function(x) return(as.factor(paste(x$nest1, x$nest2, sep="_")))
chil$rand1 <- randF(chil)
unique(chil$rand1)
names(chil)
head(chil)
mod1 <- lmer(size1mm ~ era*nest1 + (era|rand1),
data = chil)
randF <- function(x) return(as.factor(paste(x$nest1, x$nest2, sep="_")))
chil$rand1 <- randF(chil)
unique(chil$rand1)
### quick model
mod1 <- lmer(size1mm ~ era*nest1 + (era|rand1),
data = chil)
randF <- function(x) return(as.factor(paste(x$era, x$nest1, x$nest2 sep="_")))
chil$rand1 <- randF(chil)
unique(chil$rand1)
randF <- function(x) return(as.factor(paste(x$era, x$nest1, x$nest2 sep="_")))
chil$rand1 <- randF(chil)
randF <- function(x) return(as.factor(paste(x$era, x$nest1, x$nest2, sep="_")))
chil$rand1 <- randF(chil)
library(ggplot2)
theme_set(theme_classic(base_size = 8))
library(dplyr)
rm(list=ls(all=TRUE))
# plotting functions
source("./R/multiplotF.R")
# load modern data
dat <- read.csv("./output/sbsMaster.csv", na.strings = "NA")
summary(dat)
# change ft to meters
range(dat$tideHTm, na.rm = TRUE)
dat$tideHTm <- dat$tideHTm/3.28084
###############################################################
# Littorina keenae
childsDF <- droplevels(filter(dat, sp == "LIKE"))
summary(childsDF)
childsPast <- childsDF %>% filter(era == "past")
childsPres <- childsDF %>% filter(era == "present")
# exclude zoneD
childsSub <- childsDF[childsDF$nest1 != "zoneD", ]
childsSubPres <- childsSub %>% filter(era == "present")
childsSubPast <- childsSub %>% filter(era == "past")
unique(childsDF$lat)
unique(childsDF$long)
waraDF <- droplevels(filter(dat, sp == "CHFU"))
summary(waraDF)
waraDF <- droplevels(waraDF[complete.cases(waraDF$size1mm), ])
waraPast <- waraDF %>% filter(era == "past")
waraPres <- waraDF %>% filter(era == "present")
unique(waraDF$lat); unique(waraDF$long)
hexDF <- droplevels(filter(dat, sp == "LODI"))
summary(hexDF)
unique(hexDF$lat); unique(hexDF$long)
dat$LL <- paste(dat$lat, dat$long, sep = "_")
childsDF <- droplevels(filter(dat, sp == "LIKE"))
summary(childsDF)
unique(childsDF$lat); unique(childsDF$long)
unique(childsDF$LL)
unique(waraDF$LL)
waraDF <- droplevels(filter(dat, sp == "CHFU"))
summary(waraDF)
waraDF <- droplevels(waraDF[complete.cases(waraDF$size1mm), ])
unique(waraDF$LL)
hexDF <- droplevels(filter(dat, sp == "LODI"))
summary(hexDF)
unique(hexDF$LL)
unique(childsDF$LL)
waraDF <- droplevels(filter(dat, sp == "CHFU"))
summary(waraDF)
waraDF <- droplevels(waraDF[complete.cases(waraDF$size1mm), ])
unique(waraDF$LL)
?substr
unique(dat$lat)
unique(dat$long)
dat$LL <- paste(substr(dat$lat, 1, 8), substr(dat$long, 1, 9), sep = ",")
unique(dat$LL)
dat$LL <- paste(substr(dat$lat, 1, 8), paste("-", substr(dat$long, 1, 9)), sep = ",")
unique(dat$LL)
dat$LL <- paste(substr(dat$lat, 1, 8), paste("-", substr(dat$long, 1, 9), sep = ""), sep = ",")
unique(dat$LL)
###############################################################
# Littorina keenae
childsDF <- droplevels(filter(dat, sp == "LIKE"))
summary(childsDF)
unique(childsDF$LL)
childsPast <- childsDF %>% filter(era == "past")
childsPres <- childsDF %>% filter(era == "present")
# exclude zoneD
childsSub <- childsDF[childsDF$nest1 != "zoneD", ]
childsSubPres <- childsSub %>% filter(era == "present")
childsSubPast <- childsSub %>% filter(era == "past")
###############################################################
# Chlorostoma funebralis
waraDF <- droplevels(filter(dat, sp == "CHFU"))
summary(waraDF)
waraDF <- droplevels(waraDF[complete.cases(waraDF$size1mm), ])
unique(waraDF$LL)
waraPast <- waraDF %>% filter(era == "past")
waraPres <- waraDF %>% filter(era == "present")
###############################################################
# Lottia digitalis
hexDF <- droplevels(filter(dat, sp == "LODI"))
summary(hexDF)
unique(hexDF$LL)
# truncate to > 5.95mm
hexSub <- hexDF %>% filter(size1mm > 5.95)
with(hexSub, table(era, nest1, site))
with(hexSub, table(era, site))
# use subsetted data (with truncation)
hexPast <- hexSub %>% filter(era == "past")
hexPres <- hexSub %>% filter(era == "present")
unique(waraDF$LL)
write.csv(waraDF$LL, 'waraLL.csv')
unique(waraDF$nest1)
unique(waraPres$LL)
unique(waraPres$nest1)
waraPres %>% group_by(nest1) %>% first()
waraPres %>% group_by(nest1) %>% first(LL)
waraPres %>% group_by(nest1) %>%
summarise(meanLat = mean(lat), meanLong = mean(long))
dat$lat2 <- substr(dat$lat, 1, 8)
dat$long2 <- paste("-", substr(dat$long, 1, 9), sep = "")
unique(dat$lat2)
unique(dat$long2)
dat$lat2 <- as.numeric(substr(dat$lat, 1, 8))
unique(dat$lat2)
dat$long2 <- as.numeric(paste("-", substr(dat$long, 1, 9), sep = ""))
unique(dat$lat2)
unique(dat$long2)
dat$LL <- with(dat, paste(lat2, long2, sep = ","))
unique(dat$LL)
rm(list=ls(all=TRUE))
# plotting functions
source("./R/multiplotF.R")
# load modern data
dat <- read.csv("./output/sbsMaster.csv", na.strings = "NA")
summary(dat)
# change ft to meters
range(dat$tideHTm, na.rm = TRUE)
dat$tideHTm <- dat$tideHTm/3.28084
# create numeric lat-long columns
dat$lat2 <- as.numeric(substr(dat$lat, 1, 8))
dat$long2 <- as.numeric(paste("-", substr(dat$long, 1, 9), sep = ""))
unique(dat$lat2)
unique(dat$long2)
dat$LL <- with(dat, paste(lat2, long2, sep = ","))
unique(dat$LL)
# Littorina keenae
childsDF <- droplevels(filter(dat, sp == "LIKE"))
summary(childsDF)
unique(childsDF$LL)
childsPast <- childsDF %>% filter(era == "past")
childsPres <- childsDF %>% filter(era == "present")
# exclude zoneD
childsSub <- childsDF[childsDF$nest1 != "zoneD", ]
childsSubPres <- childsSub %>% filter(era == "present")
childsSubPast <- childsSub %>% filter(era == "past")
summary(childsDF)
childsPres %>% group_by(site) %>%
summarise(meanLat = mean(lat2), meanLong = mean(long2))
childsPres %>% group_by(site) %>%
summarise(meanLat = mean(lat2), meanLong = mean(long2),
LL = first(LL))
summarise(meanLat = first(lat2), meanLong = first(long2),
LL = first(LL))
childsPres %>% group_by(site) %>%
summarise(meanLat = first(lat2), meanLong = first(long2),
LL = first(LL))
childsPres %>% group_by(site) %>%
summarise(species = first(sp), nest1 = first(nest1),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL))
childsPres %>% group_by(site) %>%
summarise(species = first(species), nest1 = first(nest1),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL))
childsLL <- childsPres %>% group_by(site) %>%
summarise(species = first(species), nest1 = first(nest1),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL))
waraDF <- droplevels(filter(dat, sp == "CHFU"))
summary(waraDF)
waraDF <- droplevels(waraDF[complete.cases(waraDF$size1mm), ])
waraPast <- waraDF %>% filter(era == "past")
waraPres <- waraDF %>% filter(era == "present")
unique(waraPres$LL)
unique(waraPres$nest1)
waraLL <- waraPres %>% group_by(nest1) %>%
summarise(species = first(species), nest1 = first(nest1),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL))
waraLL <- waraPres %>% group_by(nest1) %>%
summarise(species = first(species),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL))
waraLL
childsLL
summarise(site = first(site), species = first(species),
meanLat = first(lat2), meanLong = first(long2),
# lat longs
waraLL <- waraPres %>% group_by(nest1) %>%
summarise(site = first(site), species = first(species),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL))
waraLL
waraLL <- waraPres %>% group_by(nest1) %>%
summarise(site = first(site), species = first(species),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL))
waraLL
waraLL <- waraPres %>% group_by(nest1) %>%
summarise(site = first(site), species = first(species),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL)) %>%
arrange(meanLat, meanLong)
waraLL
waraPres$transect <- with(waraPres, paste(site, nest1, sep = "_"))
waraLL <- waraPres %>% group_by(transect) %>%
summarise(site = first(site), species = first(species),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL)) %>%
arrange(meanLat, meanLong)
waraLL
waraDF <- droplevels(filter(dat, sp == "CHFU"))
summary(waraDF)
# waraDF <- droplevels(waraDF[complete.cases(waraDF$size1mm), ])
waraPast <- waraDF %>% filter(era == "past")
waraPres <- waraDF %>% filter(era == "present")
unique(waraPres$LL)
unique(waraPres$nest1)
waraPres$transect <- with(waraPres, paste(site, nest1, sep = "_"))
# lat longs
waraLL <- waraPres %>% group_by(transect) %>%
summarise(site = first(site), species = first(species),
meanLat = first(lat2), meanLong = first(long2),
LL = first(LL)) %>%
arrange(meanLat, meanLong)
waraLL
write.csv(waraLL, 'waraLL.csv')
# lat longs
waraLL <- waraPres %>% group_by(transect) %>%
summarise(site = first(site), species = first(species),
lat = first(lat2), long = first(long2),
LL = first(LL)) %>%
arrange(meanLat, meanLong)
waraLL
write.csv(waraLL, 'waraLL.csv')
waraLL <- waraPres %>% group_by(transect) %>%
summarise(site = first(site), species = first(species),
lat = first(lat2), long = first(long2),
LL = first(LL)) %>%
arrange(lat, long)
waraLL
write.csv(waraLL, 'waraLL.csv')
library(ggplot2)
theme_set(theme_classic(base_size = 8))
library(dplyr)
rm(list=ls(all=TRUE))
# Set working directory to main project folder
setwd("~/github/sbs_analysis")
getwd()
# Source functions
# For plotting
source("./R/multiplotF.R")
# For collating temperature data
source("./R/process_iButtonFiles.R")
# Run function to create collated temperature dataframe
dat <- iButtonTempF(fls = fileNames)
unique(dat$iButtonID)
unique(dat$csvID)
head(dat)
with(dat, iButtonID == csvID)
###########################
# Merge the spreadsheetIDs to bagNames
# Load file that links bagNames to iButtonIDs
loggers <- read.table("./data/iButton_retrieval.txt", header = TRUE)
unique(loggers$iButtonID)
# Load file that links bagNames to the details of the logger positions
positions <- read.csv("./data/iButton_deployment.csv", header = TRUE)
head(loggers)
head(positions)
envDat <- inner_join(loggers, positions, by = "bagName")
head(envDat)
###########################
# Merge environmental data to temperature data
unique(dat$iButtonID)
unique(envDat$iButtonID)
master <- inner_join(dat, envDat, by = "iButtonID")
head(master)
boxplot(tempC ~ code, data = master)
###########################
# quick plots
ggplot(master, aes(dateR, tempC, color = position)) +
geom_point(size = 2, alpha = 0.2, pch = 21) +
ylab("Temperature (C)") + xlab("Date")	+
geom_smooth(se = TRUE, size = 1) + facet_wrap(~ code)
library(ggplot2)
theme_set(theme_classic(base_size = 8))
library(dplyr)
rm(list=ls(all=TRUE))
# Set working directory to main project folder
setwd("~/github/sbs_analysis")
getwd()
# Source functions
# For plotting
source("./R/multiplotF.R")
# For collating temperature data
source("./R/process_iButtonFiles.R")
# Run function to create collated temperature dataframe
dat <- iButtonTempF(fls = fileNames)
unique(dat$iButtonID)
unique(dat$csvID)
head(dat)
with(dat, iButtonID == csvID)
###########################
# Merge the spreadsheetIDs to bagNames
# Load file that links bagNames to iButtonIDs
loggers <- read.table("./data/iButton_retrieval.txt", header = TRUE)
unique(loggers$iButtonID)
# Load file that links bagNames to the details of the logger positions
positions <- read.csv("./data/iButton_deployment.csv", header = TRUE)
head(loggers)
head(positions)
envDat <- inner_join(loggers, positions, by = "bagName")
head(envDat)
###########################
# Merge environmental data to temperature data
unique(dat$iButtonID)
unique(envDat$iButtonID)
master <- inner_join(dat, envDat, by = "iButtonID")
head(master)
boxplot(tempC ~ code, data = master)
###########################
# quick plots
ggplot(master, aes(dateR, tempC, color = position)) +
geom_point(size = 2, alpha = 0.2, pch = 21) +
ylab("Temperature (C)") + xlab("Date")	+
geom_smooth(se = TRUE, size = 1) + facet_wrap(~ code)
###########################
#Make daily summaries
master$day <- as.Date(master$dateR)
names(master)
head(master)
temp_summary_daily <- master %>%
group_by(iButtonID, day, code, nest1, nest2, position, tidalHT,
aspect, slope, lon, lat) %>%
summarise(mean_tempC = mean(tempC, na.rm=T),
max_tempC = max(tempC, na.rm=T),
min_tempC = min(tempC, na.rm=T)) %>%
ungroup()
write.csv(temp_summary_daily, "./output/temp_summary_daily.csv")
iButton_daily <- master %>%
group_by(iButtonID, day, code, nest1, nest2, position, tidalHT,
aspect, slope, lon, lat) %>%
summarise(mean_tempC = mean(tempC, na.rm=T),
max_tempC = max(tempC, na.rm=T),
min_tempC = min(tempC, na.rm=T)) %>%
ungroup()
write.csv(temp_summary_daily, "./output/temp_daily_iButton.csv")
unique(master$position)
head(master)
iButton_daily <- master %>%
group_by(iButtonID, day, code, nest1, nest2, position, tidalHT,
aspect, slope, lon, lat) %>%
summarise(mean_tempC = mean(tempC, na.rm=T),
max_tempC = max(tempC, na.rm=T),
min_tempC = min(tempC, na.rm=T)) %>%
ungroup()
write.csv(iButton_daily, "./output/temp_daily_iButton.csv")
position_daily <- master %>%
group_by(position, day, code, nest1, nest2, tidalHT,
aspect, slope, lon, lat) %>%
summarise(mean_tempC = mean(tempC, na.rm=T),
max_tempC = max(tempC, na.rm=T),
min_tempC = min(tempC, na.rm=T)) %>%
ungroup()
write.csv(position_daily, "./output/temp_daily_position.csv")
# Load daily iButton data from output folder
dat <- read.csv("./output/temp_daily_iButton.csv.csv", header = TRUE)
head(dat)
dat$day <- as.Date(dat$day)
str(dat)
###########################
ggplot(dat, aes(day, mean_tempC, color = iButtonID)) +
geom_line(size = 1, alpha = 0.8) +
ylab("Temperature (C)") + xlab("Date") +
facet_wrap(~ position) + theme(legend.position = "none")
dat <- read.csv("./output/temp_daily_iButton.csv", header = TRUE)
head(dat)
dat$day <- as.Date(dat$day)
str(dat)
###########################
ggplot(dat, aes(day, mean_tempC, color = iButtonID)) +
geom_line(size = 1, alpha = 0.8) +
ylab("Temperature (C)") + xlab("Date") +
facet_wrap(~ position) + theme(legend.position = "none")
ggplot(dat, aes(day, max_tempC, color = iButtonID)) +
geom_line(size = 1, alpha = 0.8) +
ylab("Temperature (C)") + xlab("Date") +
facet_wrap(~ position) + theme(legend.position = "none")
# Min temperatures
ggplot(dat, aes(day, min_tempC, color = iButtonID)) +
geom_line(size = 1, alpha = 0.8) +
ylab("Temperature (C)") + xlab("Date") +
facet_wrap(~ position) + theme(legend.position = "none")
dat <- read.csv("./output/temp_daily_position.csv", header = TRUE)
head(dat)
# Mean temperatures
ggplot(dat, aes(day, mean_tempC, color = iButtonID)) +
geom_line(size = 1, alpha = 0.8) +
ylab("Temperature (C)") + xlab("Date") +
facet_wrap(~ position) + theme(legend.position = "none")
# Mean temperatures
ggplot(dat, aes(day, mean_tempC, color = position)) +
geom_line(size = 1, alpha = 0.8) +
ylab("Temperature (C)") + xlab("Date") +
facet_wrap(~ position) + theme(legend.position = "none")
dat$day <- as.Date(dat$day)
# Mean temperatures
ggplot(dat, aes(day, mean_tempC, color = position)) +
geom_line(size = 1, alpha = 0.8) +
ylab("Temperature (C)") + xlab("Date") +
facet_wrap(~ position) + theme(legend.position = "none")
# Mean temperatures
ggplot(dat, aes(day, mean_tempC, color = position)) +
geom_line(size = 1, alpha = 0.8) +
ylab("Temperature (C)") + xlab("Date") +
facet_wrap(~ code) + theme(legend.position = "none")
