datMeans4
# Log-transform data
datMeans4 <- datMeans4 %>%
mutate(dens_log = log10(density_m2),
mass_log = log10(mass_mean_mg),
size_log = log10(size_mm))
datMeans4
##### RUN MODELS - CHLOROSTOMA - means #####
my_sp <- "CHFU"
##### RUN MODELS - CHLOROSTOMA - means #####
my_sp <- "CHFU_means"
# Run models and save diagnostic plots
coda_list <- loop_coda_list(wara_means, species_abbrev = my_sp, my_model = my_model, figs_location = output_location)
wara_means
# Get Wara means
wara_means <- datMeans4 %>% filter(sp == "CHFU")
wara_means
# Run models and save diagnostic plots
coda_list <- loop_coda_list(wara_means, species_abbrev = my_sp, my_model = my_model, figs_location = output_location)
wara_means
# Run models and save diagnostic plots
coda_list <- loop_coda_list(wara_means, species_abbrev = my_sp, my_model = my_model, figs_location = output_location)
##### RUN MODELS - CHLOROSTOMA - means #####
my_sp <- "CHFU_means"
# Run models and save diagnostic plots
coda_list <- loop_coda_list(wara_means, species_abbrev = my_sp, my_model = my_model, figs_location = output_location)
################################################################################
##' @title Functions to run jags models per species and quantile removed
##'
##' @author Robin Elahi
##' @contact elahi.robin@gmail.com
##'
##' @date 2017-10-30
##'
##' @log
################################################################################
##### FUNCTIONS TO RUN LOOP FOR EACH SPECIES #####
# my_sp = "LIKE"
# species_abbrev = my_sp
# dat = dens_childs
# i = 1
# my_model = "model_logsize_density.R"
# figs_location = "3_analyse_data/bayes_figs/diagnostic_logsize_density"
loop_coda_list <- function(dat, species_abbrev, my_model, figs_location){
coda_list <- list()
for(i in 1:length(p_vector)){
my_p = p_vector[i]
## Truncate data
dat <- truncate_data(dat, quant = my_p)
# Standardize predictors
dat <- dat %>% mutate(era01 = ifelse(era == "past", 0, 1))
# Center and standardize
dens_mu <- mean(dat$density_m2)
dens_sd <- sd(dat$density_m2)
dens_cent <- dat$density_m2 - dens_mu
dat$dens_stand <- dens_cent/dens_sd
# For plotting predicted values
x_min <- min(dat$density_m2)
x_max <- max(dat$density_m2)
x_predict <- seq(x_min, x_max, length.out = 100)
x_predict_stand <- (x_predict - dens_mu)/dens_sd
# For prediction
era_predict <- c(0,1)
pred_df <- expand.grid(x_predict_stand, era_predict) %>%
rename(x_predict_stand = Var1, era_predict = Var2) %>% tbl_df()
pred_df$x_predict <- x_predict
# Get data
data = list(
N = nrow(dat),
y = as.double(dat$size_log),
era = as.double(dat$era01),
x = as.double(dat$dens_stand),
x_predict = as.double(pred_df$x_predict_stand),
era_predict = as.double(pred_df$era_predict)
)
jm = jags.model(paste("3_analyse_data/bayes_models/", my_model, sep = ""),
data = data, inits = inits,
n.chains = length(inits), n.adapt = n.adapt)
update(jm, n.iter = n.update)
zm = coda.samples(jm, variable.names = c("beta0", "beta1", "beta2", "beta3","sigma"),
n.iter = n.iter, n.thin = 10)
zj = jags.samples(jm, variable.names = c("y_pred", "y_new", "beta0", "beta1",
"p.mean", "p.sd", "p.discrep"),
n.iter = n.iter, n.thin = 10)
# Save trace plots
png(filename = paste(figs_location, "traceplot", species_abbrev, my_p, ".png", sep = "_"),
height = 5, width = 5, units = "in", res = 150)
par(mfrow = c(3,2))
traceplot(zm)
dev.off()
# Save density plots
png(filename = paste(figs_location, "densplot", species_abbrev, my_p, ".png", sep = "_"),
height = 5, width = 5, units = "in", res = 150)
par(mfrow = c(3,2))
densplot(zm)
dev.off()
# Model fit - compare observed vs simulated
png(filename = paste(figs_location, "model_fit", species_abbrev, my_p, ".png", sep = "_"),
height = 5, width = 5, units = "in", res = 150)
hist(dat$size_log, breaks = 15, freq=FALSE)
lines(density(zj$y_new), col="red")
dev.off()
# Test for convergence using the Gelman diagnostic.
gd <- gelman.diag(zm, multivariate = F)[[1]]
# Check Bayesian pvals
pvals <- c(p.mean = mean(zj$p.mean), p.sd = mean(zj$p.sd), p.discrep = mean(zj$p.discrep))
# Get proportional change
zj_b0 <- zj$beta0
zj_b1 <- zj$beta1
past_size <- 10^zj_b0
present_size <- 10^(zj_b0 + zj_b1)
prop_change <- (present_size - past_size)/past_size
prop_change_quantile <- t(summary(prop_change, quantile, c(0.025, 0.25, 0.5, 0.75, 0.975))$stat)
rownames(prop_change_quantile) <- "prop_change"
# Save coda summary
coda_summary <- summary(zm)
coda_quantile <- data.frame(rbind(coda_summary$quantile, prop_change_quantile))
params <- rownames(coda_quantile)
summary_name <- paste("quantile", my_p, sep = "_")
coda_quantile <- coda_quantile %>%
mutate(coda_quantile = summary_name,
param = params)
# Make prediction dataframe
# Credible intervals
y_predict <- summary(zj$y_pred, quantile, c(0.025, 0.5, 0.975))$stat
pred_df$y_median <- y_predict[2, ]
pred_df$y_lower <- y_predict[1, ]
pred_df$y_upper <- y_predict[3, ]
# Prediction intervals
y_new <- summary(zj$y_new, quantile, c(0.025, 0.5, 0.975))$stat
pred_df$y_median_pred <- y_new[2, ]
pred_df$y_lower_pred <- y_new[1, ]
pred_df$y_upper_pred <- y_new[3, ]
pred_df$era <- ifelse(pred_df$era_predict == 0, "past", "present")
# Create list of all desired objects
coda_list.i <- list(coda_quantile, gd, pvals, pred_df)
coda_list[[i]] <- coda_list.i
}
return(coda_list)
}
loop_coda_df <- function(coda_list, species_abbrev){
# Rbind results
coda_df <- coda_list[[1]][[1]]
for(i in 2:length(p_vector)){
coda_df <- rbind(coda_df, coda_list[[i]][[1]])
}
cc       <- strsplit(coda_df$coda_quantile, split = "_")
part1    <- unlist(cc)[2*(1:length(coda_df$coda_quantile))-1]
part2    <- unlist(cc)[2*(1:length(coda_df$coda_quantile))  ]
coda_df <- coda_df %>% mutate(quant = part2, sp = species_abbrev)
return(coda_df)
}
loop_gelman_df <- function(coda_list, species_abbrev){
# Rbind results
coda_df <- coda_list[[1]][[2]]
for(i in 2:length(p_vector)){
coda_df <- rbind(coda_df, coda_list[[i]][[2]])
}
gelman_df <- as_data_frame(coda_df) %>%
mutate(param = rownames(coda_df))
names(gelman_df)[1:2] <- c("point_estimate", "upper_ci")
n_rows <- dim(coda_list[[1]][[2]])[1]
gelman_df$quant <- sort(rep(p_vector, n_rows))
gelman_df$sp <- species_abbrev
return(gelman_df)
}
loop_pval_df <- function(coda_list, species_abbrev){
# Rbind results
coda_df <- data.frame(t(coda_list[[1]][[3]]))
for(i in 2:length(p_vector)){
coda_df <- rbind(coda_df, data.frame(t(coda_list[[i]][[3]])))
}
pval_df<- coda_df %>% mutate(quant = p_vector, sp = species_abbrev)
return(pval_df)
}
loop_pred_df <- function(coda_list, species_abbrev){
# Rbind results
coda_df <- data.frame(coda_list[[1]][[4]]) %>%
mutate(quant = p_vector[1], sp = species_abbrev)
head(coda_df)
for(i in 2:length(p_vector)){
coda_df.i <- data.frame(coda_list[[i]][[4]]) %>%
mutate(quant = p_vector[i], sp = species_abbrev)
coda_df <- rbind(coda_df, coda_df.i)
}
pred_df <- coda_df
return(pred_df)
}
# Run models and save diagnostic plots
coda_list <- loop_coda_list(wara_means, species_abbrev = my_sp, my_model = my_model, figs_location = output_location)
# Log-transform data
datMeans4 <- datMeans4 %>%
mutate(dens_log = log10(density_m2),
mass_log = log10(mass_mean_mg),
size1mm = size_mm,
size_log = log10(size_mm))
# Get Wara means
wara_means <- datMeans4 %>% filter(sp == "CHFU")
# Run models and save diagnostic plots
coda_list <- loop_coda_list(wara_means, species_abbrev = my_sp, my_model = my_model, figs_location = output_location)
# Create and rename diagnostic summary
gelman_df_wara <- loop_gelman_df(coda_list, species_abbrev = my_sp)
coda_list
p_vector = c(0, 0.5)
my_sp <- "CHFU_means"
# Run models and save diagnostic plots
coda_list <- loop_coda_list(wara_means, species_abbrev = my_sp, my_model = my_model, figs_location = output_location)
# Create and rename diagnostic summary
gelman_df_wara_means <- loop_gelman_df(coda_list, species_abbrev = my_sp)
# Create and rename pvalue summary
pval_df_wara_means <- loop_pval_df(coda_list, species_abbrev = my_sp)
# Create and rename coda summary
coda_df_wara_means <- loop_coda_df(coda_list, species_abbrev = my_sp)
# Create and rename prediction dataframe
pred_df_wara_means <- loop_pred_df(coda_list, species_abbrev = my_sp)
pred_df_wara_means
coda_df_wara_means
##### PACKAGES, DATA #####
source("3_analyse_data/01_sbs_bayes_data.R")
source("R/truncate_data.R")
source("3_analyse_data/bayes_R/bayes_functions.R")
library(broom)
library(ggplot2)
library(cowplot)
##### SET UP JAGS MODEL #####
# load jags
library(rjags)
inits = list(
list(beta0 = 1, beta1 = 0.25, beta2 = 0.1, beta3 = 1, sigma = 2),
list(beta0 = 1.5, beta1 = -0.25, beta2 = -0.1, beta3 = 0, sigma = 0.2),
list(beta0 = 0.5, beta1 = -0.1, beta2 = -0.4, beta3 = -1, sigma = 0.01))
## Iterations (5000 may not be enough for Wara)
n.adapt = 3000
n.update = 3000
n.iter = 3000
p_vector = c(0, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5)
#p_vector = c(0, 0.5)
## Choose the model
my_model = "model_logsize_density.R"
## Choose the folder to output diagnostic plots
output_location = "3_analyse_data/bayes_output/logsize_density/"
##### RUN MODELS - LOTTIA #####
my_sp <- "LODI"
# Run models and save diagnostic plots
coda_list <- loop_coda_list(hexDF, species_abbrev = my_sp, my_model = my_model, figs_location = output_location)
# Create and rename diagnostic summary
gelman_df_hex <- loop_gelman_df(coda_list, species_abbrev = my_sp)
# Create and rename pvalue summary
pval_df_hex <- loop_pval_df(coda_list, species_abbrev = my_sp)
# Create and rename coda summary
coda_df_hex <- loop_coda_df(coda_list, species_abbrev = my_sp)
# Create and rename prediction dataframe
pred_df_hex <- loop_pred_df(coda_list, species_abbrev = my_sp)
##### RUN MODELS - LITTORINA #####
my_sp <- "LIKE"
# Run models and save diagnostic plots
coda_list <- loop_coda_list(childsDF, species_abbrev = my_sp, my_model = my_model, figs_location = output_location)
# Create and rename diagnostic summary
gelman_df_childs <- loop_gelman_df(coda_list, species_abbrev = my_sp)
# Create and rename pvalue summary
pval_df_childs <- loop_pval_df(coda_list, species_abbrev = my_sp)
# Create and rename coda summary
coda_df_childs <- loop_coda_df(coda_list, species_abbrev = my_sp)
# Create and rename prediction dataframe
pred_df_childs <- loop_pred_df(coda_list, species_abbrev = my_sp)
##### RUN MODELS - CHLOROSTOMA #####
my_sp <- "CHFU"
# Run models and save diagnostic plots
coda_list <- loop_coda_list(waraDF, species_abbrev = my_sp, my_model = my_model, figs_location = output_location)
# Create and rename diagnostic summary
gelman_df_wara <- loop_gelman_df(coda_list, species_abbrev = my_sp)
# Create and rename pvalue summary
pval_df_wara <- loop_pval_df(coda_list, species_abbrev = my_sp)
# Create and rename coda summary
coda_df_wara <- loop_coda_df(coda_list, species_abbrev = my_sp)
# Create and rename prediction dataframe
pred_df_wara <- loop_pred_df(coda_list, species_abbrev = my_sp)
##### RUN MODELS - CHLOROSTOMA - means #####
my_sp <- "CHFU_means"
# Run models and save diagnostic plots
coda_list <- loop_coda_list(wara_means, species_abbrev = my_sp, my_model = my_model, figs_location = output_location)
# Create and rename diagnostic summary
gelman_df_wara_means <- loop_gelman_df(coda_list, species_abbrev = my_sp)
# Create and rename pvalue summary
pval_df_wara_means <- loop_pval_df(coda_list, species_abbrev = my_sp)
# Create and rename coda summary
coda_df_wara_means <- loop_coda_df(coda_list, species_abbrev = my_sp)
# Create and rename prediction dataframe
pred_df_wara_means <- loop_pred_df(coda_list, species_abbrev = my_sp)
##### SAVE OUTPUT #####
coda_df_childs$sp <- "LIKE"
coda_df_hex$sp <- "LODI"
coda_df_wara$sp <- "CHFU"
coda_df_wara_means$sp <- "CHFU_means"
coda_df_all <- rbind(coda_df_wara, coda_df_wara_means, coda_df_hex, coda_df_childs)
write.csv(coda_df_all, paste(output_location, "coda_df_all.csv", sep = ""))
gelman_df_all <- rbind(gelman_df_wara, gelman_df_wara_means, gelman_df_hex, gelman_df_childs)
write.csv(gelman_df_all, paste(output_location, "gelman_df_all.csv", sep = ""))
pval_df_all <- rbind(pval_df_wara, pval_df_wara_means, pval_df_hex, pval_df_childs)
write.csv(pval_df_all, paste(output_location, "pval_df_all.csv", sep = ""))
pred_df_all <- rbind(pred_df_wara, pred_df_wara_means, pred_df_hex, pred_df_childs)
write.csv(pred_df_all, paste(output_location, "pred_df_all.csv", sep = ""))
coda_df_all %>%
filter(param == "prop_change") %>%
ggplot(aes(quant2, X50., shape = sp)) +
geom_point() +
geom_line(aes(linetype = sp)) +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Size threshold (quantile of past size)") +
theme(legend.position = "top") +
coord_cartesian(ylim = c(-0.4, 0.4))
coda_df_all %>%
filter(param == "prop_change") %>%
ggplot(aes(as.numeric(quant), X50.)) +
geom_point() +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Quantile")
# jitter points a bit
jitter_value = 0.01
coda_df_all <- coda_df_all %>%
mutate(quant = as.numeric(quant),
quant2 = ifelse(sp == "CHFU", quant - jitter_value,
ifelse(sp == "LIKE", quant + jitter_value, quant)))
coda_df_all %>%
filter(param == "prop_change") %>%
ggplot(aes(quant2, X50., shape = sp)) +
geom_point() +
geom_line(aes(linetype = sp)) +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Size threshold (quantile of past size)") +
theme(legend.position = "top") +
coord_cartesian(ylim = c(-0.4, 0.4))
coda_df_all %>%
filter(param == "prop_change") %>%
filter(sp != "CHFU_means") %>%
ggplot(aes(quant2, X50., shape = sp)) +
geom_point() +
geom_line(aes(linetype = sp)) +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Size threshold (quantile of past size)") +
theme(legend.position = "top") +
coord_cartesian(ylim = c(-0.4, 0.4))
pred_df_all %>%
ggplot(aes(x_predict, y_median, color = era)) +
geom_line() +
geom_ribbon(aes(ymin = y_lower, ymax = y_upper, fill = era, color = NULL),
alpha = 0.5) +
geom_ribbon(aes(ymin = y_lower_pred, ymax = y_upper_pred, fill = era, color = NULL),
alpha = 0.25) +
facet_grid(quant ~ sp, scales = "free") +
theme(legend.position = c(0.01, 0.01), legend.justification = c(0.01, 0.01))
## Iterations (5000 may not be enough for Wara)
n.adapt = 300
n.update = 300
n.iter = 300
p_vector = c(0, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5)
p_vector = c(0, 0.5)
## Choose the model
my_model = "model_logsize.R"
## Choose the folder to output diagnostic plots
output_location = "3_analyse_data/bayes_output/logsize/"
##### RUN MODELS - LOTTIA #####
my_sp <- "LODI"
# Run models and save diagnostic plots
coda_list <- loop_coda_list(hexDF, species_abbrev = my_sp, my_model = my_model, figs_location = output_location)
warnings()
# Create and rename diagnostic summary
gelman_df_hex <- loop_gelman_df(coda_list, species_abbrev = my_sp)
# Create and rename pvalue summary
pval_df_hex <- loop_pval_df(coda_list, species_abbrev = my_sp)
# Create and rename coda summary
coda_df_hex <- loop_coda_df(coda_list, species_abbrev = my_sp)
# Create and rename prediction dataframe
pred_df_hex <- loop_pred_df(coda_list, species_abbrev = my_sp)
pred_df_hex
pval_df_hex
coda_df_all %>%
filter(param == "prop_change") %>%
filter(sp != "CHFU_means") %>%
ggplot(aes(quant2, X50., shape = sp)) +
geom_point() +
geom_line(aes(linetype = sp)) +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Size threshold (quantile of past size)") +
theme(legend.position = "top") +
coord_cartesian(ylim = c(-0.4, 0.4))
ggsave("3_analyse_data/bayes_figs/logsize_density_prop_change.png", height = 3.5, width = 3.5)
################################################################################
##' @title Analyze logsize raw
##'
##' @author Robin Elahi
##' @contact elahi.robin@gmail.com
##'
##' @date 2017-10-30
##'
##' @log
################################################################################
##### PACKAGES, DATA #####
source("3_analyse_data/01_sbs_bayes_data.R")
source("R/truncate_data.R")
source("3_analyse_data/bayes_R/bayes_functions.R")
library(broom)
library(ggplot2)
library(cowplot)
##### SET UP JAGS MODEL #####
# load jags
library(rjags)
inits = list(
list(beta0 = 1, beta1 = 0.25, beta2 = 0.1, beta3 = 1, sigma = 2),
list(beta0 = 1.5, beta1 = -0.25, beta2 = -0.1, beta3 = 0, sigma = 0.2),
list(beta0 = 0.5, beta1 = -0.1, beta2 = -0.4, beta3 = -1, sigma = 0.01))
## Iterations (5000 may not be enough for Wara)
n.adapt = 3000
n.update = 3000
n.iter = 3000
p_vector = c(0, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5)
#p_vector = c(0, 0.5)
## Choose the model
my_model = "model_logsize.R"
## Choose the folder to output diagnostic plots
output_location = "3_analyse_data/bayes_output/logsize/"
##### RUN MODELS - LOTTIA #####
my_sp <- "LODI"
# Run models and save diagnostic plots
coda_list <- loop_coda_list(hexDF, species_abbrev = my_sp, my_model = my_model, figs_location = output_location)
# Create and rename diagnostic summary
gelman_df_hex <- loop_gelman_df(coda_list, species_abbrev = my_sp)
# Create and rename pvalue summary
pval_df_hex <- loop_pval_df(coda_list, species_abbrev = my_sp)
# Create and rename coda summary
coda_df_hex <- loop_coda_df(coda_list, species_abbrev = my_sp)
# Create and rename prediction dataframe
pred_df_hex <- loop_pred_df(coda_list, species_abbrev = my_sp)
##### RUN MODELS - LITTORINA #####
my_sp <- "LIKE"
# Run models and save diagnostic plots
coda_list <- loop_coda_list(childsDF, species_abbrev = my_sp, my_model = my_model, figs_location = output_location)
# Create and rename diagnostic summary
gelman_df_childs <- loop_gelman_df(coda_list, species_abbrev = my_sp)
# Create and rename pvalue summary
pval_df_childs <- loop_pval_df(coda_list, species_abbrev = my_sp)
# Create and rename coda summary
coda_df_childs <- loop_coda_df(coda_list, species_abbrev = my_sp)
# Create and rename prediction dataframe
pred_df_childs <- loop_pred_df(coda_list, species_abbrev = my_sp)
##### RUN MODELS - CHLOROSTOMA #####
my_sp <- "CHFU"
# Run models and save diagnostic plots
coda_list <- loop_coda_list(waraDF, species_abbrev = my_sp, my_model = my_model, figs_location = output_location)
# Create and rename diagnostic summary
gelman_df_wara <- loop_gelman_df(coda_list, species_abbrev = my_sp)
# Create and rename pvalue summary
pval_df_wara <- loop_pval_df(coda_list, species_abbrev = my_sp)
# Create and rename coda summary
coda_df_wara <- loop_coda_df(coda_list, species_abbrev = my_sp)
# Create and rename prediction dataframe
pred_df_wara <- loop_pred_df(coda_list, species_abbrev = my_sp)
##### RUN MODELS - CHLOROSTOMA - means #####
my_sp <- "CHFU_means"
# Run models and save diagnostic plots
coda_list <- loop_coda_list(wara_means, species_abbrev = my_sp, my_model = my_model, figs_location = output_location)
# Create and rename diagnostic summary
gelman_df_wara_means <- loop_gelman_df(coda_list, species_abbrev = my_sp)
# Create and rename pvalue summary
pval_df_wara_means <- loop_pval_df(coda_list, species_abbrev = my_sp)
# Create and rename coda summary
coda_df_wara_means <- loop_coda_df(coda_list, species_abbrev = my_sp)
# Create and rename prediction dataframe
pred_df_wara_means <- loop_pred_df(coda_list, species_abbrev = my_sp)
##### SAVE OUTPUT #####
coda_df_childs$sp <- "LIKE"
coda_df_hex$sp <- "LODI"
coda_df_wara$sp <- "CHFU"
coda_df_wara_means$sp <- "CHFU_means"
coda_df_all <- rbind(coda_df_wara, coda_df_wara_means, coda_df_hex, coda_df_childs)
write.csv(coda_df_all, paste(output_location, "coda_df_all.csv", sep = ""))
gelman_df_all <- rbind(gelman_df_wara, gelman_df_wara_means, gelman_df_hex, gelman_df_childs)
write.csv(gelman_df_all, paste(output_location, "gelman_df_all.csv", sep = ""))
pval_df_all <- rbind(pval_df_wara, pval_df_wara_means, pval_df_hex, pval_df_childs)
write.csv(pval_df_all, paste(output_location, "pval_df_all.csv", sep = ""))
pred_df_all <- rbind(pred_df_wara, pred_df_wara_means, pred_df_hex, pred_df_childs)
write.csv(pred_df_all, paste(output_location, "pred_df_all.csv", sep = ""))
##### PRELIM PLOTS #####
# jitter points a bit
jitter_value = 0.01
coda_df_all <- coda_df_all %>%
mutate(quant = as.numeric(quant),
quant2 = ifelse(sp == "CHFU", quant - jitter_value,
ifelse(sp == "LIKE", quant + jitter_value, quant)))
coda_df_all %>%
filter(param == "prop_change") %>%
filter(sp != "CHFU_means") %>%
ggplot(aes(quant2, X50., shape = sp)) +
geom_point() +
geom_line(aes(linetype = sp)) +
geom_errorbar(aes(ymin = X2.5., ymax = X97.5.)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
ylab("Proportional change in size (mm)") +
xlab("Size threshold (quantile of past size)") +
theme(legend.position = "top") +
coord_cartesian(ylim = c(-0.4, 0.4))
ggsave("3_analyse_data/bayes_figs/logsize_prop_change.png", height = 3.5, width = 3.5)
