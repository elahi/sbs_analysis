sort(names(dat3))
sort(names(master))
unique(master$habitat)
dat3 <- dat2 %>%
select(-c(habitat, tideHTm_orig, sample_area_tidal_ht, size_prop, LL, Shaw_hab)) %>%
mutate(study = "Elahi2015",
studySub = NA)
names(dat3)
master <- master %>%
mutate(year = lubridate::year(mdy(date)),
sampleArea = NA) %>%
select(-c(habitat, Shaw_hab))
names(master)
master2 <- rbind(master, dat3)
master2 %>%
ggplot(aes(era, size1mm_norm)) +
geom_violin() +
facet_wrap(~ species)
master2 %>%
ggplot(aes(era, size1mm_norm)) +
geom_violin() +
facet_wrap(~ species + study)
master2 %>%
ggplot(aes(era, size1mm)) +
geom_violin() +
facet_wrap(~ species + study)
master2 %>%
ggplot(aes(era, size1mm_norm)) +
geom_violin() +
facet_wrap(~ species + study)
dat <- read.csv("metabolic_consequences/metabolic_data/Paine_Fig1_data.csv")
dat
dat <- read.csv("metabolic_consequences/metabolic_data/Paine_Fig1_data.csv")
dat
library(dplyr)
library(ggplto2)
library(ggplot2)
# Create size data
size_vec <- seq(1, 1000, by = 5)
dat
M
m
m
m()
M()
# Make predictions
resp_df <- data.frame(M = size_vec)
# Make predictions
resp_df <- expand.grid(size_vec, dat$tempC)
resp_df
names(resp_df) <- c("M", "tempC")
# Make predictions
resp_df <- expand.grid(size_vec, dat$tempC) %>% tbl_df()
names(resp_df) <- c("M", "tempC")
resp_df
# Create size data
size_vec <- seq(5, 1000, by = 5)
# Make predictions
resp_df <- expand.grid(size_vec, dat$tempC) %>% tbl_df()
names(resp_df) <- c("M", "tempC")
resp_df
dat
resp_df <- dat %>% select(tempC, slope, n) %>%
left_join(resp_df, ., by = "tempC")
resp_df
resp_df <- dat %>% select(tempC, slope, y1, n) %>%
left_join(resp_df, ., by = "tempC")
# Make predictions
resp_df <- expand.grid(size_vec, dat$tempC) %>% tbl_df()
names(resp_df) <- c("M", "tempC")
resp_df
resp_df <- dat %>% select(tempC, slope, y1, n) %>%
left_join(resp_df, ., by = "tempC")
resp_df
resp_df <- resp_df %>%
mutate(resp = y1 * M^slope)
# Plot
resp_df %>%
ggplot(aes(M, resp)) +
geom_line() +
scale_y_log10() + scale_x_log10()
# Plot
resp_df %>%
ggplot(aes(M, resp, color = tempC)) +
geom_line() +
scale_y_log10() + scale_x_log10()
# Plot
resp_df %>%
ggplot(aes(M, resp, color = as.factor(tempC))) +
geom_line() +
scale_y_log10() + scale_x_log10()
# Create size data
size_vec <- c(1, seq(5, 1000, by = 5))
# Make predictions
resp_df <- expand.grid(size_vec, dat$tempC) %>% tbl_df()
names(resp_df) <- c("M", "tempC")
resp_df
resp_df <- dat %>% select(tempC, slope, y1, n) %>%
left_join(resp_df, ., by = "tempC")
resp_df <- resp_df %>%
mutate(resp = y1 * M^slope)
# Plot
resp_df %>%
ggplot(aes(M, resp, color = as.factor(tempC))) +
geom_line() +
scale_y_log10() + scale_x_log10()
resp_df %>% filter(M == 210)
# Paine's q10 value
q10 <- 2.64
# Import data extracted from Figure 1 - Paine 1917 - Ecology
dat <- read.csv("metabolic_consequences/metabolic_data/Paine_Fig1_data.csv")
dat
# Paine's q10 value
q10 <- 2.64
# Create size data
size_vec <- c(1, seq(5, 1000, by = 5))
# Make predictions
resp_df <- expand.grid(size_vec, dat$tempC) %>% tbl_df()
names(resp_df) <- c("M", "tempC")
resp_df
resp_df <- dat %>% select(tempC, slope, y1, n) %>%
left_join(resp_df, ., by = "tempC")
resp_df <- resp_df %>%
mutate(resp = y1 * M^slope)
# Plot
resp_df %>%
ggplot(aes(M, resp, color = as.factor(tempC))) +
geom_line() +
scale_y_log10() + scale_x_log10()
resp_df <- resp_df %>%
mutate(resp = y1 * M^slope,
resp2 = y1 * M^slope_calc)
# Import data extracted from Figure 1 - Paine 1917 - Ecology
dat <- read.csv("metabolic_consequences/metabolic_data/Paine_Fig1_data.csv")
dat
# Make predictions
resp_df <- expand.grid(size_vec, dat$tempC) %>% tbl_df()
names(resp_df) <- c("M", "tempC")
resp_df
resp_df <- dat %>% select(tempC, slope, slope_calc, y1, n) %>%
left_join(resp_df, ., by = "tempC")
resp_df <- resp_df %>%
mutate(resp = y1 * M^slope,
resp2 = y1 * M^slope_calc)
# Plot
resp_df %>%
ggplot(aes(M, resp, color = as.factor(tempC))) +
geom_line() +
scale_y_log10() + scale_x_log10()
# Plot using my calculate slope value (estimated from Figure 1)
resp_df %>%
ggplot(aes(M, resp2, color = as.factor(tempC))) +
geom_line() +
scale_y_log10() + scale_x_log10()
# Average sized individual
mean_weight <- 211 # mg
dat
dat$mean_weight <- mean_weight
Paines_resp <- c(104, 50, 39) # respiration
dat$Paines_resp <- c(104, 50, 39) # respiration
dat
dat <- dat %>%
mutate(mean_resp_calc = y1 * mean_weight^slope_calc)
dat
dat %>%
ggplot(aes(Paines_resp, mean_resp_calc)) +
geom_point() +
geomabline(slope = 0, intercept = 1)
dat %>%
ggplot(aes(Paines_resp, mean_resp_calc)) +
geom_point() +
geom_abline(slope = 0, intercept = 1)
dat %>%
ggplot(aes(Paines_resp, mean_resp_calc)) +
geom_point() +
geom_abline(slope = 1, intercept = 0)
resp_df
# Can I estimate Q10 from my calculated predictions?
dat %>% filter(M == 210)
# Can I estimate Q10 from my calculated predictions?
resp_df %>% filter(M == 210)
respQ10 <- resp_df %>% filter(tempC != 10)
respQ10
respQ10 %>% select(tempC, resp)
respQ10 %>% select(tempC, resp) %>%
spread(key = tempC, value = resp)
library(tidyr)
respQ10 %>% select(tempC, resp) %>%
spread(key = tempC, value = resp)
respQ10
respQ10 %>% select(M, tempC, resp) %>%
spread(key = tempC, value = resp)
respQ10 %>% arrange(desc(tempC))
respQ10 %>% arrange(desc(M))
respQ10 %>% arrange(M
respQ10 %>% arrange(M)
respQ10 %>% arrange(M)
respQ10 %>% select(M, tempC, resp) %>%
spread(key = tempC, value = resp)
# Use my calculated values
respQ10 %>% select(M, tempC, resp_calcu) %>%
spread(key = tempC, value = resp)
# Use my calculated values
respQ10 %>% select(M, tempC, resp_calc) %>%
spread(key = tempC, value = resp)
respQ10
# Use my calculated values
respQ10 %>% select(M, tempC, resp2) %>%
spread(key = tempC, value = resp)
# Use my calculated values
respQ10 %>% select(M, tempC, resp2) %>%
spread(key = tempC, value = resp2)
# Use my calculated values
q10_mine <- respQ10 %>% select(M, tempC, resp2) %>%
spread(key = tempC, value = resp2) %>%
mutate(q10 = `17`/`6.5`)
q10_mine
# Use my calculated values
my_temp_diff = 17-6.5
q10_mine <- respQ10 %>% select(M, tempC, resp2) %>%
spread(key = tempC, value = resp2) %>%
mutate(q10 = (`17`/`6.5`) ^ (10/my_temp_diff))
q10_mine %>%
ggplot(aes(q10)) +
geom_boxplot()
q10_mine %>%
ggplot(aes(q10)) +
geom_density()
View(q10_mine)
# Paine measured q10 between 6.5 and 17C
# Paine's q10 value
q10_paine <- 2.64
q10_mine %>%
ggplot(aes(q10)) +
geom_density() +
geom_vline(xintercept = q10_paine, color = 'red')
q10_mine
q10_mine %>% filter(M == 210)
library(dplyr)
library(ggplot2)
library(tidyr)
# Import data extracted from Figure 1 - Paine 1917 - Ecology
dat <- read.csv("metabolic_consequences/metabolic_data/Paine_Fig1_data.csv")
dat
# Create size data
size_vec <- c(1, seq(5, 1000, by = 5))
# Make predictions
resp_df <- expand.grid(size_vec, dat$tempC) %>% tbl_df()
names(resp_df) <- c("M", "tempC")
resp_df
resp_df <- dat %>% select(tempC, slope, slope_calc, y1, n) %>%
left_join(resp_df, ., by = "tempC")
resp_df <- resp_df %>%
mutate(resp = y1 * M^slope,
resp2 = y1 * M^slope_calc)
# Plot Paine's printed slope value (from text on figure 1)
resp_df %>%
ggplot(aes(M, resp, color = as.factor(tempC))) +
geom_line() +
scale_y_log10() + scale_x_log10()
# Plot using my calculate slope value (estimated from Figure 1)
# This matches the Figure (not surprisingly, since I used the calculated slopes and extrapolated y intercepts)
# More importantly, using these values, I match Paine's predicted respiration rate for an average-sized individual
resp_df %>%
ggplot(aes(M, resp2, color = as.factor(tempC))) +
geom_line() +
scale_y_log10() + scale_x_log10()
# Average sized individual
mean_weight <- 211 # mg
dat$mean_weight <- mean_weight
dat$Paines_resp <- c(104, 50, 39) # respiration
dat <- dat %>%
mutate(mean_resp_calc = y1 * mean_weight^slope_calc)
dat %>%
ggplot(aes(Paines_resp, mean_resp_calc)) +
geom_point() +
geom_abline(slope = 1, intercept = 0)
# Can I estimate Q10 from my calculated predictions?
resp_df %>% filter(M == 210)
# Paine measured q10 between 6.5 and 17C
# Paine's q10 value
q10_paine <- 2.64
respQ10 <- resp_df %>% filter(tempC != 10)
respQ10 %>% arrange(M)
# Use my calculated values
my_temp_diff = 17-6.5
q10_mine <- respQ10 %>% select(M, tempC, resp2) %>%
spread(key = tempC, value = resp2) %>%
mutate(q10 = (`17`/`6.5`) ^ (10/my_temp_diff))
q10_mine %>%
ggplot(aes(q10)) +
geom_density() +
geom_vline(xintercept = q10_paine, color = 'red')
q10_mine %>% filter(M == 210) # for an average-sized individual, I get 2.38, Paine got 2.64
q10_mine
resp_df
# Plot using my calculate slope value (estimated from Figure 1)
# This matches the Figure (not surprisingly, since I used the calculated slopes and extrapolated y intercepts)
# More importantly, using these values, I match Paine's predicted respiration rate for an average-sized individual
resp_df %>%
ggplot(aes(M, resp2, color = as.factor(tempC))) +
geom_line() +
scale_y_log10() + scale_x_log10()
source("metabolic_consequences/metabolicTheory.R")
## Calculate Ea
resp_df
k
dat
resp_df
resp_df2 <- resp_df %>%
mutate(Ea = (k * (tempC + 273.15))*(slope_calc*log(M) + log(y1)))
resp_df2 %>%
ggplot(aes(as.factor(tempC), Ea)) +
geom_boxplot()
# 0 Celsius = 273.15 K
# Rearrange metabolic equation to solve for Ea
resp_df2 <- resp_df %>%
mutate(Ea = (k * (tempC + 273.15))*(slope_calc*log(M) + log(y1) - log(resp2)))
resp_df2 %>%
ggplot(aes(as.factor(tempC), Ea)) +
geom_boxplot()
# 0 Celsius = 273.15 K
# Rearrange metabolic equation to solve for Ea
resp_df2 <- resp_df %>%
mutate(Ea = (k * (tempC + 273.15))*(slope_calc*log(M*1000) + log(y1) - log(resp2)))
resp_df2 %>%
ggplot(aes(as.factor(tempC), Ea)) +
geom_boxplot()
resp_df <- resp_df %>%
mutate(tempK = tempC + 273.15,
M_g = M * 1000,
resp_J_s = resp2 * 1/60 * 1/1000 * 19.63) # convert hrs to seconds; ul to ml; Oxygen to joules
resp_df2 <- resp_df %>%
mutate(Ea = (k * (tempC + 273.15))*(slope_calc*log(M*1000) + log(y1) - log(resp2)))
resp_df2 <- resp_df %>%
mutate(Ea = (k * tempK)*(slope_calc*log(M_g) + log(y1) - log(resp_J_s)))
resp_df2 %>%
ggplot(aes(as.factor(tempC), Ea)) +
geom_boxplot()
View(resp_df2)
resp_df <- resp_df %>%
mutate(Ea = (k * tempK)*(slope_calc*log(M_g) + log(y1) - log(resp_J_s)))
unique(resp_df$Ea])
unique(resp_df$Ea)
unique(round(resp_df$Ea, 3))
unique(round(resp_df$Ea, 4))
# Get a random sample of snails
my_snail_sizes <- rnorm(n = 100, mean = 20, sd = 5)
my_snail_sizes
?rgamma
# Get a random sample of snails
my_snail_sizes <- rnorm(n = 100, mean = 20, sd = 10)
my_snail_sizes
my_snail_sizes <- my_snail_sizes[my_snail_sizes > 2]
my_snail_sizes
hist(my_snail_sizes)
# Convert to biomass using Paine's combined equation
length_to_biomass <- function(x) -5.016 + 3.670 * log(x)
length_to_biomass(my_snail_sizes)
exp(length_to_biomass(my_snail_sizes))
# Convert to biomass using Paine's combined equation (returns mg dry weight)
length_to_biomass <- function(x) exp(-5.016 + 3.670 * log(x))
# Convert to biomass using Paine's combined equation (returns mg dry weight)
mmTOmg_tegula <- function(x) exp(-5.016 + 3.670 * log(x))
mmTOmg_tegula(my_snail_sizes)
mmTOmg_tegula(my_snail_sizes)
# Convert to biomass using Paine's combined equation (returns g dry weight)
mmTOmg_tegula <- function(x) exp(-5.016 + 3.670 * log(x)) / 1000
mmTOg_tegula(my_snail_sizes)
# Convert to biomass using Paine's combined equation (returns g dry weight)
mmTOmg_tegula <- function(x) exp(-5.016 + 3.670 * log(x)) / 1000
mmTOg_tegula(my_snail_sizes)
# Convert to biomass using Paine's combined equation (returns g dry weight)
mmTOmg_tegula <- function(x) exp(-5.016 + 3.670 * log(x)) / 1000
mmTOg_tegula(my_snail_sizes)
# Convert to biomass using Paine's combined equation (returns g dry weight)
mmTOg_tegula <- function(x) exp(-5.016 + 3.670 * log(x)) / 1000
mmTOg_tegula(my_snail_sizes)
my_snail_weights <- mmTOg_tegula(my_snail_sizes)
my_snail_grams <- mmTOg_tegula(my_snail_sizes)
# Get a random sample of snails (from Paine, 412 individuals per m2; mean size = 211mg or 16.9 mm)
my_snail_sizes <- rnorm(n = 400, mean = 17, sd = 10)
my_snail_sizes <- my_snail_sizes[my_snail_sizes > 2]
hist(my_snail_sizes)
# Get a random sample of snails (from Paine, 412 individuals per m2; mean size = 211mg or 16.9 mm)
my_snail_sizes <- rnorm(n = 400, mean = 17, sd = 5)
my_snail_sizes <- my_snail_sizes[my_snail_sizes > 2]
hist(my_snail_sizes)
# Convert to biomass using Paine's combined equation (returns g dry weight)
mmTOg_tegula <- function(x) exp(-5.016 + 3.670 * log(x)) / 1000
my_snail_grams <- mmTOg_tegula(my_snail_sizes)
my_snail_grams
sum(my_snail_grams)
# Estimate respiration (in Joules) for each snail
# R = aM^bexp(-E/kT)
# ln(R) = b*ln(M) - E(1/kT) + log(a)
b
E
# Estimate respiration (in Joules) for each snail
# R = aM^bexp(-E/kT)
# ln(R) = b*ln(M) - E(1/kT) + log(a)
get_resp_Js <- function(x, b, a, Ea, tempK) exp(b * log(x) - Ea(1/k*tempK) + log(a))
my_snail_resp <- get_resp_Js(x = my_snail_grams, b = 0.86, a = 1, Ea = 0.3, tempK = 290.15)
# Estimate respiration (in Joules) for each snail
# R = aM^bexp(-E/kT)
# ln(R) = b*ln(M) - E(1/kT) + log(a)
get_resp_Js <- function(x, b, a, Ea, tempK) exp(b * log(x) - Ea*(1/k*tempK) + log(a))
my_snail_resp <- get_resp_Js(x = my_snail_grams, b = 0.86, a = 1, Ea = 0.3, tempK = 290.15)
sum(my_snail_resp)
my_snail_resp
my_snail_grams
log(x)
# Plot using my calculate slope value (estimated from Figure 1)
# This matches the Figure (not surprisingly, since I used the calculated slopes and extrapolated y intercepts)
# More importantly, using these values, I match Paine's predicted respiration rate for an average-sized individual
resp_df %>%
ggplot(aes(M, resp2, color = as.factor(tempC))) +
geom_line() +
scale_y_log10() + scale_x_log10()
dat
my_snail_resp <- get_resp_Js(x = my_snail_grams, b = 0.86, a = 1, Ea = 0.65, tempK = 290.15)
sum(my_snail_resp)
log(1)
Ea
Ea = 0.6
k
tempK = 10
Ea = 0.65
Ea*(1/k*tempK)
b = 0.86
b * log(x)
x = my_snail_grams
b * log(x)
log(x)
b * log(x)
b * log(x) - Ea*(1/k*tempK) + log(a)
a = 1
b * log(x) - Ea*(1/k*tempK) + log(a)
exp(-75400)
tempK
tempK = 290.15
# Estimate respiration (in Joules) for each snail
# R = aM^bexp(-E/kT)
# ln(R) = b*ln(M) - E(1/kT) + log(a)
get_resp_Js <- function(x, b, a, Ea, tempK) exp(b * log(x) - Ea*(1/k*tempK) + log(a))
sum(my_snail_resp)
b = 0.86
a = 1
Ea = 0.65
tempK = 17 + 273.15
get_resp_Js <- function(x, b, a, Ea, tempK) exp(b * log(x) - Ea*(1/k*tempK) + log(a))
my_snail_resp <- get_resp_Js(x = my_snail_grams, b = 0.86, a = 1, Ea = 0.65, tempK = 290.15)
sum(my_snail_resp)
my_snail_resp
my_snail_resp <- get_resp_Js(x = my_snail_grams, b = b, a = a, Ea = Ea, tempK = tempK)
sum(my_snail_resp)
my_snail_resp
my_snail_grams
x = my_snail_grams
my_snail_resp <- get_resp_Js(x = x, b = b, a = a, Ea = Ea, tempK = tempK)
my_snail_resp
sum(my_snail_resp)
b
get_resp_Js <- function(x, b, a, Ea, tempK) exp(b * log(x) - Ea*(1/k*tempK) + log(a))
my_snail_resp <- get_resp_Js(x = x, b = b, a = a, Ea = Ea, tempK = tempK)
my_snail_resp
get_resp_Js <- function(x, b, a, Ea, tempK) b * log(x) - Ea*(1/k*tempK) + log(a)
my_snail_resp <- get_resp_Js(x = x, b = b, a = a, Ea = Ea, tempK = tempK)
my_snail_resp
T
tempK
k
k * tempK
1 / k*tempK
(1 / k*tempK) * Ea
Ea
my_snail_grams
log(my_snail_grams)
get_resp_Js <- function(x, b, a, Ea, tempK) {
b * log(x) - Ea*(1/k*tempK) + log(a)
}
my_snail_resp <- get_resp_Js(x = x, b = b, a = a, Ea = Ea, tempK = tempK)
my_snail_resp
get_resp_Js <- function(x, b, a, Ea, tempK) {
b * log(x) #- Ea*(1/k*tempK) + log(a)
}
my_snail_resp <- get_resp_Js(x = x, b = b, a = a, Ea = Ea, tempK = tempK)
my_snail_resp
get_resp_Js <- function(x, b, a, Ea, tempK) {
b * log(x) - Ea*(1/k*tempK) #+ log(a)
}
my_snail_resp <- get_resp_Js(x = x, b = b, a = a, Ea = Ea, tempK = tempK)
my_snail_resp
get_resp_Js <- function(x, b, a, Ea, tempK) {
b * log(x) - Ea*(1/k*tempK) + log(a)
}
my_snail_resp <- get_resp_Js(x = x, b = b, a = a, Ea = Ea, tempK = tempK)
my_snail_resp
#
kelvin_vec <- seq(0, 20, by = 1) + 273.15
kelvin_vec
ln(1)
log(1)
my_snail_grams
b = 0.86
a = 1
Ea = 0.65
tempK = 17 + 273.15
x = my_snail_grams
b * log(x) - Ea*(1/k*tempK) + log(a)
a = 0.2
b * log(x) - Ea*(1/k*tempK) + log(a)
