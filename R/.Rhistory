i <- 2
isthisspecial <- TRUE
i <- 2
while (i < z) {
if (z %% i == 0) {
isthisspecial <- FALSE
break
}
i <- i + 1
}
if (isthisspecial = TRUE) {
print(z)
}
while (i < z) {
if (z %% i == 0) {
isthisspecial <- FALSE
break
}
i <- i + 1
}
if (isthisspecial = TRUE) {
print(z)
}
while (i < z) {
if (z %% i == 0) {
isthisspecial <- FALSE
break
}
i <- i + 1
}
z <- readline(prompt = "Enter a number: ")
z <- readline(prompt = "Enter a number: ")
z <- as.numeric(z)
isthisspecial <- TRUE
i <- 2
while (i < z) {
if (z %% i == 0) {
isthisspecial <- FALSE
break
}
i <- i + 1
}
if (isthisspecial = TRUE) {
print(z)
}
isthisspecial <- TRUE
i <- 2
while (i < z) {
if (z %% i == 0) {
isthisspecial <- FALSE
break
}
i <- i + 1
}
if (isthisspecial == TRUE) {
print(z)
}
filenames
fileNames
fileNames[1]
iButtonID
substr(fileNames[1])
substr(fileNames[1], start = 1, end)
substr(fileNames[1], start = 1, end = 10)
substr(fileNames[1], start = 1, stop = 10)
length(fileNames)
length(fileNames[1])
nchar(fileNames[1])
nchar(fileNames)
substr(fileNames[1], start = 1, stop = 20)
substr(fileNames[1], start = 1, stop = 17)
substr(fileNames[1], start = 1, stop = 16)
csvID <- substr(fileNames[1], start = 1, stop = 16)
ibutton <- read.csv(file = paste("../data/iButtonFiles/", fls[1], sep = ""),
skip = 1, nrow = 1, header = FALSE, stringsAsFactors = FALSE)
ibutton
# at which value does the registration number start?
startZeros <- regexpr(": ", ibutton)[1] # position 35
# position where iButtonID starts
iButtonIDstart <- startZeros + 2
# extract iButtonID
iButtonID <- substr(ibutton, start = iButtonIDstart, stop = nchar(ibutton))
f <- 1
paste("../data/iButtonFiles/", fls[f], sep = "")
read.csv("../data/iButtonFiles/030000002E2C9421.csv")
ibutton <- read.csv(file = paste("../data/iButtonFiles/", fls[f], sep = ""),
skip = 1, nrow = 1, header = FALSE, stringsAsFactors = FALSE)
setwd("~/github/sbs_analysis/R")
ibutton <- read.csv(file = paste("../data/iButtonFiles/", fls[f], sep = ""),
skip = 1, nrow = 1, header = FALSE, stringsAsFactors = FALSE)
ibutton
ibutton
# at which value does the registration number start?
startZeros <- regexpr(": ", ibutton)[1] # position 35
# position where iButtonID starts
iButtonIDstart <- startZeros + 2
# extract iButtonID
iButtonID <- substr(ibutton, start = iButtonIDstart, stop = nchar(ibutton))
nchar(fileNames)
csvID <- substr(fileNames[f], start = 1, stop = 16)
tempDat <- read.csv(fls[f], skip = 14)
tempDat <- read.csv(file = paste("../data/iButtonFiles/", fls[f], skip = 14)
tempDat <- read.csv(file = paste("../data/iButtonFiles/", fls[f], skip = 14))
tempDat <- read.csv(file = paste("../data/iButtonFiles/", fls[f]), skip = 14)
tempDat <- read.csv(file = paste("../data/iButtonFiles/", fls[f]), skip = 14)
tempDat <- read.csv(file = paste("../data/iButtonFiles/", fls[f], sep = ""),
skip = 14)
View(tempDat)
dateTimeR <- as.POSIXct(strptime(substr(tempDat$Date.Time, 1, 20),
format = '%d/%m/%y %I:%M:%S %p'))
tempDat$dateTimeR <- dateTimeR
tempDat2 <- data.frame(iButtonID, treatmentID,
tempDat$dateTimeR, tempDat$Value)
tempDat2 <- data.frame(iButtonID,
tempDat$dateTimeR, tempDat$Value)
head(tempDat2)
names(tempDat3)[2:3] <- c("dateR", "tempC")
names(tempDat2)[2:3] <- c("dateR", "tempC")
head(tempDat2)
tempDat2 <- data.frame(iButtonID,csvID,
tempDat$dateTimeR, tempDat$Value)
names(tempDat2)[3:4] <- c("dateR", "tempC")
head(tempDat2)
setwd("~/bios248/R/sandbox")
dd <- read.table("../data/MOMv3.3.txt", header = FALSE, sep = "\t",
stringsAsFactors = FALSE)
dim(dd)
dd <- read.table("../data/MOMv3.3.txt", header = FALSE, sep = "\t",
+ stringsAsFactors = FALSE)
dd <- read.table("../data/MOMv3.3.txt", header = FALSE, sep = "\t",
stringsAsFactors = FALSE)
colnames(dd) <- c("Continent", "Status", "Order", "Family", "Genus",
"Species", "LogMass", "CombinedMass", "Reference")
head(dd)
dd[dd == -999] <- NA
summary(dd[,7])
families(sort(unique(dd$Family)))
families <- sort(unique(dd$Family))
nfam <- length(families)
nfam <- length(families)
nfam
source("read-mass.R")
for (f in 1:nfam) {
my_family <- families[f]
my_avg_bodymass <- 0
my_numberofspecies <- 0
prin(my_family)
}
# Create an empty data frame
for (f in 1:nfam) {
my_family <- families[f]
my_avg_bodymass <- 0
my_numberofspecies <- 0
print(my_family)
}
source('ugly.R')
# Page 58
source("read-mass.R")
# Create an empty data frame
for (f in 1:nfam) {
my_family <- families[f]
my_avg_bodymass <- 0
my_numberofspecies <- 0
# Cycle through records
for (i in 1:dim(dd)[1]){
# - if the species belongs to the family
if(is.na(dd[i, ]$Family) == FALSE) {
if(dd[i,]$Family == my_family) {
# - if the body mass is not NA
if(is.na(dd[i, ]$LogMass) == FALSE) {
# - add to the avg mass (after exponentiating)
my_avg_bodymass <- my_avg_bodymass + 10 ^ dd[i, ]$LogMass
# - keep track of the number of species in the family
my_numberofspecies <- my_numberofspecies + 1
}
}
}
}
# once finished, average and store the result
# for the families with at least one species with body mass
if (my_numberofspecies > 0) {
my_avg_bodymass <- my_avg_bodymass / my_numberofspecies
# rbind adds a row to a table or data frame
avg_bodymass_family <- rbind(avg_bodymass_family,
data.frame(Family = my_family,
AvgBodyMass = my_avg_bodymass,
NumSpecies - my_numberofspecies))
}
}
print(avg_bodymass_family)
source("read-mass.R")
nfam
f <- 1
my_family <- families[f]
my_avg_bodymass <- 0
my_numberofspecies <- 0
# Cycle through records
for (i in 1:dim(dd)[1]){
# - if the species belongs to the family
if(is.na(dd[i, ]$Family) == FALSE) {
if(dd[i,]$Family == my_family) {
# - if the body mass is not NA
if(is.na(dd[i, ]$LogMass) == FALSE) {
# - add to the avg mass (after exponentiating)
my_avg_bodymass <- my_avg_bodymass + 10 ^ dd[i, ]$LogMass
# - keep track of the number of species in the family
my_numberofspecies <- my_numberofspecies + 1
}
}
}
}
# once finished, average and store the result
# for the families with at least one species with body mass
if (my_numberofspecies > 0) {
my_avg_bodymass <- my_avg_bodymass / my_numberofspecies
# rbind adds a row to a table or data frame
avg_bodymass_family <- rbind(avg_bodymass_family,
data.frame(Family = my_family,
AvgBodyMass = my_avg_bodymass,
NumSpecies - my_numberofspecies))
}
}
# Create an empty data frame
avg_bodymass_family <- data.frame()
# For each family
for (f in 1:nfam) {
my_family <- families[f]
my_avg_bodymass <- 0
my_numberofspecies <- 0
# Cycle through records
for (i in 1:dim(dd)[1]){
# - if the species belongs to the family
if(is.na(dd[i, ]$Family) == FALSE) {
if(dd[i,]$Family == my_family) {
# - if the body mass is not NA
if(is.na(dd[i, ]$LogMass) == FALSE) {
# - add to the avg mass (after exponentiating)
my_avg_bodymass <- my_avg_bodymass + 10 ^ dd[i, ]$LogMass
# - keep track of the number of species in the family
my_numberofspecies <- my_numberofspecies + 1
}
}
}
}
# once finished, average and store the result
# for the families with at least one species with body mass
if (my_numberofspecies > 0) {
my_avg_bodymass <- my_avg_bodymass / my_numberofspecies
# rbind adds a row to a table or data frame
avg_bodymass_family <- rbind(avg_bodymass_family,
data.frame(Family = my_family,
AvgBodyMass = my_avg_bodymass,
NumSpecies - my_numberofspecies))
}
}
print(avg_bodymass_family)
source('~/bios248/R/sandbox/ugly.R')
source("read-mass.R")
avg_bodymass_family <- data.frame(Family = families,
AvgBodyMass = 0,
NumSpecies = 0)
print(avg_bodymass_family)
head(dd)
source(read-mass.R)
source("read-mass.R"))
source("read-mass.R")
avg_bodymass_family <- data.frame()
for (f in families) {
# Find the subset of logMass for that family
ddsub <- subset(dd$LogMass, dd$Family == f &
is.na(dd$LogMass) == FALSE)
# Add a record to the dataframe
if(length(ddsub) > 0) {
avg_bodymass_family <- rbind(avg_bodymass_family,
data.frame(Family = f,
AvgBodyMass =
mean(10 ^ ddsub),
NumSpecies = length(
ddsub
)))
}
}
print(avg_bodymass_family)
emptyMat <- rbind(emptyMat, tempDat2)
return(emptyMat)
emptyMat
dim(emptyMat)
head(emptyMat)
#################################################
# Author: Robin Elahi
# Date: 151005
# Script to compile iButton temperature files
# into one csv file
#################################################
# Raw iButton files are placed in a directory called "iButtonFiles",
# within 'data' directory
# This processing file is in the "R" directory: where is this?
getwd()
# This call gets you the files within the present working directory
dir() # OR
dir(path = ".")
# What if I want the directory above?
dir(path = "..")
# What if I want a different directory one level above?
dir(path = "../data")
# Now choose the appropriate folder, in this case "iButtonFiles"
dir(path = "../data/iButtonFiles")
######################################################
# Need a list of file names from the iButtonFiles
fileNames <- dir(path = "../data/iButtonFiles", recursive = TRUE,
pattern = ".csv")
######################################################
# Goal is to create a single data file with 4 columns:
# date/time
# temperature (Value)
# csv file name
# iButton registration number
# (in this case, the latter two should be the same)
iButtonTempF <- function(fls) {
# get names of all files
fls <- fileNames
emptyMat <- as.data.frame(matrix(nrow = 0, ncol = 4))
names(emptyMat) <- c("iButtonID", "spreadsheetID", "dateR",
"tempC")
for (f in 1:length(fls)) {
##########################
# extract iButtonID
paste("../data/iButtonFiles/", fls[f], sep = "")
ibutton <- read.csv(file = paste("../data/iButtonFiles/", fls[f], sep = ""),
skip = 1, nrow = 1, header = FALSE, stringsAsFactors = FALSE)
ibutton
# at which value does the registration number start?
startZeros <- regexpr(": ", ibutton)[1] # position 35
# position where iButtonID starts
iButtonIDstart <- startZeros + 2
# extract iButtonID
iButtonID <- substr(ibutton, start = iButtonIDstart, stop = nchar(ibutton))
##########################
# Extract spreadsheet ID
# All the names are 20 characters
nchar(fileNames)
csvID <- substr(fileNames[f], start = 1, stop = 16)
##########################
# Extract temperature Data
tempDat <- read.csv(file = paste("../data/iButtonFiles/", fls[f], sep = ""),
skip = 14)
# convert time stamps to POSIX object
dateTimeR <- as.POSIXct(strptime(substr(tempDat$Date.Time, 1, 20),
format = '%d/%m/%y %I:%M:%S %p'))
tempDat$dateTimeR <- dateTimeR
# output data
tempDat2 <- data.frame(iButtonID,csvID,
tempDat$dateTimeR, tempDat$Value)
names(tempDat2)[3:4] <- c("dateR", "tempC")
# return data
emptyMat <- rbind(emptyMat, tempDat2)
}
return(emptyMat)
}
setwd("~/github/sbs_analysis/R")
#################################################
# Raw iButton files are placed in a directory called "iButtonFiles",
# within 'data' directory
# This processing file is in the "R" directory: where is this?
getwd()
# This call gets you the files within the present working directory
dir() # OR
dir(path = ".")
# What if I want the directory above?
dir(path = "..")
# What if I want a different directory one level above?
dir(path = "../data")
# Now choose the appropriate folder, in this case "iButtonFiles"
dir(path = "../data/iButtonFiles")
######################################################
# Need a list of file names from the iButtonFiles
fileNames <- dir(path = "../data/iButtonFiles", recursive = TRUE,
pattern = ".csv")
######################################################
# Goal is to create a single data file with 4 columns:
# date/time
# temperature (Value)
# csv file name
# iButton registration number
# (in this case, the latter two should be the same)
iButtonTempF <- function(fls) {
# get names of all files
fls <- fileNames
emptyMat <- as.data.frame(matrix(nrow = 0, ncol = 4))
names(emptyMat) <- c("iButtonID", "spreadsheetID", "dateR",
"tempC")
for (f in 1:length(fls)) {
##########################
# extract iButtonID
paste("../data/iButtonFiles/", fls[f], sep = "")
ibutton <- read.csv(file = paste("../data/iButtonFiles/", fls[f], sep = ""),
skip = 1, nrow = 1, header = FALSE, stringsAsFactors = FALSE)
ibutton
# at which value does the registration number start?
startZeros <- regexpr(": ", ibutton)[1] # position 35
# position where iButtonID starts
iButtonIDstart <- startZeros + 2
# extract iButtonID
iButtonID <- substr(ibutton, start = iButtonIDstart, stop = nchar(ibutton))
##########################
# Extract spreadsheet ID
# All the names are 20 characters
nchar(fileNames)
csvID <- substr(fileNames[f], start = 1, stop = 16)
##########################
# Extract temperature Data
tempDat <- read.csv(file = paste("../data/iButtonFiles/", fls[f], sep = ""),
skip = 14)
# convert time stamps to POSIX object
dateTimeR <- as.POSIXct(strptime(substr(tempDat$Date.Time, 1, 20),
format = '%d/%m/%y %I:%M:%S %p'))
tempDat$dateTimeR <- dateTimeR
# output data
tempDat2 <- data.frame(iButtonID,csvID,
tempDat$dateTimeR, tempDat$Value)
names(tempDat2)[3:4] <- c("dateR", "tempC")
# return data
emptyMat <- rbind(emptyMat, tempDat2)
}
return(emptyMat)
}
fileNames <- dir(path = "../data/iButtonFiles", recursive = TRUE,
pattern = ".csv")
iButtonTempF <- function(fls) {
# get names of all files
fls <- fileNames
emptyMat <- as.data.frame(matrix(nrow = 0, ncol = 4))
names(emptyMat) <- c("iButtonID", "spreadsheetID", "dateR",
"tempC")
for (f in 1:length(fls)) {
##########################
# extract iButtonID
#################################################
# Author: Robin Elahi
# Date: 151005
# Script to compile iButton temperature files
# into one csv file
#################################################
# Raw iButton files are placed in a directory called "iButtonFiles",
# within 'data' directory
# This processing file is in the "R" directory: where is this?
getwd()
# This call gets you the files within the present working directory
dir() # OR
dir(path = ".")
# What if I want the directory above?
dir(path = "..")
# What if I want a different directory one level above?
dir(path = "../data")
# Now choose the appropriate folder, in this case "iButtonFiles"
dir(path = "../data/iButtonFiles")
######################################################
# Need a list of file names from the iButtonFiles
fileNames <- dir(path = "../data/iButtonFiles", recursive = TRUE,
pattern = ".csv")
######################################################
# Goal is to create a single data file with 4 columns:
# date/time
# temperature (Value)
# csv file name
# iButton registration number
# (in this case, the latter two should be the same)
iButtonTempF <- function(fls) {
# get names of all files
fls <- fileNames
emptyMat <- as.data.frame(matrix(nrow = 0, ncol = 4))
names(emptyMat) <- c("iButtonID", "spreadsheetID", "dateR",
"tempC")
for (f in 1:length(fls)) {
##########################
# extract iButtonID
paste("../data/iButtonFiles/", fls[f], sep = "")
ibutton <- read.csv(file = paste("../data/iButtonFiles/", fls[f], sep = ""),
skip = 1, nrow = 1, header = FALSE, stringsAsFactors = FALSE)
ibutton
# at which value does the registration number start?
startZeros <- regexpr(": ", ibutton)[1] # position 35
# position where iButtonID starts
iButtonIDstart <- startZeros + 2
# extract iButtonID
iButtonID <- substr(ibutton, start = iButtonIDstart, stop = nchar(ibutton))
##########################
# Extract spreadsheet ID
# All the names are 20 characters
nchar(fileNames)
csvID <- substr(fileNames[f], start = 1, stop = 16)
##########################
# Extract temperature Data
tempDat <- read.csv(file = paste("../data/iButtonFiles/", fls[f], sep = ""),
skip = 14)
# convert time stamps to POSIX object
dateTimeR <- as.POSIXct(strptime(substr(tempDat$Date.Time, 1, 20),
format = '%d/%m/%y %I:%M:%S %p'))
tempDat$dateTimeR <- dateTimeR
# output data
tempDat2 <- data.frame(iButtonID,csvID,
tempDat$dateTimeR, tempDat$Value)
names(tempDat2)[3:4] <- c("dateR", "tempC")
# return data
emptyMat <- rbind(emptyMat, tempDat2)
}
return(emptyMat)
}
iButtonTempF(fls = fileNames)
masterTempFile <- iButtonTempF(fls = fileNames)
2048*41
head(masterTempFile)
